(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.dagreD3 = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
    /**
     * @license
     * Copyright (c) 2012-2013 Chris Pettitt
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    module.exports =  {
        graphlib: require("./lib/graphlib"),
        dagre: require("./lib/dagre"),
        intersect: require("./lib/intersect"),
        render: require("./lib/render"),
        util: require("./lib/util"),
        version: require("./lib/version")
    };

},{"./lib/dagre":8,"./lib/graphlib":9,"./lib/intersect":10,"./lib/render":25,"./lib/util":27,"./lib/version":28}],2:[function(require,module,exports){
    var util = require("./util");

    module.exports = {
        "default": normal,
        "normal": normal,
        "vee": vee,
        "undirected": undirected
    };

    function normal(parent, id, edge, type) {
        var marker = parent.append("marker")
            .attr("id", id)
            .attr("viewBox", "0 0 10 10")
            .attr("refX", 9)
            .attr("refY", 5)
            .attr("markerUnits", "strokeWidth")
            .attr("markerWidth", 8)
            .attr("markerHeight", 6)
            .attr("orient", "auto");

        var path = marker.append("path")
            .attr("d", "M 0 0 L 10 5 L 0 10 z")
            .style("stroke-width", 1)
            .style("stroke-dasharray", "1,0");
        util.applyStyle(path, edge[type + "Style"]);
        if (edge[type + "Class"]) {
            path.attr("class", edge[type + "Class"]);
        }
    }

    function vee(parent, id, edge, type) {
        var marker = parent.append("marker")
            .attr("id", id)
            .attr("viewBox", "0 0 10 10")
            .attr("refX", 9)
            .attr("refY", 5)
            .attr("markerUnits", "strokeWidth")
            .attr("markerWidth", 8)
            .attr("markerHeight", 6)
            .attr("orient", "auto");

        var path = marker.append("path")
            .attr("d", "M 0 0 L 10 5 L 0 10 L 4 5 z")
            .style("stroke-width", 1)
            .style("stroke-dasharray", "1,0");
        util.applyStyle(path, edge[type + "Style"]);
        if (edge[type + "Class"]) {
            path.attr("class", edge[type + "Class"]);
        }
    }

    function undirected(parent, id, edge, type) {
        var marker = parent.append("marker")
            .attr("id", id)
            .attr("viewBox", "0 0 10 10")
            .attr("refX", 9)
            .attr("refY", 5)
            .attr("markerUnits", "strokeWidth")
            .attr("markerWidth", 8)
            .attr("markerHeight", 6)
            .attr("orient", "auto");

        var path = marker.append("path")
            .attr("d", "M 0 5 L 10 5")
            .style("stroke-width", 1)
            .style("stroke-dasharray", "1,0");
        util.applyStyle(path, edge[type + "Style"]);
        if (edge[type + "Class"]) {
            path.attr("class", edge[type + "Class"]);
        }
    }

},{"./util":27}],3:[function(require,module,exports){
    var util = require("./util"),
        d3 = require("./d3"),
        addLabel = require("./label/add-label");

    module.exports = createClusters;

    function createClusters(selection, g) {
        var clusters = g.nodes().filter(function(v) { return util.isSubgraph(g, v); }),
            svgClusters = selection.selectAll("g.cluster")
                .data(clusters, function(v) { return v; });

        svgClusters.selectAll("*").remove();
        svgClusters.enter()
            .append("g")
            .attr("class", "cluster")
            .attr("id",function(v){
                var node = g.node(v);
                return node.id;
            })
            .style("opacity", 0);

        svgClusters = selection.selectAll("g.cluster");

        util.applyTransition(svgClusters, g)
            .style("opacity", 1);

        svgClusters.each(function(v) {
            var node = g.node(v),
                thisGroup = d3.select(this);
            d3.select(this).append("rect");
            var labelGroup = thisGroup.append("g").attr("class", "label");
            addLabel(labelGroup, node, node.clusterLabelPos);
        });

        svgClusters.selectAll("rect").each(function(c) {
            var node = g.node(c);
            var domCluster = d3.select(this);
            util.applyStyle(domCluster, node.style);
        });

        util.applyTransition(svgClusters.exit(), g)
            .style("opacity", 0)
            .remove();

        return svgClusters;
    }

},{"./d3":7,"./label/add-label":18,"./util":27}],4:[function(require,module,exports){
    "use strict";

    var _ = require("./lodash"),
        addLabel = require("./label/add-label"),
        util = require("./util"),
        d3 = require("./d3");

    module.exports = createEdgeLabels;

    function createEdgeLabels(selection, g) {
        var svgEdgeLabels = selection.selectAll("g.edgeLabel")
            .data(g.edges(), function(e) { return util.edgeToId(e); })
            .classed("update", true);

        svgEdgeLabels.selectAll("*").remove();
        svgEdgeLabels.enter()
            .append("g")
            .classed("edgeLabel", true)
            .style("opacity", 0);

        svgEdgeLabels = selection.selectAll("g.edgeLabel");

        svgEdgeLabels.each(function(e) {
            var edge = g.edge(e),
                label = addLabel(d3.select(this), g.edge(e), 0, 0).classed("label", true),
                bbox = label.node().getBBox();

            if (edge.labelId) { label.attr("id", edge.labelId); }
            if (!_.has(edge, "width")) { edge.width = bbox.width; }
            if (!_.has(edge, "height")) { edge.height = bbox.height; }
        });

        util.applyTransition(svgEdgeLabels.exit(), g)
            .style("opacity", 0)
            .remove();

        return svgEdgeLabels;
    }

},{"./d3":7,"./label/add-label":18,"./lodash":21,"./util":27}],5:[function(require,module,exports){
    "use strict";

    var _ = require("./lodash"),
        intersectNode = require("./intersect/intersect-node"),
        util = require("./util"),
        d3 = require("./d3");
    module.exports = createEdgePaths;

    function createEdgePaths(selection, g, arrows) {
        var svgPaths = selection.selectAll("g.edgePath")
            .data(g.edges(), function(e) { return util.edgeToId(e); })
            .classed("update", true);

        enter(svgPaths, g);
        exit(svgPaths, g);

        svgPaths = selection.selectAll("g.edgePath");

        util.applyTransition(svgPaths, g)
            .style("opacity", 1);

        // Save DOM element in the path group, and set ID and class
        svgPaths.each(function(e) {
            var domEdge = d3.select(this);
            var edge = g.edge(e);
            edge.elem = this;

            if (edge.id) {
                domEdge.attr("id", edge.id);
            }

            util.applyClass(domEdge, edge["class"],
                (domEdge.classed("update") ? "update " : "") + "edgePath");
        });

        svgPaths.selectAll("path.path")
            .each(function(e) {
                var edge = g.edge(e);
                edge.arrowheadId = _.uniqueId("arrowhead");

                var domEdge = d3.select(this)
                    .attr("marker-end", function() {
                        return "url(" + makeFragmentRef(location.href, edge.arrowheadId) + ")";
                    })
                    .style("fill", "none");

                util.applyTransition(domEdge, g)
                    .attr("d", function(e) { return calcPoints(g, e); });

                util.applyStyle(domEdge, edge.style);
            });

        svgPaths.selectAll("defs *").remove();
        svgPaths.selectAll("defs")
            .each(function(e) {
                var edge = g.edge(e),
                    arrowhead = arrows[edge.arrowhead];
                arrowhead(d3.select(this), edge.arrowheadId, edge, "arrowhead");
            });

        return svgPaths;
    }

    function makeFragmentRef(url, fragmentId) {
        var baseUrl = url.split("#")[0];
        return baseUrl + "#" + fragmentId;
    }

    function calcPoints(g, e) {
        var edge = g.edge(e),
            tail = g.node(e.v),
            head = g.node(e.w),
            points = edge.points.slice(1, edge.points.length - 1);
        points.unshift(intersectNode(tail, points[0]));
        points.push(intersectNode(head, points[points.length - 1]));

        return createLine(edge, points);
    }

    function createLine(edge, points) {
        var line = d3.line()
            .x(function(d) { return d.x; })
            .y(function(d) { return d.y; });

        line.curve(edge.curve);

        return line(points);
    }

    function getCoords(elem) {
        var bbox = elem.getBBox(),
            matrix = elem.ownerSVGElement.getScreenCTM()
                .inverse()
                .multiply(elem.getScreenCTM())
                .translate(bbox.width / 2, bbox.height / 2);
        return { x: matrix.e, y: matrix.f };
    }

    function enter(svgPaths, g) {
        var svgPathsEnter = svgPaths.enter()
            .append("g")
            .attr("class", "edgePath")
            .style("opacity", 0);
        svgPathsEnter.append("path")
            .attr("class", "path")
            .attr("d", function(e) {
                var edge = g.edge(e),
                    sourceElem = g.node(e.v).elem,
                    points = _.range(edge.points.length).map(function() { return getCoords(sourceElem); });
                return createLine(edge, points);
            });
        svgPathsEnter.append("defs");
    }

    function exit(svgPaths, g) {
        var svgPathExit = svgPaths.exit();
        util.applyTransition(svgPathExit, g)
            .style("opacity", 0)
            .remove();

        util.applyTransition(svgPathExit.select("path.path"), g)
            .attr("d", function(e) {
                var source = g.node(e.v);

                if (source) {
                    var points = _.range(this.getTotalLength()).map(function() { return source; });
                    return createLine({}, points);
                } else {
                    return d3.select(this).attr("d");
                }
            });
    }

},{"./d3":7,"./intersect/intersect-node":14,"./lodash":21,"./util":27}],6:[function(require,module,exports){
    "use strict";

    var _ = require("./lodash"),
        addLabel = require("./label/add-label"),
        util = require("./util"),
        d3 = require("./d3");

    module.exports = createNodes;

    function createNodes(selection, g, shapes) {
        var simpleNodes = g.nodes().filter(function(v) { return !util.isSubgraph(g, v); });
        var svgNodes = selection.selectAll("g.node")
            .data(simpleNodes, function(v) { return v; })
            .classed("update", true);

        svgNodes.selectAll("*").remove();

        svgNodes.enter()
            .append("g")
            .attr("class", "node")
            .style("opacity", 0);

        svgNodes = selection.selectAll("g.node");

        svgNodes.each(function(v) {
            var node = g.node(v),
                thisGroup = d3.select(this);
            util.applyClass(thisGroup, node["class"],
                (thisGroup.classed("update") ? "update " : "") + "node");
            var labelGroup = thisGroup.append("g").attr("class", "label"),
                labelDom = addLabel(labelGroup, node),
                shape = shapes[node.shape],
                bbox = _.pick(labelDom.node().getBBox(), "width", "height");

            node.elem = this;

            if (node.id) { thisGroup.attr("id", node.id); }
            if (node.labelId) { labelGroup.attr("id", node.labelId); }

            if (_.has(node, "width")) { bbox.width = node.width; }
            if (_.has(node, "height")) { bbox.height = node.height; }

            bbox.width += node.paddingLeft + node.paddingRight;
            bbox.height += node.paddingTop + node.paddingBottom;
            labelGroup.attr("transform", "translate(" +
                ((node.paddingLeft - node.paddingRight) / 2) + "," +
                ((node.paddingTop - node.paddingBottom) / 2) + ")");

            var shapeSvg = shape(d3.select(this), bbox, node);
            util.applyStyle(shapeSvg, node.style);

            var shapeBBox = shapeSvg.node().getBBox();
            node.width = shapeBBox.width;
            node.height = shapeBBox.height;
        });

        util.applyTransition(svgNodes.exit(), g)
            .style("opacity", 0)
            .remove();

        return svgNodes;
    }

},{"./d3":7,"./label/add-label":18,"./lodash":21,"./util":27}],7:[function(require,module,exports){
// Stub to get D3 either via NPM or from the global object
    var d3;

    if (!d3) {
        if (require) {
            try {
                d3 = require("d3");
            }
            catch (e) {
            }
        }
    }

    if (!d3) {
        d3 = window.d3;
    }

    module.exports = d3;

},{"d3":69}],8:[function(require,module,exports){
    /* global window */

    var dagre;

    if (require) {
        try {
            dagre = require("dagre");
        } catch (e) {}
    }

    if (!dagre) {
        dagre = window.dagre;
    }

    module.exports = dagre;

},{"dagre":70}],9:[function(require,module,exports){
    /* global window */

    var graphlib;

    if (require) {
        try {
            graphlib = require("graphlib");
        } catch (e) {}
    }

    if (!graphlib) {
        graphlib = window.graphlib;
    }

    module.exports = graphlib;

},{"graphlib":100}],10:[function(require,module,exports){
    module.exports = {
        node: require("./intersect-node"),
        circle: require("./intersect-circle"),
        ellipse: require("./intersect-ellipse"),
        polygon: require("./intersect-polygon"),
        rect: require("./intersect-rect")
    };

},{"./intersect-circle":11,"./intersect-ellipse":12,"./intersect-node":14,"./intersect-polygon":15,"./intersect-rect":16}],11:[function(require,module,exports){
    var intersectEllipse = require("./intersect-ellipse");

    module.exports = intersectCircle;

    function intersectCircle(node, rx, point) {
        return intersectEllipse(node, rx, rx, point);
    }

},{"./intersect-ellipse":12}],12:[function(require,module,exports){
    module.exports = intersectEllipse;

    function intersectEllipse(node, rx, ry, point) {
        // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html

        var cx = node.x;
        var cy = node.y;

        var px = cx - point.x;
        var py = cy - point.y;

        var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);

        var dx = Math.abs(rx * ry * px / det);
        if (point.x < cx) {
            dx = -dx;
        }
        var dy = Math.abs(rx * ry * py / det);
        if (point.y < cy) {
            dy = -dy;
        }

        return {x: cx + dx, y: cy + dy};
    }


},{}],13:[function(require,module,exports){
    module.exports = intersectLine;

    /*
     * Returns the point at which two lines, p and q, intersect or returns
     * undefined if they do not intersect.
     */
    function intersectLine(p1, p2, q1, q2) {
        // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,
        // p7 and p473.

        var a1, a2, b1, b2, c1, c2;
        var r1, r2 , r3, r4;
        var denom, offset, num;
        var x, y;

        // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +
        // b1 y + c1 = 0.
        a1 = p2.y - p1.y;
        b1 = p1.x - p2.x;
        c1 = (p2.x * p1.y) - (p1.x * p2.y);

        // Compute r3 and r4.
        r3 = ((a1 * q1.x) + (b1 * q1.y) + c1);
        r4 = ((a1 * q2.x) + (b1 * q2.y) + c1);

        // Check signs of r3 and r4. If both point 3 and point 4 lie on
        // same side of line 1, the line segments do not intersect.
        if ((r3 !== 0) && (r4 !== 0) && sameSign(r3, r4)) {
            return /*DONT_INTERSECT*/;
        }

        // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0
        a2 = q2.y - q1.y;
        b2 = q1.x - q2.x;
        c2 = (q2.x * q1.y) - (q1.x * q2.y);

        // Compute r1 and r2
        r1 = (a2 * p1.x) + (b2 * p1.y) + c2;
        r2 = (a2 * p2.x) + (b2 * p2.y) + c2;

        // Check signs of r1 and r2. If both point 1 and point 2 lie
        // on same side of second line segment, the line segments do
        // not intersect.
        if ((r1 !== 0) && (r2 !== 0) && (sameSign(r1, r2))) {
            return /*DONT_INTERSECT*/;
        }

        // Line segments intersect: compute intersection point.
        denom = (a1 * b2) - (a2 * b1);
        if (denom === 0) {
            return /*COLLINEAR*/;
        }

        offset = Math.abs(denom / 2);

        // The denom/2 is to get rounding instead of truncating. It
        // is added or subtracted to the numerator, depending upon the
        // sign of the numerator.
        num = (b1 * c2) - (b2 * c1);
        x = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);

        num = (a2 * c1) - (a1 * c2);
        y = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);

        return { x: x, y: y };
    }

    function sameSign(r1, r2) {
        return r1 * r2 > 0;
    }

},{}],14:[function(require,module,exports){
    module.exports = intersectNode;

    function intersectNode(node, point) {
        return node.intersect(point);
    }

},{}],15:[function(require,module,exports){
    var intersectLine = require("./intersect-line");

    module.exports = intersectPolygon;

    /*
     * Returns the point ({x, y}) at which the point argument intersects with the
     * node argument assuming that it has the shape specified by polygon.
     */
    function intersectPolygon(node, polyPoints, point) {
        var x1 = node.x;
        var y1 = node.y;

        var intersections = [];

        var minX = Number.POSITIVE_INFINITY,
            minY = Number.POSITIVE_INFINITY;
        polyPoints.forEach(function(entry) {
            minX = Math.min(minX, entry.x);
            minY = Math.min(minY, entry.y);
        });

        var left = x1 - node.width / 2 - minX;
        var top =  y1 - node.height / 2 - minY;

        for (var i = 0; i < polyPoints.length; i++) {
            var p1 = polyPoints[i];
            var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];
            var intersect = intersectLine(node, point,
                {x: left + p1.x, y: top + p1.y}, {x: left + p2.x, y: top + p2.y});
            if (intersect) {
                intersections.push(intersect);
            }
        }

        if (!intersections.length) {
            console.log("NO INTERSECTION FOUND, RETURN NODE CENTER", node);
            return node;
        }

        if (intersections.length > 1) {
            // More intersections, find the one nearest to edge end point
            intersections.sort(function(p, q) {
                var pdx = p.x - point.x,
                    pdy = p.y - point.y,
                    distp = Math.sqrt(pdx * pdx + pdy * pdy),

                    qdx = q.x - point.x,
                    qdy = q.y - point.y,
                    distq = Math.sqrt(qdx * qdx + qdy * qdy);

                return (distp < distq) ? -1 : (distp === distq ? 0 : 1);
            });
        }
        return intersections[0];
    }

},{"./intersect-line":13}],16:[function(require,module,exports){
    module.exports = intersectRect;

    function intersectRect(node, point) {
        var x = node.x;
        var y = node.y;

        // Rectangle intersection algorithm from:
        // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes
        var dx = point.x - x;
        var dy = point.y - y;
        var w = node.width / 2;
        var h = node.height / 2;

        var sx, sy;
        if (Math.abs(dy) * w > Math.abs(dx) * h) {
            // Intersection is top or bottom of rect.
            if (dy < 0) {
                h = -h;
            }
            sx = dy === 0 ? 0 : h * dx / dy;
            sy = h;
        } else {
            // Intersection is left or right of rect.
            if (dx < 0) {
                w = -w;
            }
            sx = w;
            sy = dx === 0 ? 0 : w * dy / dx;
        }

        return {x: x + sx, y: y + sy};
    }

},{}],17:[function(require,module,exports){
    var util = require("../util");

    module.exports = addHtmlLabel;

    function addHtmlLabel(root, node) {
        var fo = root
            .append("foreignObject")
            .attr("width", "100000");

        var div = fo
            .append("xhtml:div");
        div.attr("xmlns", "http://www.w3.org/1999/xhtml");

        var label = node.label;
        switch(typeof label) {
            case "function":
                div.insert(label);
                break;
            case "object":
                // Currently we assume this is a DOM object.
                div.insert(function() { return label; });
                break;
            default: div.html(label);
        }

        util.applyStyle(div, node.labelStyle);
        div.style("display", "inline-block");
        // Fix for firefox
        div.style("white-space", "nowrap");

        var client = div.node().getBoundingClientRect();
        fo
            .attr("width", client.width)
            .attr("height", client.height);

        return fo;
    }

},{"../util":27}],18:[function(require,module,exports){
    var addTextLabel = require("./add-text-label"),
        addHtmlLabel = require("./add-html-label"),
        addSVGLabel  = require("./add-svg-label");

    module.exports = addLabel;

    function addLabel(root, node, location) {
        var label = node.label;
        var labelSvg = root.append("g");

        // Allow the label to be a string, a function that returns a DOM element, or
        // a DOM element itself.
        if (node.labelType === "svg") {
            addSVGLabel(labelSvg, node);
        } else if (typeof label !== "string" || node.labelType === "html") {
            addHtmlLabel(labelSvg, node);
        } else {
            addTextLabel(labelSvg, node);
        }

        var labelBBox = labelSvg.node().getBBox();
        var y;
        switch(location) {
            case "top":
                y = (-node.height / 2);
                break;
            case "bottom":
                y = (node.height / 2) - labelBBox.height;
                break;
            default:
                y = (-labelBBox.height / 2);
        }
        labelSvg.attr("transform",
            "translate(" + (-labelBBox.width / 2) + "," + y + ")");

        return labelSvg;
    }

},{"./add-html-label":17,"./add-svg-label":19,"./add-text-label":20}],19:[function(require,module,exports){
    var util = require("../util");

    module.exports = addSVGLabel;

    function addSVGLabel(root, node) {
        var domNode = root;

        domNode.node().appendChild(node.label);

        util.applyStyle(domNode, node.labelStyle);

        return domNode;
    }

},{"../util":27}],20:[function(require,module,exports){
    var util = require("../util");

    module.exports = addTextLabel;

    /*
     * Attaches a text label to the specified root. Handles escape sequences.
     */
    function addTextLabel(root, node) {
        var domNode = root.append("text");

        var lines = processEscapeSequences(node.label).split("\n");
        for (var i = 0; i < lines.length; i++) {
            domNode
                .append("tspan")
                .attr("xml:space", "preserve")
                .attr("dy", "1em")
                .attr("x", "1")
                .text(lines[i]);
        }

        util.applyStyle(domNode, node.labelStyle);

        return domNode;
    }

    function processEscapeSequences(text) {
        var newText = "",
            escaped = false,
            ch;
        for (var i = 0; i < text.length; ++i) {
            ch = text[i];
            if (escaped) {
                switch(ch) {
                    case "n": newText += "\n"; break;
                    default: newText += ch;
                }
                escaped = false;
            } else if (ch === "\\") {
                escaped = true;
            } else {
                newText += ch;
            }
        }
        return newText;
    }

},{"../util":27}],21:[function(require,module,exports){
    /* global window */

    var lodash;

    if (require) {
        try {
            lodash = require("lodash");
        } catch (e) {}
    }

    if (!lodash) {
        lodash = window._;
    }

    module.exports = lodash;

},{"lodash":123}],22:[function(require,module,exports){
    "use strict";

    var util = require("./util"),
        d3 = require("./d3");

    module.exports = positionClusters;

    function positionClusters(selection, g) {
        var created = selection.filter(function() { return !d3.select(this).classed("update"); });

        function translate(v) {
            var node = g.node(v);
            return "translate(" + node.x + "," + node.y + ")";
        }

        created.attr("transform", translate);

        util.applyTransition(selection, g)
            .style("opacity", 1)
            .attr("transform", translate);

        util.applyTransition(created.selectAll("rect"), g)
            .attr("width", function(v) { return g.node(v).width; })
            .attr("height", function(v) { return g.node(v).height; })
            .attr("x", function(v) {
                var node = g.node(v);
                return -node.width / 2;
            })
            .attr("y", function(v) {
                var node = g.node(v);
                return -node.height / 2;
            });

    }

},{"./d3":7,"./util":27}],23:[function(require,module,exports){
    "use strict";

    var util = require("./util"),
        d3 = require("./d3"),
        _ = require("./lodash");

    module.exports = positionEdgeLabels;

    function positionEdgeLabels(selection, g) {
        var created = selection.filter(function() { return !d3.select(this).classed("update"); });

        function translate(e) {
            var edge = g.edge(e);
            return _.has(edge, "x") ? "translate(" + edge.x + "," + edge.y + ")" : "";
        }

        created.attr("transform", translate);

        util.applyTransition(selection, g)
            .style("opacity", 1)
            .attr("transform", translate);
    }

},{"./d3":7,"./lodash":21,"./util":27}],24:[function(require,module,exports){
    "use strict";

    var util = require("./util"),
        d3 = require("./d3");

    module.exports = positionNodes;

    function positionNodes(selection, g) {
        var created = selection.filter(function() { return !d3.select(this).classed("update"); });

        function translate(v) {
            var node = g.node(v);
            return "translate(" + node.x + "," + node.y + ")";
        }

        created.attr("transform", translate);

        util.applyTransition(selection, g)
            .style("opacity", 1)
            .attr("transform", translate);
    }

},{"./d3":7,"./util":27}],25:[function(require,module,exports){
    var _ = require("./lodash"),
        d3 = require("./d3"),
        layout = require("./dagre").layout;

    module.exports = render;

// This design is based on http://bost.ocks.org/mike/chart/.
    function render() {
        var createNodes = require("./create-nodes"),
            createClusters = require("./create-clusters"),
            createEdgeLabels = require("./create-edge-labels"),
            createEdgePaths = require("./create-edge-paths"),
            positionNodes = require("./position-nodes"),
            positionEdgeLabels = require("./position-edge-labels"),
            positionClusters = require("./position-clusters"),
            shapes = require("./shapes"),
            arrows = require("./arrows");

        var fn = function(svg, g) {
            preProcessGraph(g);

            svg.selectAll("*").remove();

            var outputGroup = createOrSelectGroup(svg, "output"),
                clustersGroup = createOrSelectGroup(outputGroup, "clusters"),
                edgePathsGroup = createOrSelectGroup(outputGroup, "edgePaths"),
                edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, "edgeLabels"), g),
                nodes = createNodes(createOrSelectGroup(outputGroup, "nodes"), g, shapes);

            layout(g);

            positionNodes(nodes, g);
            positionEdgeLabels(edgeLabels, g);
            createEdgePaths(edgePathsGroup, g, arrows);

            var clusters = createClusters(clustersGroup, g);
            positionClusters(clusters, g);

            postProcessGraph(g);
        };

        fn.createNodes = function(value) {
            if (!arguments.length) return createNodes;
            createNodes = value;
            return fn;
        };

        fn.createClusters = function(value) {
            if (!arguments.length) return createClusters;
            createClusters = value;
            return fn;
        };

        fn.createEdgeLabels = function(value) {
            if (!arguments.length) return createEdgeLabels;
            createEdgeLabels = value;
            return fn;
        };

        fn.createEdgePaths = function(value) {
            if (!arguments.length) return createEdgePaths;
            createEdgePaths = value;
            return fn;
        };

        fn.shapes = function(value) {
            if (!arguments.length) return shapes;
            shapes = value;
            return fn;
        };

        fn.arrows = function(value) {
            if (!arguments.length) return arrows;
            arrows = value;
            return fn;
        };

        return fn;
    }

    var NODE_DEFAULT_ATTRS = {
        paddingLeft: 10,
        paddingRight: 10,
        paddingTop: 10,
        paddingBottom: 10,
        rx: 0,
        ry: 0,
        shape: "rect"
    };

    var EDGE_DEFAULT_ATTRS = {
        arrowhead: "normal",
        curve: d3.curveLinear
    };

    function preProcessGraph(g) {
        g.nodes().forEach(function(v) {
            var node = g.node(v);
            if (!_.has(node, "label") && !g.children(v).length) { node.label = v; }

            if (_.has(node, "paddingX")) {
                _.defaults(node, {
                    paddingLeft: node.paddingX,
                    paddingRight: node.paddingX
                });
            }

            if (_.has(node, "paddingY")) {
                _.defaults(node, {
                    paddingTop: node.paddingY,
                    paddingBottom: node.paddingY
                });
            }

            if (_.has(node, "padding")) {
                _.defaults(node, {
                    paddingLeft: node.padding,
                    paddingRight: node.padding,
                    paddingTop: node.padding,
                    paddingBottom: node.padding
                });
            }

            _.defaults(node, NODE_DEFAULT_ATTRS);

            _.each(["paddingLeft", "paddingRight", "paddingTop", "paddingBottom"], function(k) {
                node[k] = Number(node[k]);
            });

            // Save dimensions for restore during post-processing
            if (_.has(node, "width")) { node._prevWidth = node.width; }
            if (_.has(node, "height")) { node._prevHeight = node.height; }
        });

        g.edges().forEach(function(e) {
            var edge = g.edge(e);
            if (!_.has(edge, "label")) { edge.label = ""; }
            _.defaults(edge, EDGE_DEFAULT_ATTRS);
        });
    }

    function postProcessGraph(g) {
        _.each(g.nodes(), function(v) {
            var node = g.node(v);

            // Restore original dimensions
            if (_.has(node, "_prevWidth")) {
                node.width = node._prevWidth;
            } else {
                delete node.width;
            }

            if (_.has(node, "_prevHeight")) {
                node.height = node._prevHeight;
            } else {
                delete node.height;
            }

            delete node._prevWidth;
            delete node._prevHeight;
        });
    }

    function createOrSelectGroup(root, name) {
        var selection = root.select("g." + name);
        if (selection.empty()) {
            selection = root.append("g").attr("class", name);
        }
        return selection;
    }

},{"./arrows":2,"./create-clusters":3,"./create-edge-labels":4,"./create-edge-paths":5,"./create-nodes":6,"./d3":7,"./dagre":8,"./lodash":21,"./position-clusters":22,"./position-edge-labels":23,"./position-nodes":24,"./shapes":26}],26:[function(require,module,exports){
    "use strict";

    var intersectRect = require("./intersect/intersect-rect"),
        intersectEllipse = require("./intersect/intersect-ellipse"),
        intersectCircle = require("./intersect/intersect-circle"),
        intersectPolygon = require("./intersect/intersect-polygon");

    module.exports = {
        rect: rect,
        ellipse: ellipse,
        circle: circle,
        diamond: diamond
    };

    function rect(parent, bbox, node) {
        var shapeSvg = parent.insert("rect", ":first-child")
            .attr("rx", node.rx)
            .attr("ry", node.ry)
            .attr("x", -bbox.width / 2)
            .attr("y", -bbox.height / 2)
            .attr("width", bbox.width)
            .attr("height", bbox.height);

        node.intersect = function(point) {
            return intersectRect(node, point);
        };

        return shapeSvg;
    }

    function ellipse(parent, bbox, node) {
        var rx = bbox.width / 2,
            ry = bbox.height / 2,
            shapeSvg = parent.insert("ellipse", ":first-child")
                .attr("x", -bbox.width / 2)
                .attr("y", -bbox.height / 2)
                .attr("rx", rx)
                .attr("ry", ry);

        node.intersect = function(point) {
            return intersectEllipse(node, rx, ry, point);
        };

        return shapeSvg;
    }

    function circle(parent, bbox, node) {
        var r = Math.max(bbox.width, bbox.height) / 2,
            shapeSvg = parent.insert("circle", ":first-child")
                .attr("x", -bbox.width / 2)
                .attr("y", -bbox.height / 2)
                .attr("r", r);

        node.intersect = function(point) {
            return intersectCircle(node, r, point);
        };

        return shapeSvg;
    }

// Circumscribe an ellipse for the bounding box with a diamond shape. I derived
// the function to calculate the diamond shape from:
// http://mathforum.org/kb/message.jspa?messageID=3750236
    function diamond(parent, bbox, node) {
        var w = (bbox.width * Math.SQRT2) / 2,
            h = (bbox.height * Math.SQRT2) / 2,
            points = [
                { x:  0, y: -h },
                { x: -w, y:  0 },
                { x:  0, y:  h },
                { x:  w, y:  0 }
            ],
            shapeSvg = parent.insert("polygon", ":first-child")
                .attr("points", points.map(function(p) { return p.x + "," + p.y; }).join(" "));

        node.intersect = function(p) {
            return intersectPolygon(node, points, p);
        };

        return shapeSvg;
    }

},{"./intersect/intersect-circle":11,"./intersect/intersect-ellipse":12,"./intersect/intersect-polygon":15,"./intersect/intersect-rect":16}],27:[function(require,module,exports){
    var _ = require("./lodash");

// Public utility functions
    module.exports = {
        isSubgraph: isSubgraph,
        edgeToId: edgeToId,
        applyStyle: applyStyle,
        applyClass: applyClass,
        applyTransition: applyTransition
    };

    /*
     * Returns true if the specified node in the graph is a subgraph node. A
     * subgraph node is one that contains other nodes.
     */
    function isSubgraph(g, v) {
        return !!g.children(v).length;
    }

    function edgeToId(e) {
        return escapeId(e.v) + ":" + escapeId(e.w) + ":" + escapeId(e.name);
    }

    var ID_DELIM = /:/g;
    function escapeId(str) {
        return str ? String(str).replace(ID_DELIM, "\\:") : "";
    }

    function applyStyle(dom, styleFn) {
        if (styleFn) {
            dom.attr("style", styleFn);
        }
    }

    function applyClass(dom, classFn, otherClasses) {
        if (classFn) {
            dom
                .attr("class", classFn)
                .attr("class", otherClasses + " " + dom.attr("class"));
        }
    }

    function applyTransition(selection, g) {
        var graph = g.graph();

        if (_.isPlainObject(graph)) {
            var transition = graph.transition;
            if (_.isFunction(transition)) {
                return transition(selection);
            }
        }

        return selection;
    }

},{"./lodash":21}],28:[function(require,module,exports){
    module.exports = "0.6.1";

},{}],29:[function(require,module,exports){

},{}],30:[function(require,module,exports){
    arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],31:[function(require,module,exports){
    'use strict'

    exports.byteLength = byteLength
    exports.toByteArray = toByteArray
    exports.fromByteArray = fromByteArray

    var lookup = []
    var revLookup = []
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i]
        revLookup[code.charCodeAt(i)] = i
    }

    revLookup['-'.charCodeAt(0)] = 62
    revLookup['_'.charCodeAt(0)] = 63

    function placeHoldersCount (b64) {
        var len = b64.length
        if (len % 4 > 0) {
            throw new Error('Invalid string. Length must be a multiple of 4')
        }

        // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice
        return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
    }

    function byteLength (b64) {
        // base64 is 4/3 + up to two characters of the original data
        return (b64.length * 3 / 4) - placeHoldersCount(b64)
    }

    function toByteArray (b64) {
        var i, l, tmp, placeHolders, arr
        var len = b64.length
        placeHolders = placeHoldersCount(b64)

        arr = new Arr((len * 3 / 4) - placeHolders)

        // if there are placeholders, only get up to the last complete 4 chars
        l = placeHolders > 0 ? len - 4 : len

        var L = 0

        for (i = 0; i < l; i += 4) {
            tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
            arr[L++] = (tmp >> 16) & 0xFF
            arr[L++] = (tmp >> 8) & 0xFF
            arr[L++] = tmp & 0xFF
        }

        if (placeHolders === 2) {
            tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
            arr[L++] = tmp & 0xFF
        } else if (placeHolders === 1) {
            tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
            arr[L++] = (tmp >> 8) & 0xFF
            arr[L++] = tmp & 0xFF
        }

        return arr
    }

    function tripletToBase64 (num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
        var tmp
        var output = []
        for (var i = start; i < end; i += 3) {
            tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
            output.push(tripletToBase64(tmp))
        }
        return output.join('')
    }

    function fromByteArray (uint8) {
        var tmp
        var len = uint8.length
        var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
        var output = ''
        var parts = []
        var maxChunkLength = 16383 // must be multiple of 3

        // go through the array every three bytes, we'll deal with trailing stuff later
        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
            parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
        }

        // pad the end with zeros, but make sure to not forget the extra bytes
        if (extraBytes === 1) {
            tmp = uint8[len - 1]
            output += lookup[tmp >> 2]
            output += lookup[(tmp << 4) & 0x3F]
            output += '=='
        } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
            output += lookup[tmp >> 10]
            output += lookup[(tmp >> 4) & 0x3F]
            output += lookup[(tmp << 2) & 0x3F]
            output += '='
        }

        parts.push(output)

        return parts.join('')
    }

},{}],32:[function(require,module,exports){
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    /* eslint-disable no-proto */

    'use strict'

    var base64 = require('base64-js')
    var ieee754 = require('ieee754')

    exports.Buffer = Buffer
    exports.SlowBuffer = SlowBuffer
    exports.INSPECT_MAX_BYTES = 50

    var K_MAX_LENGTH = 0x7fffffff
    exports.kMaxLength = K_MAX_LENGTH

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
        console.error(
            'This browser lacks typed array (Uint8Array) support which is required by ' +
            '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
        )
    }

    function typedArraySupport () {
        // Can typed array instances can be augmented?
        try {
            var arr = new Uint8Array(1)
            arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
            return arr.foo() === 42
        } catch (e) {
            return false
        }
    }

    function createBuffer (length) {
        if (length > K_MAX_LENGTH) {
            throw new RangeError('Invalid typed array length')
        }
        // Return an augmented `Uint8Array` instance
        var buf = new Uint8Array(length)
        buf.__proto__ = Buffer.prototype
        return buf
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
        // Common case.
        if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
                throw new Error(
                    'If encoding is specified then the first argument must be a string'
                )
            }
            return allocUnsafe(arg)
        }
        return from(arg, encodingOrOffset, length)
    }

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    if (typeof Symbol !== 'undefined' && Symbol.species &&
        Buffer[Symbol.species] === Buffer) {
        Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: true,
            enumerable: false,
            writable: false
        })
    }

    Buffer.poolSize = 8192 // not used by this implementation

    function from (value, encodingOrOffset, length) {
        if (typeof value === 'number') {
            throw new TypeError('"value" argument must not be a number')
        }

        if (isArrayBuffer(value)) {
            return fromArrayBuffer(value, encodingOrOffset, length)
        }

        if (typeof value === 'string') {
            return fromString(value, encodingOrOffset)
        }

        return fromObject(value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length)
    }

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array

    function assertSize (size) {
        if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be a number')
        } else if (size < 0) {
            throw new RangeError('"size" argument must not be negative')
        }
    }

    function alloc (size, fill, encoding) {
        assertSize(size)
        if (size <= 0) {
            return createBuffer(size)
        }
        if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string'
                ? createBuffer(size).fill(fill, encoding)
                : createBuffer(size).fill(fill)
        }
        return createBuffer(size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
        return alloc(size, fill, encoding)
    }

    function allocUnsafe (size) {
        assertSize(size)
        return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
        return allocUnsafe(size)
    }
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
        return allocUnsafe(size)
    }

    function fromString (string, encoding) {
        if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8'
        }

        if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('"encoding" must be a valid string encoding')
        }

        var length = byteLength(string, encoding) | 0
        var buf = createBuffer(length)

        var actual = buf.write(string, encoding)

        if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            buf = buf.slice(0, actual)
        }

        return buf
    }

    function fromArrayLike (array) {
        var length = array.length < 0 ? 0 : checked(array.length) | 0
        var buf = createBuffer(length)
        for (var i = 0; i < length; i += 1) {
            buf[i] = array[i] & 255
        }
        return buf
    }

    function fromArrayBuffer (array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('\'offset\' is out of bounds')
        }

        if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('\'length\' is out of bounds')
        }

        var buf
        if (byteOffset === undefined && length === undefined) {
            buf = new Uint8Array(array)
        } else if (length === undefined) {
            buf = new Uint8Array(array, byteOffset)
        } else {
            buf = new Uint8Array(array, byteOffset, length)
        }

        // Return an augmented `Uint8Array` instance
        buf.__proto__ = Buffer.prototype
        return buf
    }

    function fromObject (obj) {
        if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0
            var buf = createBuffer(len)

            if (buf.length === 0) {
                return buf
            }

            obj.copy(buf, 0, 0, len)
            return buf
        }

        if (obj) {
            if (isArrayBufferView(obj) || 'length' in obj) {
                if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                    return createBuffer(0)
                }
                return fromArrayLike(obj)
            }

            if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data)
            }
        }

        throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
        // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
        // length is NaN (which is otherwise coerced to zero.)
        if (length >= K_MAX_LENGTH) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
        }
        return length | 0
    }

    function SlowBuffer (length) {
        if (+length != length) { // eslint-disable-line eqeqeq
            length = 0
        }
        return Buffer.alloc(+length)
    }

    Buffer.isBuffer = function isBuffer (b) {
        return b != null && b._isBuffer === true
    }

    Buffer.compare = function compare (a, b) {
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError('Arguments must be Buffers')
        }

        if (a === b) return 0

        var x = a.length
        var y = b.length

        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
                x = a[i]
                y = b[i]
                break
            }
        }

        if (x < y) return -1
        if (y < x) return 1
        return 0
    }

    Buffer.isEncoding = function isEncoding (encoding) {
        switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return true
            default:
                return false
        }
    }

    Buffer.concat = function concat (list, length) {
        if (!Array.isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers')
        }

        if (list.length === 0) {
            return Buffer.alloc(0)
        }

        var i
        if (length === undefined) {
            length = 0
            for (i = 0; i < list.length; ++i) {
                length += list[i].length
            }
        }

        var buffer = Buffer.allocUnsafe(length)
        var pos = 0
        for (i = 0; i < list.length; ++i) {
            var buf = list[i]
            if (!Buffer.isBuffer(buf)) {
                throw new TypeError('"list" argument must be an Array of Buffers')
            }
            buf.copy(buffer, pos)
            pos += buf.length
        }
        return buffer
    }

    function byteLength (string, encoding) {
        if (Buffer.isBuffer(string)) {
            return string.length
        }
        if (isArrayBufferView(string) || isArrayBuffer(string)) {
            return string.byteLength
        }
        if (typeof string !== 'string') {
            string = '' + string
        }

        var len = string.length
        if (len === 0) return 0

        // Use a for loop to avoid recursion
        var loweredCase = false
        for (;;) {
            switch (encoding) {
                case 'ascii':
                case 'latin1':
                case 'binary':
                    return len
                case 'utf8':
                case 'utf-8':
                case undefined:
                    return utf8ToBytes(string).length
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                    return len * 2
                case 'hex':
                    return len >>> 1
                case 'base64':
                    return base64ToBytes(string).length
                default:
                    if (loweredCase) return utf8ToBytes(string).length // assume utf8
                    encoding = ('' + encoding).toLowerCase()
                    loweredCase = true
            }
        }
    }
    Buffer.byteLength = byteLength

    function slowToString (encoding, start, end) {
        var loweredCase = false

        // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
        // property of a typed array.

        // This behaves neither like String nor Uint8Array in that we set start/end
        // to their upper/lower bounds if the value passed is out of range.
        // undefined is handled specially as per ECMA-262 6th Edition,
        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
        if (start === undefined || start < 0) {
            start = 0
        }
        // Return early if start > this.length. Done here to prevent potential uint32
        // coercion fail below.
        if (start > this.length) {
            return ''
        }

        if (end === undefined || end > this.length) {
            end = this.length
        }

        if (end <= 0) {
            return ''
        }

        // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
        end >>>= 0
        start >>>= 0

        if (end <= start) {
            return ''
        }

        if (!encoding) encoding = 'utf8'

        while (true) {
            switch (encoding) {
                case 'hex':
                    return hexSlice(this, start, end)

                case 'utf8':
                case 'utf-8':
                    return utf8Slice(this, start, end)

                case 'ascii':
                    return asciiSlice(this, start, end)

                case 'latin1':
                case 'binary':
                    return latin1Slice(this, start, end)

                case 'base64':
                    return base64Slice(this, start, end)

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                    return utf16leSlice(this, start, end)

                default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                    encoding = (encoding + '').toLowerCase()
                    loweredCase = true
            }
        }
    }

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true

    function swap (b, n, m) {
        var i = b[n]
        b[n] = b[m]
        b[m] = i
    }

    Buffer.prototype.swap16 = function swap16 () {
        var len = this.length
        if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits')
        }
        for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1)
        }
        return this
    }

    Buffer.prototype.swap32 = function swap32 () {
        var len = this.length
        if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits')
        }
        for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3)
            swap(this, i + 1, i + 2)
        }
        return this
    }

    Buffer.prototype.swap64 = function swap64 () {
        var len = this.length
        if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits')
        }
        for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7)
            swap(this, i + 1, i + 6)
            swap(this, i + 2, i + 5)
            swap(this, i + 3, i + 4)
        }
        return this
    }

    Buffer.prototype.toString = function toString () {
        var length = this.length
        if (length === 0) return ''
        if (arguments.length === 0) return utf8Slice(this, 0, length)
        return slowToString.apply(this, arguments)
    }

    Buffer.prototype.equals = function equals (b) {
        if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
        if (this === b) return true
        return Buffer.compare(this, b) === 0
    }

    Buffer.prototype.inspect = function inspect () {
        var str = ''
        var max = exports.INSPECT_MAX_BYTES
        if (this.length > 0) {
            str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
            if (this.length > max) str += ' ... '
        }
        return '<Buffer ' + str + '>'
    }

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
        if (!Buffer.isBuffer(target)) {
            throw new TypeError('Argument must be a Buffer')
        }

        if (start === undefined) {
            start = 0
        }
        if (end === undefined) {
            end = target ? target.length : 0
        }
        if (thisStart === undefined) {
            thisStart = 0
        }
        if (thisEnd === undefined) {
            thisEnd = this.length
        }

        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index')
        }

        if (thisStart >= thisEnd && start >= end) {
            return 0
        }
        if (thisStart >= thisEnd) {
            return -1
        }
        if (start >= end) {
            return 1
        }

        start >>>= 0
        end >>>= 0
        thisStart >>>= 0
        thisEnd >>>= 0

        if (this === target) return 0

        var x = thisEnd - thisStart
        var y = end - start
        var len = Math.min(x, y)

        var thisCopy = this.slice(thisStart, thisEnd)
        var targetCopy = target.slice(start, end)

        for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i]
                y = targetCopy[i]
                break
            }
        }

        if (x < y) return -1
        if (y < x) return 1
        return 0
    }

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
        // Empty buffer means no match
        if (buffer.length === 0) return -1

        // Normalize byteOffset
        if (typeof byteOffset === 'string') {
            encoding = byteOffset
            byteOffset = 0
        } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff
        } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000
        }
        byteOffset = +byteOffset  // Coerce to Number.
        if (numberIsNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : (buffer.length - 1)
        }

        // Normalize byteOffset: negative offsets start from the end of the buffer
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset
        if (byteOffset >= buffer.length) {
            if (dir) return -1
            else byteOffset = buffer.length - 1
        } else if (byteOffset < 0) {
            if (dir) byteOffset = 0
            else return -1
        }

        // Normalize val
        if (typeof val === 'string') {
            val = Buffer.from(val, encoding)
        }

        // Finally, search either indexOf (if dir is true) or lastIndexOf
        if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
                return -1
            }
            return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
        } else if (typeof val === 'number') {
            val = val & 0xFF // Search for a byte value [0-255]
            if (typeof Uint8Array.prototype.indexOf === 'function') {
                if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                }
            }
            return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
        }

        throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
        var indexSize = 1
        var arrLength = arr.length
        var valLength = val.length

        if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase()
            if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                encoding === 'utf16le' || encoding === 'utf-16le') {
                if (arr.length < 2 || val.length < 2) {
                    return -1
                }
                indexSize = 2
                arrLength /= 2
                valLength /= 2
                byteOffset /= 2
            }
        }

        function read (buf, i) {
            if (indexSize === 1) {
                return buf[i]
            } else {
                return buf.readUInt16BE(i * indexSize)
            }
        }

        var i
        if (dir) {
            var foundIndex = -1
            for (i = byteOffset; i < arrLength; i++) {
                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i
                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                } else {
                    if (foundIndex !== -1) i -= i - foundIndex
                    foundIndex = -1
                }
            }
        } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
            for (i = byteOffset; i >= 0; i--) {
                var found = true
                for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                        found = false
                        break
                    }
                }
                if (found) return i
            }
        }

        return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1
    }

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    }

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    }

    function hexWrite (buf, string, offset, length) {
        offset = Number(offset) || 0
        var remaining = buf.length - offset
        if (!length) {
            length = remaining
        } else {
            length = Number(length)
            if (length > remaining) {
                length = remaining
            }
        }

        // must be an even number of digits
        var strLen = string.length
        if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

        if (length > strLen / 2) {
            length = strLen / 2
        }
        for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16)
            if (numberIsNaN(parsed)) return i
            buf[offset + i] = parsed
        }
        return i
    }

    function utf8Write (buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
        // Buffer#write(string)
        if (offset === undefined) {
            encoding = 'utf8'
            length = this.length
            offset = 0
            // Buffer#write(string, encoding)
        } else if (length === undefined && typeof offset === 'string') {
            encoding = offset
            length = this.length
            offset = 0
            // Buffer#write(string, offset[, length][, encoding])
        } else if (isFinite(offset)) {
            offset = offset >>> 0
            if (isFinite(length)) {
                length = length >>> 0
                if (encoding === undefined) encoding = 'utf8'
            } else {
                encoding = length
                length = undefined
            }
        } else {
            throw new Error(
                'Buffer.write(string, encoding, offset[, length]) is no longer supported'
            )
        }

        var remaining = this.length - offset
        if (length === undefined || length > remaining) length = remaining

        if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds')
        }

        if (!encoding) encoding = 'utf8'

        var loweredCase = false
        for (;;) {
            switch (encoding) {
                case 'hex':
                    return hexWrite(this, string, offset, length)

                case 'utf8':
                case 'utf-8':
                    return utf8Write(this, string, offset, length)

                case 'ascii':
                    return asciiWrite(this, string, offset, length)

                case 'latin1':
                case 'binary':
                    return latin1Write(this, string, offset, length)

                case 'base64':
                    // Warning: maxLength not taken into account in base64Write
                    return base64Write(this, string, offset, length)

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                    return ucs2Write(this, string, offset, length)

                default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                    encoding = ('' + encoding).toLowerCase()
                    loweredCase = true
            }
        }
    }

    Buffer.prototype.toJSON = function toJSON () {
        return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
        }
    }

    function base64Slice (buf, start, end) {
        if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf)
        } else {
            return base64.fromByteArray(buf.slice(start, end))
        }
    }

    function utf8Slice (buf, start, end) {
        end = Math.min(buf.length, end)
        var res = []

        var i = start
        while (i < end) {
            var firstByte = buf[i]
            var codePoint = null
            var bytesPerSequence = (firstByte > 0xEF) ? 4
                : (firstByte > 0xDF) ? 3
                    : (firstByte > 0xBF) ? 2
                        : 1

            if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint

                switch (bytesPerSequence) {
                    case 1:
                        if (firstByte < 0x80) {
                            codePoint = firstByte
                        }
                        break
                    case 2:
                        secondByte = buf[i + 1]
                        if ((secondByte & 0xC0) === 0x80) {
                            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                            if (tempCodePoint > 0x7F) {
                                codePoint = tempCodePoint
                            }
                        }
                        break
                    case 3:
                        secondByte = buf[i + 1]
                        thirdByte = buf[i + 2]
                        if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                codePoint = tempCodePoint
                            }
                        }
                        break
                    case 4:
                        secondByte = buf[i + 1]
                        thirdByte = buf[i + 2]
                        fourthByte = buf[i + 3]
                        if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                codePoint = tempCodePoint
                            }
                        }
                }
            }

            if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xFFFD
                bytesPerSequence = 1
            } else if (codePoint > 0xFFFF) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000
                res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                codePoint = 0xDC00 | codePoint & 0x3FF
            }

            res.push(codePoint)
            i += bytesPerSequence
        }

        return decodeCodePointsArray(res)
    }

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000

    function decodeCodePointsArray (codePoints) {
        var len = codePoints.length
        if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
        }

        // Decode in chunks to avoid "call stack size exceeded".
        var res = ''
        var i = 0
        while (i < len) {
            res += String.fromCharCode.apply(
                String,
                codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
            )
        }
        return res
    }

    function asciiSlice (buf, start, end) {
        var ret = ''
        end = Math.min(buf.length, end)

        for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F)
        }
        return ret
    }

    function latin1Slice (buf, start, end) {
        var ret = ''
        end = Math.min(buf.length, end)

        for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i])
        }
        return ret
    }

    function hexSlice (buf, start, end) {
        var len = buf.length

        if (!start || start < 0) start = 0
        if (!end || end < 0 || end > len) end = len

        var out = ''
        for (var i = start; i < end; ++i) {
            out += toHex(buf[i])
        }
        return out
    }

    function utf16leSlice (buf, start, end) {
        var bytes = buf.slice(start, end)
        var res = ''
        for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
        }
        return res
    }

    Buffer.prototype.slice = function slice (start, end) {
        var len = this.length
        start = ~~start
        end = end === undefined ? len : ~~end

        if (start < 0) {
            start += len
            if (start < 0) start = 0
        } else if (start > len) {
            start = len
        }

        if (end < 0) {
            end += len
            if (end < 0) end = 0
        } else if (end > len) {
            end = len
        }

        if (end < start) end = start

        var newBuf = this.subarray(start, end)
        // Return an augmented `Uint8Array` instance
        newBuf.__proto__ = Buffer.prototype
        return newBuf
    }

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
        if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
        if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
        offset = offset >>> 0
        byteLength = byteLength >>> 0
        if (!noAssert) checkOffset(offset, byteLength, this.length)

        var val = this[offset]
        var mul = 1
        var i = 0
        while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul
        }

        return val
    }

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
        offset = offset >>> 0
        byteLength = byteLength >>> 0
        if (!noAssert) {
            checkOffset(offset, byteLength, this.length)
        }

        var val = this[offset + --byteLength]
        var mul = 1
        while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul
        }

        return val
    }

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 1, this.length)
        return this[offset]
    }

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 2, this.length)
        return this[offset] | (this[offset + 1] << 8)
    }

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 2, this.length)
        return (this[offset] << 8) | this[offset + 1]
    }

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 4, this.length)

        return ((this[offset]) |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16)) +
            (this[offset + 3] * 0x1000000)
    }

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 4, this.length)

        return (this[offset] * 0x1000000) +
            ((this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            this[offset + 3])
    }

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
        offset = offset >>> 0
        byteLength = byteLength >>> 0
        if (!noAssert) checkOffset(offset, byteLength, this.length)

        var val = this[offset]
        var mul = 1
        var i = 0
        while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul
        }
        mul *= 0x80

        if (val >= mul) val -= Math.pow(2, 8 * byteLength)

        return val
    }

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
        offset = offset >>> 0
        byteLength = byteLength >>> 0
        if (!noAssert) checkOffset(offset, byteLength, this.length)

        var i = byteLength
        var mul = 1
        var val = this[offset + --i]
        while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul
        }
        mul *= 0x80

        if (val >= mul) val -= Math.pow(2, 8 * byteLength)

        return val
    }

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 1, this.length)
        if (!(this[offset] & 0x80)) return (this[offset])
        return ((0xff - this[offset] + 1) * -1)
    }

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 2, this.length)
        var val = this[offset] | (this[offset + 1] << 8)
        return (val & 0x8000) ? val | 0xFFFF0000 : val
    }

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 2, this.length)
        var val = this[offset + 1] | (this[offset] << 8)
        return (val & 0x8000) ? val | 0xFFFF0000 : val
    }

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 4, this.length)

        return (this[offset]) |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16) |
            (this[offset + 3] << 24)
    }

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 4, this.length)

        return (this[offset] << 24) |
            (this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            (this[offset + 3])
    }

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 4, this.length)
        return ieee754.read(this, offset, true, 23, 4)
    }

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 4, this.length)
        return ieee754.read(this, offset, false, 23, 4)
    }

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 8, this.length)
        return ieee754.read(this, offset, true, 52, 8)
    }

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
        offset = offset >>> 0
        if (!noAssert) checkOffset(offset, 8, this.length)
        return ieee754.read(this, offset, false, 52, 8)
    }

    function checkInt (buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
        if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
        value = +value
        offset = offset >>> 0
        byteLength = byteLength >>> 0
        if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1
            checkInt(this, value, offset, byteLength, maxBytes, 0)
        }

        var mul = 1
        var i = 0
        this[offset] = value & 0xFF
        while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xFF
        }

        return offset + byteLength
    }

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
        value = +value
        offset = offset >>> 0
        byteLength = byteLength >>> 0
        if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1
            checkInt(this, value, offset, byteLength, maxBytes, 0)
        }

        var i = byteLength - 1
        var mul = 1
        this[offset + i] = value & 0xFF
        while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xFF
        }

        return offset + byteLength
    }

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
        this[offset] = (value & 0xff)
        return offset + 1
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
        this[offset] = (value & 0xff)
        this[offset + 1] = (value >>> 8)
        return offset + 2
    }

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
        this[offset] = (value >>> 8)
        this[offset + 1] = (value & 0xff)
        return offset + 2
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
        this[offset + 3] = (value >>> 24)
        this[offset + 2] = (value >>> 16)
        this[offset + 1] = (value >>> 8)
        this[offset] = (value & 0xff)
        return offset + 4
    }

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
        this[offset] = (value >>> 24)
        this[offset + 1] = (value >>> 16)
        this[offset + 2] = (value >>> 8)
        this[offset + 3] = (value & 0xff)
        return offset + 4
    }

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) {
            var limit = Math.pow(2, (8 * byteLength) - 1)

            checkInt(this, value, offset, byteLength, limit - 1, -limit)
        }

        var i = 0
        var mul = 1
        var sub = 0
        this[offset] = value & 0xFF
        while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1
            }
            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
        }

        return offset + byteLength
    }

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) {
            var limit = Math.pow(2, (8 * byteLength) - 1)

            checkInt(this, value, offset, byteLength, limit - 1, -limit)
        }

        var i = byteLength - 1
        var mul = 1
        var sub = 0
        this[offset + i] = value & 0xFF
        while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1
            }
            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
        }

        return offset + byteLength
    }

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
        if (value < 0) value = 0xff + value + 1
        this[offset] = (value & 0xff)
        return offset + 1
    }

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
        this[offset] = (value & 0xff)
        this[offset + 1] = (value >>> 8)
        return offset + 2
    }

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
        this[offset] = (value >>> 8)
        this[offset + 1] = (value & 0xff)
        return offset + 2
    }

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
        this[offset] = (value & 0xff)
        this[offset + 1] = (value >>> 8)
        this[offset + 2] = (value >>> 16)
        this[offset + 3] = (value >>> 24)
        return offset + 4
    }

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
        if (value < 0) value = 0xffffffff + value + 1
        this[offset] = (value >>> 24)
        this[offset + 1] = (value >>> 16)
        this[offset + 2] = (value >>> 8)
        this[offset + 3] = (value & 0xff)
        return offset + 4
    }

    function checkIEEE754 (buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError('Index out of range')
        if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4)
        return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert)
    }

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert)
    }

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
        value = +value
        offset = offset >>> 0
        if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8)
        return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert)
    }

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert)
    }

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
        if (!start) start = 0
        if (!end && end !== 0) end = this.length
        if (targetStart >= target.length) targetStart = target.length
        if (!targetStart) targetStart = 0
        if (end > 0 && end < start) end = start

        // Copy 0 bytes; we're done
        if (end === start) return 0
        if (target.length === 0 || this.length === 0) return 0

        // Fatal error conditions
        if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds')
        }
        if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
        if (end < 0) throw new RangeError('sourceEnd out of bounds')

        // Are we oob?
        if (end > this.length) end = this.length
        if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start
        }

        var len = end - start
        var i

        if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (i = len - 1; i >= 0; --i) {
                target[i + targetStart] = this[i + start]
            }
        } else if (len < 1000) {
            // ascending copy from start
            for (i = 0; i < len; ++i) {
                target[i + targetStart] = this[i + start]
            }
        } else {
            Uint8Array.prototype.set.call(
                target,
                this.subarray(start, start + len),
                targetStart
            )
        }

        return len
    }

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
        // Handle string cases:
        if (typeof val === 'string') {
            if (typeof start === 'string') {
                encoding = start
                start = 0
                end = this.length
            } else if (typeof end === 'string') {
                encoding = end
                end = this.length
            }
            if (val.length === 1) {
                var code = val.charCodeAt(0)
                if (code < 256) {
                    val = code
                }
            }
            if (encoding !== undefined && typeof encoding !== 'string') {
                throw new TypeError('encoding must be a string')
            }
            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                throw new TypeError('Unknown encoding: ' + encoding)
            }
        } else if (typeof val === 'number') {
            val = val & 255
        }

        // Invalid ranges are not set to a default, so can range check early.
        if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index')
        }

        if (end <= start) {
            return this
        }

        start = start >>> 0
        end = end === undefined ? this.length : end >>> 0

        if (!val) val = 0

        var i
        if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
                this[i] = val
            }
        } else {
            var bytes = Buffer.isBuffer(val)
                ? val
                : new Buffer(val, encoding)
            var len = bytes.length
            for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len]
            }
        }

        return this
    }

// HELPER FUNCTIONS
// ================

    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

    function base64clean (str) {
        // Node strips out invalid characters like \n and \t from the string, base64-js does not
        str = str.trim().replace(INVALID_BASE64_RE, '')
        // Node converts strings with length < 2 to ''
        if (str.length < 2) return ''
        // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
        while (str.length % 4 !== 0) {
            str = str + '='
        }
        return str
    }

    function toHex (n) {
        if (n < 16) return '0' + n.toString(16)
        return n.toString(16)
    }

    function utf8ToBytes (string, units) {
        units = units || Infinity
        var codePoint
        var length = string.length
        var leadSurrogate = null
        var bytes = []

        for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i)

            // is surrogate component
            if (codePoint > 0xD7FF && codePoint < 0xE000) {
                // last char was a lead
                if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 0xDBFF) {
                        // unexpected trail
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                        continue
                    } else if (i + 1 === length) {
                        // unpaired lead
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                        continue
                    }

                    // valid lead
                    leadSurrogate = codePoint

                    continue
                }

                // 2 leads in a row
                if (codePoint < 0xDC00) {
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    leadSurrogate = codePoint
                    continue
                }

                // valid surrogate pair
                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
            } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            }

            leadSurrogate = null

            // encode utf8
            if (codePoint < 0x80) {
                if ((units -= 1) < 0) break
                bytes.push(codePoint)
            } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break
                bytes.push(
                    codePoint >> 0x6 | 0xC0,
                    codePoint & 0x3F | 0x80
                )
            } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break
                bytes.push(
                    codePoint >> 0xC | 0xE0,
                    codePoint >> 0x6 & 0x3F | 0x80,
                    codePoint & 0x3F | 0x80
                )
            } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break
                bytes.push(
                    codePoint >> 0x12 | 0xF0,
                    codePoint >> 0xC & 0x3F | 0x80,
                    codePoint >> 0x6 & 0x3F | 0x80,
                    codePoint & 0x3F | 0x80
                )
            } else {
                throw new Error('Invalid code point')
            }
        }

        return bytes
    }

    function asciiToBytes (str) {
        var byteArray = []
        for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF)
        }
        return byteArray
    }

    function utf16leToBytes (str, units) {
        var c, hi, lo
        var byteArray = []
        for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break

            c = str.charCodeAt(i)
            hi = c >> 8
            lo = c % 256
            byteArray.push(lo)
            byteArray.push(hi)
        }

        return byteArray
    }

    function base64ToBytes (str) {
        return base64.toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
            if ((i + offset >= dst.length) || (i >= src.length)) break
            dst[i + offset] = src[i]
        }
        return i
    }

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
    function isArrayBuffer (obj) {
        return obj instanceof ArrayBuffer ||
            (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
            typeof obj.byteLength === 'number')
    }

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
    function isArrayBufferView (obj) {
        return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
    }

    function numberIsNaN (obj) {
        return obj !== obj // eslint-disable-line no-self-compare
    }

},{"base64-js":31,"ieee754":120}],33:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

    function EventEmitter() {
        this._events = this._events || {};
        this._maxListeners = this._maxListeners || undefined;
    }
    module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function(n) {
        if (!isNumber(n) || n < 0 || isNaN(n))
            throw TypeError('n must be a positive number');
        this._maxListeners = n;
        return this;
    };

    EventEmitter.prototype.emit = function(type) {
        var er, handler, len, args, i, listeners;

        if (!this._events)
            this._events = {};

        // If there is no 'error' event listener then throw.
        if (type === 'error') {
            if (!this._events.error ||
                (isObject(this._events.error) && !this._events.error.length)) {
                er = arguments[1];
                if (er instanceof Error) {
                    throw er; // Unhandled 'error' event
                } else {
                    // At least give some kind of context to the user
                    var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                    err.context = er;
                    throw err;
                }
            }
        }

        handler = this._events[type];

        if (isUndefined(handler))
            return false;

        if (isFunction(handler)) {
            switch (arguments.length) {
                // fast cases
                case 1:
                    handler.call(this);
                    break;
                case 2:
                    handler.call(this, arguments[1]);
                    break;
                case 3:
                    handler.call(this, arguments[1], arguments[2]);
                    break;
                // slower
                default:
                    args = Array.prototype.slice.call(arguments, 1);
                    handler.apply(this, args);
            }
        } else if (isObject(handler)) {
            args = Array.prototype.slice.call(arguments, 1);
            listeners = handler.slice();
            len = listeners.length;
            for (i = 0; i < len; i++)
                listeners[i].apply(this, args);
        }

        return true;
    };

    EventEmitter.prototype.addListener = function(type, listener) {
        var m;

        if (!isFunction(listener))
            throw TypeError('listener must be a function');

        if (!this._events)
            this._events = {};

        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (this._events.newListener)
            this.emit('newListener', type,
                isFunction(listener.listener) ?
                    listener.listener : listener);

        if (!this._events[type])
        // Optimize the case of one listener. Don't need the extra array object.
            this._events[type] = listener;
        else if (isObject(this._events[type]))
        // If we've already got an array, just append.
            this._events[type].push(listener);
        else
        // Adding the second element, need to change to array.
            this._events[type] = [this._events[type], listener];

        // Check for listener leak
        if (isObject(this._events[type]) && !this._events[type].warned) {
            if (!isUndefined(this._maxListeners)) {
                m = this._maxListeners;
            } else {
                m = EventEmitter.defaultMaxListeners;
            }

            if (m && m > 0 && this._events[type].length > m) {
                this._events[type].warned = true;
                console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
                if (typeof console.trace === 'function') {
                    // not supported in IE 10
                    console.trace();
                }
            }
        }

        return this;
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.once = function(type, listener) {
        if (!isFunction(listener))
            throw TypeError('listener must be a function');

        var fired = false;

        function g() {
            this.removeListener(type, g);

            if (!fired) {
                fired = true;
                listener.apply(this, arguments);
            }
        }

        g.listener = listener;
        this.on(type, g);

        return this;
    };

// emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener = function(type, listener) {
        var list, position, length, i;

        if (!isFunction(listener))
            throw TypeError('listener must be a function');

        if (!this._events || !this._events[type])
            return this;

        list = this._events[type];
        length = list.length;
        position = -1;

        if (list === listener ||
            (isFunction(list.listener) && list.listener === listener)) {
            delete this._events[type];
            if (this._events.removeListener)
                this.emit('removeListener', type, listener);

        } else if (isObject(list)) {
            for (i = length; i-- > 0;) {
                if (list[i] === listener ||
                    (list[i].listener && list[i].listener === listener)) {
                    position = i;
                    break;
                }
            }

            if (position < 0)
                return this;

            if (list.length === 1) {
                list.length = 0;
                delete this._events[type];
            } else {
                list.splice(position, 1);
            }

            if (this._events.removeListener)
                this.emit('removeListener', type, listener);
        }

        return this;
    };

    EventEmitter.prototype.removeAllListeners = function(type) {
        var key, listeners;

        if (!this._events)
            return this;

        // not listening for removeListener, no need to emit
        if (!this._events.removeListener) {
            if (arguments.length === 0)
                this._events = {};
            else if (this._events[type])
                delete this._events[type];
            return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
            for (key in this._events) {
                if (key === 'removeListener') continue;
                this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = {};
            return this;
        }

        listeners = this._events[type];

        if (isFunction(listeners)) {
            this.removeListener(type, listeners);
        } else if (listeners) {
            // LIFO order
            while (listeners.length)
                this.removeListener(type, listeners[listeners.length - 1]);
        }
        delete this._events[type];

        return this;
    };

    EventEmitter.prototype.listeners = function(type) {
        var ret;
        if (!this._events || !this._events[type])
            ret = [];
        else if (isFunction(this._events[type]))
            ret = [this._events[type]];
        else
            ret = this._events[type].slice();
        return ret;
    };

    EventEmitter.prototype.listenerCount = function(type) {
        if (this._events) {
            var evlistener = this._events[type];

            if (isFunction(evlistener))
                return 1;
            else if (evlistener)
                return evlistener.length;
        }
        return 0;
    };

    EventEmitter.listenerCount = function(emitter, type) {
        return emitter.listenerCount(type);
    };

    function isFunction(arg) {
        return typeof arg === 'function';
    }

    function isNumber(arg) {
        return typeof arg === 'number';
    }

    function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
    }

    function isUndefined(arg) {
        return arg === void 0;
    }

},{}],34:[function(require,module,exports){
    var http = require('http')
    var url = require('url')

    var https = module.exports

    for (var key in http) {
        if (http.hasOwnProperty(key)) https[key] = http[key]
    }

    https.request = function (params, cb) {
        params = validateParams(params)
        return http.request.call(this, params, cb)
    }

    https.get = function (params, cb) {
        params = validateParams(params)
        return http.get.call(this, params, cb)
    }

    function validateParams (params) {
        if (typeof params === 'string') {
            params = url.parse(params)
        }
        if (!params.protocol) {
            params.protocol = 'https:'
        }
        if (params.protocol !== 'https:') {
            throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
        }
        return params
    }

},{"http":131,"url":35}],35:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

    'use strict';

    var punycode = require('punycode');
    var util = require('./util');

    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;

    exports.Url = Url;

    function Url() {
        this.protocol = null;
        this.slashes = null;
        this.auth = null;
        this.host = null;
        this.port = null;
        this.hostname = null;
        this.hash = null;
        this.search = null;
        this.query = null;
        this.pathname = null;
        this.path = null;
        this.href = null;
    }

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
    var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,

        // Special case for a simple path URL
        simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

        // RFC 2396: characters reserved for delimiting URLs.
        // We actually just auto-escape these.
        delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

        // RFC 2396: characters not allowed for various reasons.
        unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
        autoEscape = ['\''].concat(unwise),
        // Characters that are never ever allowed in a hostname.
        // Note that any invalid chars are also handled, but these
        // are the ones that are *expected* to be seen, so we fast-path
        // them.
        nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
        hostEndingChars = ['/', '?', '#'],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.
        unsafeProtocol = {
            'javascript': true,
            'javascript:': true
        },
        // protocols that never have a hostname.
        hostlessProtocol = {
            'javascript': true,
            'javascript:': true
        },
        // protocols that always contain a // bit.
        slashedProtocol = {
            'http': true,
            'https': true,
            'ftp': true,
            'gopher': true,
            'file': true,
            'http:': true,
            'https:': true,
            'ftp:': true,
            'gopher:': true,
            'file:': true
        },
        querystring = require('querystring');

    function urlParse(url, parseQueryString, slashesDenoteHost) {
        if (url && util.isObject(url) && url instanceof Url) return url;

        var u = new Url;
        u.parse(url, parseQueryString, slashesDenoteHost);
        return u;
    }

    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
        if (!util.isString(url)) {
            throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
        }

        // Copy chrome, IE, opera backslash-handling behavior.
        // Back slashes before the query string get converted to forward slashes
        // See: https://code.google.com/p/chromium/issues/detail?id=25916
        var queryIndex = url.indexOf('?'),
            splitter =
                (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
            uSplit = url.split(splitter),
            slashRegex = /\\/g;
        uSplit[0] = uSplit[0].replace(slashRegex, '/');
        url = uSplit.join(splitter);

        var rest = url;

        // trim before proceeding.
        // This is to support parse stuff like "  http://foo.com  \n"
        rest = rest.trim();

        if (!slashesDenoteHost && url.split('#').length === 1) {
            // Try fast path regexp
            var simplePath = simplePathPattern.exec(rest);
            if (simplePath) {
                this.path = rest;
                this.href = rest;
                this.pathname = simplePath[1];
                if (simplePath[2]) {
                    this.search = simplePath[2];
                    if (parseQueryString) {
                        this.query = querystring.parse(this.search.substr(1));
                    } else {
                        this.query = this.search.substr(1);
                    }
                } else if (parseQueryString) {
                    this.search = '';
                    this.query = {};
                }
                return this;
            }
        }

        var proto = protocolPattern.exec(rest);
        if (proto) {
            proto = proto[0];
            var lowerProto = proto.toLowerCase();
            this.protocol = lowerProto;
            rest = rest.substr(proto.length);
        }

        // figure out if it's got a host
        // user@server is *always* interpreted as a hostname, and url
        // resolution will treat //foo/bar as host=foo,path=bar because that's
        // how the browser resolves relative URLs.
        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var slashes = rest.substr(0, 2) === '//';
            if (slashes && !(proto && hostlessProtocol[proto])) {
                rest = rest.substr(2);
                this.slashes = true;
            }
        }

        if (!hostlessProtocol[proto] &&
            (slashes || (proto && !slashedProtocol[proto]))) {

            // there's a hostname.
            // the first instance of /, ?, ;, or # ends the host.
            //
            // If there is an @ in the hostname, then non-host chars *are* allowed
            // to the left of the last @ sign, unless some host-ending character
            // comes *before* the @-sign.
            // URLs are obnoxious.
            //
            // ex:
            // http://a@b@c/ => user:a@b host:c
            // http://a@b?@c => user:a host:c path:/?@c

            // v0.12 TODO(isaacs): This is not quite how Chrome does things.
            // Review our test case against browsers more comprehensively.

            // find the first instance of any hostEndingChars
            var hostEnd = -1;
            for (var i = 0; i < hostEndingChars.length; i++) {
                var hec = rest.indexOf(hostEndingChars[i]);
                if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                    hostEnd = hec;
            }

            // at this point, either we have an explicit point where the
            // auth portion cannot go past, or the last @ char is the decider.
            var auth, atSign;
            if (hostEnd === -1) {
                // atSign can be anywhere.
                atSign = rest.lastIndexOf('@');
            } else {
                // atSign must be in auth portion.
                // http://a@b/c@d => host:b auth:a path:/c@d
                atSign = rest.lastIndexOf('@', hostEnd);
            }

            // Now we have a portion which is definitely the auth.
            // Pull that off.
            if (atSign !== -1) {
                auth = rest.slice(0, atSign);
                rest = rest.slice(atSign + 1);
                this.auth = decodeURIComponent(auth);
            }

            // the host is the remaining to the left of the first non-host char
            hostEnd = -1;
            for (var i = 0; i < nonHostChars.length; i++) {
                var hec = rest.indexOf(nonHostChars[i]);
                if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                    hostEnd = hec;
            }
            // if we still have not hit it, then the entire thing is a host.
            if (hostEnd === -1)
                hostEnd = rest.length;

            this.host = rest.slice(0, hostEnd);
            rest = rest.slice(hostEnd);

            // pull out port.
            this.parseHost();

            // we've indicated that there is a hostname,
            // so even if it's empty, it has to be present.
            this.hostname = this.hostname || '';

            // if hostname begins with [ and ends with ]
            // assume that it's an IPv6 address.
            var ipv6Hostname = this.hostname[0] === '[' &&
                this.hostname[this.hostname.length - 1] === ']';

            // validate a little.
            if (!ipv6Hostname) {
                var hostparts = this.hostname.split(/\./);
                for (var i = 0, l = hostparts.length; i < l; i++) {
                    var part = hostparts[i];
                    if (!part) continue;
                    if (!part.match(hostnamePartPattern)) {
                        var newpart = '';
                        for (var j = 0, k = part.length; j < k; j++) {
                            if (part.charCodeAt(j) > 127) {
                                // we replace non-ASCII char with a temporary placeholder
                                // we need this to make sure size of hostname is not
                                // broken by replacing non-ASCII by nothing
                                newpart += 'x';
                            } else {
                                newpart += part[j];
                            }
                        }
                        // we test again with ASCII char only
                        if (!newpart.match(hostnamePartPattern)) {
                            var validParts = hostparts.slice(0, i);
                            var notHost = hostparts.slice(i + 1);
                            var bit = part.match(hostnamePartStart);
                            if (bit) {
                                validParts.push(bit[1]);
                                notHost.unshift(bit[2]);
                            }
                            if (notHost.length) {
                                rest = '/' + notHost.join('.') + rest;
                            }
                            this.hostname = validParts.join('.');
                            break;
                        }
                    }
                }
            }

            if (this.hostname.length > hostnameMaxLen) {
                this.hostname = '';
            } else {
                // hostnames are always lower case.
                this.hostname = this.hostname.toLowerCase();
            }

            if (!ipv6Hostname) {
                // IDNA Support: Returns a punycoded representation of "domain".
                // It only converts parts of the domain name that
                // have non-ASCII characters, i.e. it doesn't matter if
                // you call it with a domain that already is ASCII-only.
                this.hostname = punycode.toASCII(this.hostname);
            }

            var p = this.port ? ':' + this.port : '';
            var h = this.hostname || '';
            this.host = h + p;
            this.href += this.host;

            // strip [ and ] from the hostname
            // the host field still retains them, though
            if (ipv6Hostname) {
                this.hostname = this.hostname.substr(1, this.hostname.length - 2);
                if (rest[0] !== '/') {
                    rest = '/' + rest;
                }
            }
        }

        // now rest is set to the post-host stuff.
        // chop off any delim chars.
        if (!unsafeProtocol[lowerProto]) {

            // First, make 100% sure that any "autoEscape" chars get
            // escaped, even if encodeURIComponent doesn't think they
            // need to be.
            for (var i = 0, l = autoEscape.length; i < l; i++) {
                var ae = autoEscape[i];
                if (rest.indexOf(ae) === -1)
                    continue;
                var esc = encodeURIComponent(ae);
                if (esc === ae) {
                    esc = escape(ae);
                }
                rest = rest.split(ae).join(esc);
            }
        }


        // chop off from the tail first.
        var hash = rest.indexOf('#');
        if (hash !== -1) {
            // got a fragment string.
            this.hash = rest.substr(hash);
            rest = rest.slice(0, hash);
        }
        var qm = rest.indexOf('?');
        if (qm !== -1) {
            this.search = rest.substr(qm);
            this.query = rest.substr(qm + 1);
            if (parseQueryString) {
                this.query = querystring.parse(this.query);
            }
            rest = rest.slice(0, qm);
        } else if (parseQueryString) {
            // no query string, but parseQueryString still requested
            this.search = '';
            this.query = {};
        }
        if (rest) this.pathname = rest;
        if (slashedProtocol[lowerProto] &&
            this.hostname && !this.pathname) {
            this.pathname = '/';
        }

        //to support http.request
        if (this.pathname || this.search) {
            var p = this.pathname || '';
            var s = this.search || '';
            this.path = p + s;
        }

        // finally, reconstruct the href based on what has been validated.
        this.href = this.format();
        return this;
    };

// format a parsed object into a url string
    function urlFormat(obj) {
        // ensure it's an object, and not a string url.
        // If it's an obj, this is a no-op.
        // this way, you can call url_format() on strings
        // to clean up potentially wonky urls.
        if (util.isString(obj)) obj = urlParse(obj);
        if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
        return obj.format();
    }

    Url.prototype.format = function() {
        var auth = this.auth || '';
        if (auth) {
            auth = encodeURIComponent(auth);
            auth = auth.replace(/%3A/i, ':');
            auth += '@';
        }

        var protocol = this.protocol || '',
            pathname = this.pathname || '',
            hash = this.hash || '',
            host = false,
            query = '';

        if (this.host) {
            host = auth + this.host;
        } else if (this.hostname) {
            host = auth + (this.hostname.indexOf(':') === -1 ?
                    this.hostname :
                    '[' + this.hostname + ']');
            if (this.port) {
                host += ':' + this.port;
            }
        }

        if (this.query &&
            util.isObject(this.query) &&
            Object.keys(this.query).length) {
            query = querystring.stringify(this.query);
        }

        var search = this.search || (query && ('?' + query)) || '';

        if (protocol && protocol.substr(-1) !== ':') protocol += ':';

        // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
        // unless they had them to begin with.
        if (this.slashes ||
            (!protocol || slashedProtocol[protocol]) && host !== false) {
            host = '//' + (host || '');
            if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
        } else if (!host) {
            host = '';
        }

        if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
        if (search && search.charAt(0) !== '?') search = '?' + search;

        pathname = pathname.replace(/[?#]/g, function(match) {
            return encodeURIComponent(match);
        });
        search = search.replace('#', '%23');

        return protocol + host + pathname + search + hash;
    };

    function urlResolve(source, relative) {
        return urlParse(source, false, true).resolve(relative);
    }

    Url.prototype.resolve = function(relative) {
        return this.resolveObject(urlParse(relative, false, true)).format();
    };

    function urlResolveObject(source, relative) {
        if (!source) return relative;
        return urlParse(source, false, true).resolveObject(relative);
    }

    Url.prototype.resolveObject = function(relative) {
        if (util.isString(relative)) {
            var rel = new Url();
            rel.parse(relative, false, true);
            relative = rel;
        }

        var result = new Url();
        var tkeys = Object.keys(this);
        for (var tk = 0; tk < tkeys.length; tk++) {
            var tkey = tkeys[tk];
            result[tkey] = this[tkey];
        }

        // hash is always overridden, no matter what.
        // even href="" will remove it.
        result.hash = relative.hash;

        // if the relative url is empty, then there's nothing left to do here.
        if (relative.href === '') {
            result.href = result.format();
            return result;
        }

        // hrefs like //foo/bar always cut to the protocol.
        if (relative.slashes && !relative.protocol) {
            // take everything except the protocol from relative
            var rkeys = Object.keys(relative);
            for (var rk = 0; rk < rkeys.length; rk++) {
                var rkey = rkeys[rk];
                if (rkey !== 'protocol')
                    result[rkey] = relative[rkey];
            }

            //urlParse appends trailing / to urls like http://www.example.com
            if (slashedProtocol[result.protocol] &&
                result.hostname && !result.pathname) {
                result.path = result.pathname = '/';
            }

            result.href = result.format();
            return result;
        }

        if (relative.protocol && relative.protocol !== result.protocol) {
            // if it's a known url protocol, then changing
            // the protocol does weird things
            // first, if it's not file:, then we MUST have a host,
            // and if there was a path
            // to begin with, then we MUST have a path.
            // if it is file:, then the host is dropped,
            // because that's known to be hostless.
            // anything else is assumed to be absolute.
            if (!slashedProtocol[relative.protocol]) {
                var keys = Object.keys(relative);
                for (var v = 0; v < keys.length; v++) {
                    var k = keys[v];
                    result[k] = relative[k];
                }
                result.href = result.format();
                return result;
            }

            result.protocol = relative.protocol;
            if (!relative.host && !hostlessProtocol[relative.protocol]) {
                var relPath = (relative.pathname || '').split('/');
                while (relPath.length && !(relative.host = relPath.shift()));
                if (!relative.host) relative.host = '';
                if (!relative.hostname) relative.hostname = '';
                if (relPath[0] !== '') relPath.unshift('');
                if (relPath.length < 2) relPath.unshift('');
                result.pathname = relPath.join('/');
            } else {
                result.pathname = relative.pathname;
            }
            result.search = relative.search;
            result.query = relative.query;
            result.host = relative.host || '';
            result.auth = relative.auth;
            result.hostname = relative.hostname || relative.host;
            result.port = relative.port;
            // to support http.request
            if (result.pathname || result.search) {
                var p = result.pathname || '';
                var s = result.search || '';
                result.path = p + s;
            }
            result.slashes = result.slashes || relative.slashes;
            result.href = result.format();
            return result;
        }

        var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
            isRelAbs = (
                relative.host ||
                relative.pathname && relative.pathname.charAt(0) === '/'
            ),
            mustEndAbs = (isRelAbs || isSourceAbs ||
            (result.host && relative.pathname)),
            removeAllDots = mustEndAbs,
            srcPath = result.pathname && result.pathname.split('/') || [],
            relPath = relative.pathname && relative.pathname.split('/') || [],
            psychotic = result.protocol && !slashedProtocol[result.protocol];

        // if the url is a non-slashed url, then relative
        // links like ../.. should be able
        // to crawl up to the hostname, as well.  This is strange.
        // result.protocol has already been set by now.
        // Later on, put the first path part into the host field.
        if (psychotic) {
            result.hostname = '';
            result.port = null;
            if (result.host) {
                if (srcPath[0] === '') srcPath[0] = result.host;
                else srcPath.unshift(result.host);
            }
            result.host = '';
            if (relative.protocol) {
                relative.hostname = null;
                relative.port = null;
                if (relative.host) {
                    if (relPath[0] === '') relPath[0] = relative.host;
                    else relPath.unshift(relative.host);
                }
                relative.host = null;
            }
            mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
        }

        if (isRelAbs) {
            // it's absolute.
            result.host = (relative.host || relative.host === '') ?
                relative.host : result.host;
            result.hostname = (relative.hostname || relative.hostname === '') ?
                relative.hostname : result.hostname;
            result.search = relative.search;
            result.query = relative.query;
            srcPath = relPath;
            // fall through to the dot-handling below.
        } else if (relPath.length) {
            // it's relative
            // throw away the existing file, and take the new path instead.
            if (!srcPath) srcPath = [];
            srcPath.pop();
            srcPath = srcPath.concat(relPath);
            result.search = relative.search;
            result.query = relative.query;
        } else if (!util.isNullOrUndefined(relative.search)) {
            // just pull out the search.
            // like href='?foo'.
            // Put this after the other two cases because it simplifies the booleans
            if (psychotic) {
                result.hostname = result.host = srcPath.shift();
                //occationaly the auth can get stuck only in host
                //this especially happens in cases like
                //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                var authInHost = result.host && result.host.indexOf('@') > 0 ?
                    result.host.split('@') : false;
                if (authInHost) {
                    result.auth = authInHost.shift();
                    result.host = result.hostname = authInHost.shift();
                }
            }
            result.search = relative.search;
            result.query = relative.query;
            //to support http.request
            if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
                result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
            }
            result.href = result.format();
            return result;
        }

        if (!srcPath.length) {
            // no path at all.  easy.
            // we've already handled the other stuff above.
            result.pathname = null;
            //to support http.request
            if (result.search) {
                result.path = '/' + result.search;
            } else {
                result.path = null;
            }
            result.href = result.format();
            return result;
        }

        // if a url ENDs in . or .., then it must get a trailing slash.
        // however, if it ends in anything else non-slashy,
        // then it must NOT get a trailing slash.
        var last = srcPath.slice(-1)[0];
        var hasTrailingSlash = (
        (result.host || relative.host || srcPath.length > 1) &&
        (last === '.' || last === '..') || last === '');

        // strip single dots, resolve double dots to parent dir
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = srcPath.length; i >= 0; i--) {
            last = srcPath[i];
            if (last === '.') {
                srcPath.splice(i, 1);
            } else if (last === '..') {
                srcPath.splice(i, 1);
                up++;
            } else if (up) {
                srcPath.splice(i, 1);
                up--;
            }
        }

        // if the path is allowed to go above the root, restore leading ..s
        if (!mustEndAbs && !removeAllDots) {
            for (; up--; up) {
                srcPath.unshift('..');
            }
        }

        if (mustEndAbs && srcPath[0] !== '' &&
            (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
            srcPath.unshift('');
        }

        if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
            srcPath.push('');
        }

        var isAbsolute = srcPath[0] === '' ||
            (srcPath[0] && srcPath[0].charAt(0) === '/');

        // put the host back
        if (psychotic) {
            result.hostname = result.host = isAbsolute ? '' :
                srcPath.length ? srcPath.shift() : '';
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost = result.host && result.host.indexOf('@') > 0 ?
                result.host.split('@') : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
            }
        }

        mustEndAbs = mustEndAbs || (result.host && srcPath.length);

        if (mustEndAbs && !isAbsolute) {
            srcPath.unshift('');
        }

        if (!srcPath.length) {
            result.pathname = null;
            result.path = null;
        } else {
            result.pathname = srcPath.join('/');
        }

        //to support request.http
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
            result.path = (result.pathname ? result.pathname : '') +
                (result.search ? result.search : '');
        }
        result.auth = relative.auth || result.auth;
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
    };

    Url.prototype.parseHost = function() {
        var host = this.host;
        var port = portPattern.exec(host);
        if (port) {
            port = port[0];
            if (port !== ':') {
                this.port = port.substr(1);
            }
            host = host.substr(0, host.length - port.length);
        }
        if (host) this.hostname = host;
    };

},{"./util":36,"punycode":126,"querystring":129}],36:[function(require,module,exports){
    'use strict';

    module.exports = {
        isString: function(arg) {
            return typeof(arg) === 'string';
        },
        isObject: function(arg) {
            return typeof(arg) === 'object' && arg !== null;
        },
        isNull: function(arg) {
            return arg === null;
        },
        isNullOrUndefined: function(arg) {
            return arg == null;
        }
    };

},{}],37:[function(require,module,exports){
    module.exports = {
        "100": "Continue",
        "101": "Switching Protocols",
        "102": "Processing",
        "200": "OK",
        "201": "Created",
        "202": "Accepted",
        "203": "Non-Authoritative Information",
        "204": "No Content",
        "205": "Reset Content",
        "206": "Partial Content",
        "207": "Multi-Status",
        "208": "Already Reported",
        "226": "IM Used",
        "300": "Multiple Choices",
        "301": "Moved Permanently",
        "302": "Found",
        "303": "See Other",
        "304": "Not Modified",
        "305": "Use Proxy",
        "307": "Temporary Redirect",
        "308": "Permanent Redirect",
        "400": "Bad Request",
        "401": "Unauthorized",
        "402": "Payment Required",
        "403": "Forbidden",
        "404": "Not Found",
        "405": "Method Not Allowed",
        "406": "Not Acceptable",
        "407": "Proxy Authentication Required",
        "408": "Request Timeout",
        "409": "Conflict",
        "410": "Gone",
        "411": "Length Required",
        "412": "Precondition Failed",
        "413": "Payload Too Large",
        "414": "URI Too Long",
        "415": "Unsupported Media Type",
        "416": "Range Not Satisfiable",
        "417": "Expectation Failed",
        "418": "I'm a teapot",
        "421": "Misdirected Request",
        "422": "Unprocessable Entity",
        "423": "Locked",
        "424": "Failed Dependency",
        "425": "Unordered Collection",
        "426": "Upgrade Required",
        "428": "Precondition Required",
        "429": "Too Many Requests",
        "431": "Request Header Fields Too Large",
        "451": "Unavailable For Legal Reasons",
        "500": "Internal Server Error",
        "501": "Not Implemented",
        "502": "Bad Gateway",
        "503": "Service Unavailable",
        "504": "Gateway Timeout",
        "505": "HTTP Version Not Supported",
        "506": "Variant Also Negotiates",
        "507": "Insufficient Storage",
        "508": "Loop Detected",
        "509": "Bandwidth Limit Exceeded",
        "510": "Not Extended",
        "511": "Network Authentication Required"
    }

},{}],38:[function(require,module,exports){
    (function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

        function isArray(arg) {
            if (Array.isArray) {
                return Array.isArray(arg);
            }
            return objectToString(arg) === '[object Array]';
        }
        exports.isArray = isArray;

        function isBoolean(arg) {
            return typeof arg === 'boolean';
        }
        exports.isBoolean = isBoolean;

        function isNull(arg) {
            return arg === null;
        }
        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
            return arg == null;
        }
        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
            return typeof arg === 'number';
        }
        exports.isNumber = isNumber;

        function isString(arg) {
            return typeof arg === 'string';
        }
        exports.isString = isString;

        function isSymbol(arg) {
            return typeof arg === 'symbol';
        }
        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
            return arg === void 0;
        }
        exports.isUndefined = isUndefined;

        function isRegExp(re) {
            return objectToString(re) === '[object RegExp]';
        }
        exports.isRegExp = isRegExp;

        function isObject(arg) {
            return typeof arg === 'object' && arg !== null;
        }
        exports.isObject = isObject;

        function isDate(d) {
            return objectToString(d) === '[object Date]';
        }
        exports.isDate = isDate;

        function isError(e) {
            return (objectToString(e) === '[object Error]' || e instanceof Error);
        }
        exports.isError = isError;

        function isFunction(arg) {
            return typeof arg === 'function';
        }
        exports.isFunction = isFunction;

        function isPrimitive(arg) {
            return arg === null ||
                typeof arg === 'boolean' ||
                typeof arg === 'number' ||
                typeof arg === 'string' ||
                typeof arg === 'symbol' ||  // ES6 symbol
                typeof arg === 'undefined';
        }
        exports.isPrimitive = isPrimitive;

        exports.isBuffer = Buffer.isBuffer;

        function objectToString(o) {
            return Object.prototype.toString.call(o);
        }

    }).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":122}],39:[function(require,module,exports){
// https://d3js.org/d3-array/ Version 1.2.1. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var ascending = function(a, b) {
            return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
        };

        var bisector = function(compare) {
            if (compare.length === 1) compare = ascendingComparator(compare);
            return {
                left: function(a, x, lo, hi) {
                    if (lo == null) lo = 0;
                    if (hi == null) hi = a.length;
                    while (lo < hi) {
                        var mid = lo + hi >>> 1;
                        if (compare(a[mid], x) < 0) lo = mid + 1;
                        else hi = mid;
                    }
                    return lo;
                },
                right: function(a, x, lo, hi) {
                    if (lo == null) lo = 0;
                    if (hi == null) hi = a.length;
                    while (lo < hi) {
                        var mid = lo + hi >>> 1;
                        if (compare(a[mid], x) > 0) hi = mid;
                        else lo = mid + 1;
                    }
                    return lo;
                }
            };
        };

        function ascendingComparator(f) {
            return function(d, x) {
                return ascending(f(d), x);
            };
        }

        var ascendingBisect = bisector(ascending);
        var bisectRight = ascendingBisect.right;
        var bisectLeft = ascendingBisect.left;

        var pairs = function(array, f) {
            if (f == null) f = pair;
            var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
            while (i < n) pairs[i] = f(p, p = array[++i]);
            return pairs;
        };

        function pair(a, b) {
            return [a, b];
        }

        var cross = function(values0, values1, reduce) {
            var n0 = values0.length,
                n1 = values1.length,
                values = new Array(n0 * n1),
                i0,
                i1,
                i,
                value0;

            if (reduce == null) reduce = pair;

            for (i0 = i = 0; i0 < n0; ++i0) {
                for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
                    values[i] = reduce(value0, values1[i1]);
                }
            }

            return values;
        };

        var descending = function(a, b) {
            return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
        };

        var number = function(x) {
            return x === null ? NaN : +x;
        };

        var variance = function(values, valueof) {
            var n = values.length,
                m = 0,
                i = -1,
                mean = 0,
                value,
                delta,
                sum = 0;

            if (valueof == null) {
                while (++i < n) {
                    if (!isNaN(value = number(values[i]))) {
                        delta = value - mean;
                        mean += delta / ++m;
                        sum += delta * (value - mean);
                    }
                }
            }

            else {
                while (++i < n) {
                    if (!isNaN(value = number(valueof(values[i], i, values)))) {
                        delta = value - mean;
                        mean += delta / ++m;
                        sum += delta * (value - mean);
                    }
                }
            }

            if (m > 1) return sum / (m - 1);
        };

        var deviation = function(array, f) {
            var v = variance(array, f);
            return v ? Math.sqrt(v) : v;
        };

        var extent = function(values, valueof) {
            var n = values.length,
                i = -1,
                value,
                min,
                max;

            if (valueof == null) {
                while (++i < n) { // Find the first comparable value.
                    if ((value = values[i]) != null && value >= value) {
                        min = max = value;
                        while (++i < n) { // Compare the remaining values.
                            if ((value = values[i]) != null) {
                                if (min > value) min = value;
                                if (max < value) max = value;
                            }
                        }
                    }
                }
            }

            else {
                while (++i < n) { // Find the first comparable value.
                    if ((value = valueof(values[i], i, values)) != null && value >= value) {
                        min = max = value;
                        while (++i < n) { // Compare the remaining values.
                            if ((value = valueof(values[i], i, values)) != null) {
                                if (min > value) min = value;
                                if (max < value) max = value;
                            }
                        }
                    }
                }
            }

            return [min, max];
        };

        var array = Array.prototype;

        var slice = array.slice;
        var map = array.map;

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        var identity = function(x) {
            return x;
        };

        var range = function(start, stop, step) {
            start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

            var i = -1,
                n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
                range = new Array(n);

            while (++i < n) {
                range[i] = start + i * step;
            }

            return range;
        };

        var e10 = Math.sqrt(50);
        var e5 = Math.sqrt(10);
        var e2 = Math.sqrt(2);

        var ticks = function(start, stop, count) {
            var reverse,
                i = -1,
                n,
                ticks,
                step;

            stop = +stop, start = +start, count = +count;
            if (start === stop && count > 0) return [start];
            if (reverse = stop < start) n = start, start = stop, stop = n;
            if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

            if (step > 0) {
                start = Math.ceil(start / step);
                stop = Math.floor(stop / step);
                ticks = new Array(n = Math.ceil(stop - start + 1));
                while (++i < n) ticks[i] = (start + i) * step;
            } else {
                start = Math.floor(start * step);
                stop = Math.ceil(stop * step);
                ticks = new Array(n = Math.ceil(start - stop + 1));
                while (++i < n) ticks[i] = (start - i) / step;
            }

            if (reverse) ticks.reverse();

            return ticks;
        };

        function tickIncrement(start, stop, count) {
            var step = (stop - start) / Math.max(0, count),
                power = Math.floor(Math.log(step) / Math.LN10),
                error = step / Math.pow(10, power);
            return power >= 0
                ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
                : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
        }

        function tickStep(start, stop, count) {
            var step0 = Math.abs(stop - start) / Math.max(0, count),
                step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
                error = step0 / step1;
            if (error >= e10) step1 *= 10;
            else if (error >= e5) step1 *= 5;
            else if (error >= e2) step1 *= 2;
            return stop < start ? -step1 : step1;
        }

        var sturges = function(values) {
            return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
        };

        var histogram = function() {
            var value = identity,
                domain = extent,
                threshold = sturges;

            function histogram(data) {
                var i,
                    n = data.length,
                    x,
                    values = new Array(n);

                for (i = 0; i < n; ++i) {
                    values[i] = value(data[i], i, data);
                }

                var xz = domain(values),
                    x0 = xz[0],
                    x1 = xz[1],
                    tz = threshold(values, x0, x1);

                // Convert number of thresholds into uniform thresholds.
                if (!Array.isArray(tz)) {
                    tz = tickStep(x0, x1, tz);
                    tz = range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
                }

                // Remove any thresholds outside the domain.
                var m = tz.length;
                while (tz[0] <= x0) tz.shift(), --m;
                while (tz[m - 1] > x1) tz.pop(), --m;

                var bins = new Array(m + 1),
                    bin;

                // Initialize bins.
                for (i = 0; i <= m; ++i) {
                    bin = bins[i] = [];
                    bin.x0 = i > 0 ? tz[i - 1] : x0;
                    bin.x1 = i < m ? tz[i] : x1;
                }

                // Assign data to bins by value, ignoring any outside the domain.
                for (i = 0; i < n; ++i) {
                    x = values[i];
                    if (x0 <= x && x <= x1) {
                        bins[bisectRight(tz, x, 0, m)].push(data[i]);
                    }
                }

                return bins;
            }

            histogram.value = function(_) {
                return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
            };

            histogram.domain = function(_) {
                return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
            };

            histogram.thresholds = function(_) {
                return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
            };

            return histogram;
        };

        var quantile = function(values, p, valueof) {
            if (valueof == null) valueof = number;
            if (!(n = values.length)) return;
            if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
            if (p >= 1) return +valueof(values[n - 1], n - 1, values);
            var n,
                i = (n - 1) * p,
                i0 = Math.floor(i),
                value0 = +valueof(values[i0], i0, values),
                value1 = +valueof(values[i0 + 1], i0 + 1, values);
            return value0 + (value1 - value0) * (i - i0);
        };

        var freedmanDiaconis = function(values, min, max) {
            values = map.call(values, number).sort(ascending);
            return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));
        };

        var scott = function(values, min, max) {
            return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
        };

        var max = function(values, valueof) {
            var n = values.length,
                i = -1,
                value,
                max;

            if (valueof == null) {
                while (++i < n) { // Find the first comparable value.
                    if ((value = values[i]) != null && value >= value) {
                        max = value;
                        while (++i < n) { // Compare the remaining values.
                            if ((value = values[i]) != null && value > max) {
                                max = value;
                            }
                        }
                    }
                }
            }

            else {
                while (++i < n) { // Find the first comparable value.
                    if ((value = valueof(values[i], i, values)) != null && value >= value) {
                        max = value;
                        while (++i < n) { // Compare the remaining values.
                            if ((value = valueof(values[i], i, values)) != null && value > max) {
                                max = value;
                            }
                        }
                    }
                }
            }

            return max;
        };

        var mean = function(values, valueof) {
            var n = values.length,
                m = n,
                i = -1,
                value,
                sum = 0;

            if (valueof == null) {
                while (++i < n) {
                    if (!isNaN(value = number(values[i]))) sum += value;
                    else --m;
                }
            }

            else {
                while (++i < n) {
                    if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
                    else --m;
                }
            }

            if (m) return sum / m;
        };

        var median = function(values, valueof) {
            var n = values.length,
                i = -1,
                value,
                numbers = [];

            if (valueof == null) {
                while (++i < n) {
                    if (!isNaN(value = number(values[i]))) {
                        numbers.push(value);
                    }
                }
            }

            else {
                while (++i < n) {
                    if (!isNaN(value = number(valueof(values[i], i, values)))) {
                        numbers.push(value);
                    }
                }
            }

            return quantile(numbers.sort(ascending), 0.5);
        };

        var merge = function(arrays) {
            var n = arrays.length,
                m,
                i = -1,
                j = 0,
                merged,
                array;

            while (++i < n) j += arrays[i].length;
            merged = new Array(j);

            while (--n >= 0) {
                array = arrays[n];
                m = array.length;
                while (--m >= 0) {
                    merged[--j] = array[m];
                }
            }

            return merged;
        };

        var min = function(values, valueof) {
            var n = values.length,
                i = -1,
                value,
                min;

            if (valueof == null) {
                while (++i < n) { // Find the first comparable value.
                    if ((value = values[i]) != null && value >= value) {
                        min = value;
                        while (++i < n) { // Compare the remaining values.
                            if ((value = values[i]) != null && min > value) {
                                min = value;
                            }
                        }
                    }
                }
            }

            else {
                while (++i < n) { // Find the first comparable value.
                    if ((value = valueof(values[i], i, values)) != null && value >= value) {
                        min = value;
                        while (++i < n) { // Compare the remaining values.
                            if ((value = valueof(values[i], i, values)) != null && min > value) {
                                min = value;
                            }
                        }
                    }
                }
            }

            return min;
        };

        var permute = function(array, indexes) {
            var i = indexes.length, permutes = new Array(i);
            while (i--) permutes[i] = array[indexes[i]];
            return permutes;
        };

        var scan = function(values, compare) {
            if (!(n = values.length)) return;
            var n,
                i = 0,
                j = 0,
                xi,
                xj = values[j];

            if (compare == null) compare = ascending;

            while (++i < n) {
                if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
                    xj = xi, j = i;
                }
            }

            if (compare(xj, xj) === 0) return j;
        };

        var shuffle = function(array, i0, i1) {
            var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
                t,
                i;

            while (m) {
                i = Math.random() * m-- | 0;
                t = array[m + i0];
                array[m + i0] = array[i + i0];
                array[i + i0] = t;
            }

            return array;
        };

        var sum = function(values, valueof) {
            var n = values.length,
                i = -1,
                value,
                sum = 0;

            if (valueof == null) {
                while (++i < n) {
                    if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
                }
            }

            else {
                while (++i < n) {
                    if (value = +valueof(values[i], i, values)) sum += value;
                }
            }

            return sum;
        };

        var transpose = function(matrix) {
            if (!(n = matrix.length)) return [];
            for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
                for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
                    row[j] = matrix[j][i];
                }
            }
            return transpose;
        };

        function length(d) {
            return d.length;
        }

        var zip = function() {
            return transpose(arguments);
        };

        exports.bisect = bisectRight;
        exports.bisectRight = bisectRight;
        exports.bisectLeft = bisectLeft;
        exports.ascending = ascending;
        exports.bisector = bisector;
        exports.cross = cross;
        exports.descending = descending;
        exports.deviation = deviation;
        exports.extent = extent;
        exports.histogram = histogram;
        exports.thresholdFreedmanDiaconis = freedmanDiaconis;
        exports.thresholdScott = scott;
        exports.thresholdSturges = sturges;
        exports.max = max;
        exports.mean = mean;
        exports.median = median;
        exports.merge = merge;
        exports.min = min;
        exports.pairs = pairs;
        exports.permute = permute;
        exports.quantile = quantile;
        exports.range = range;
        exports.scan = scan;
        exports.shuffle = shuffle;
        exports.sum = sum;
        exports.ticks = ticks;
        exports.tickIncrement = tickIncrement;
        exports.tickStep = tickStep;
        exports.transpose = transpose;
        exports.variance = variance;
        exports.zip = zip;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],40:[function(require,module,exports){
// https://d3js.org/d3-axis/ Version 1.0.8. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var slice = Array.prototype.slice;

        var identity = function(x) {
            return x;
        };

        var top = 1;
        var right = 2;
        var bottom = 3;
        var left = 4;
        var epsilon = 1e-6;

        function translateX(x) {
            return "translate(" + (x + 0.5) + ",0)";
        }

        function translateY(y) {
            return "translate(0," + (y + 0.5) + ")";
        }

        function number(scale) {
            return function(d) {
                return +scale(d);
            };
        }

        function center(scale) {
            var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
            if (scale.round()) offset = Math.round(offset);
            return function(d) {
                return +scale(d) + offset;
            };
        }

        function entering() {
            return !this.__axis;
        }

        function axis(orient, scale) {
            var tickArguments = [],
                tickValues = null,
                tickFormat = null,
                tickSizeInner = 6,
                tickSizeOuter = 6,
                tickPadding = 3,
                k = orient === top || orient === left ? -1 : 1,
                x = orient === left || orient === right ? "x" : "y",
                transform = orient === top || orient === bottom ? translateX : translateY;

            function axis(context) {
                var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
                    format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,
                    spacing = Math.max(tickSizeInner, 0) + tickPadding,
                    range = scale.range(),
                    range0 = +range[0] + 0.5,
                    range1 = +range[range.length - 1] + 0.5,
                    position = (scale.bandwidth ? center : number)(scale.copy()),
                    selection = context.selection ? context.selection() : context,
                    path = selection.selectAll(".domain").data([null]),
                    tick = selection.selectAll(".tick").data(values, scale).order(),
                    tickExit = tick.exit(),
                    tickEnter = tick.enter().append("g").attr("class", "tick"),
                    line = tick.select("line"),
                    text = tick.select("text");

                path = path.merge(path.enter().insert("path", ".tick")
                    .attr("class", "domain")
                    .attr("stroke", "#000"));

                tick = tick.merge(tickEnter);

                line = line.merge(tickEnter.append("line")
                    .attr("stroke", "#000")
                    .attr(x + "2", k * tickSizeInner));

                text = text.merge(tickEnter.append("text")
                    .attr("fill", "#000")
                    .attr(x, k * spacing)
                    .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

                if (context !== selection) {
                    path = path.transition(context);
                    tick = tick.transition(context);
                    line = line.transition(context);
                    text = text.transition(context);

                    tickExit = tickExit.transition(context)
                        .attr("opacity", epsilon)
                        .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

                    tickEnter
                        .attr("opacity", epsilon)
                        .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
                }

                tickExit.remove();

                path
                    .attr("d", orient === left || orient == right
                        ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
                        : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);

                tick
                    .attr("opacity", 1)
                    .attr("transform", function(d) { return transform(position(d)); });

                line
                    .attr(x + "2", k * tickSizeInner);

                text
                    .attr(x, k * spacing)
                    .text(format);

                selection.filter(entering)
                    .attr("fill", "none")
                    .attr("font-size", 10)
                    .attr("font-family", "sans-serif")
                    .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

                selection
                    .each(function() { this.__axis = position; });
            }

            axis.scale = function(_) {
                return arguments.length ? (scale = _, axis) : scale;
            };

            axis.ticks = function() {
                return tickArguments = slice.call(arguments), axis;
            };

            axis.tickArguments = function(_) {
                return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();
            };

            axis.tickValues = function(_) {
                return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();
            };

            axis.tickFormat = function(_) {
                return arguments.length ? (tickFormat = _, axis) : tickFormat;
            };

            axis.tickSize = function(_) {
                return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
            };

            axis.tickSizeInner = function(_) {
                return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
            };

            axis.tickSizeOuter = function(_) {
                return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
            };

            axis.tickPadding = function(_) {
                return arguments.length ? (tickPadding = +_, axis) : tickPadding;
            };

            return axis;
        }

        function axisTop(scale) {
            return axis(top, scale);
        }

        function axisRight(scale) {
            return axis(right, scale);
        }

        function axisBottom(scale) {
            return axis(bottom, scale);
        }

        function axisLeft(scale) {
            return axis(left, scale);
        }

        exports.axisTop = axisTop;
        exports.axisRight = axisRight;
        exports.axisBottom = axisBottom;
        exports.axisLeft = axisLeft;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],41:[function(require,module,exports){
// https://d3js.org/d3-brush/ Version 1.0.4. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-drag'), require('d3-interpolate'), require('d3-selection'), require('d3-transition')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3));
    }(this, (function (exports,d3Dispatch,d3Drag,d3Interpolate,d3Selection,d3Transition) { 'use strict';

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        var BrushEvent = function(target, type, selection) {
            this.target = target;
            this.type = type;
            this.selection = selection;
        };

        function nopropagation() {
            d3Selection.event.stopImmediatePropagation();
        }

        var noevent = function() {
            d3Selection.event.preventDefault();
            d3Selection.event.stopImmediatePropagation();
        };

        var MODE_DRAG = {name: "drag"};
        var MODE_SPACE = {name: "space"};
        var MODE_HANDLE = {name: "handle"};
        var MODE_CENTER = {name: "center"};

        var X = {
            name: "x",
            handles: ["e", "w"].map(type),
            input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
            output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
        };

        var Y = {
            name: "y",
            handles: ["n", "s"].map(type),
            input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
            output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
        };

        var XY = {
            name: "xy",
            handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
            input: function(xy) { return xy; },
            output: function(xy) { return xy; }
        };

        var cursors = {
            overlay: "crosshair",
            selection: "move",
            n: "ns-resize",
            e: "ew-resize",
            s: "ns-resize",
            w: "ew-resize",
            nw: "nwse-resize",
            ne: "nesw-resize",
            se: "nwse-resize",
            sw: "nesw-resize"
        };

        var flipX = {
            e: "w",
            w: "e",
            nw: "ne",
            ne: "nw",
            se: "sw",
            sw: "se"
        };

        var flipY = {
            n: "s",
            s: "n",
            nw: "sw",
            ne: "se",
            se: "ne",
            sw: "nw"
        };

        var signsX = {
            overlay: +1,
            selection: +1,
            n: null,
            e: +1,
            s: null,
            w: -1,
            nw: -1,
            ne: +1,
            se: +1,
            sw: -1
        };

        var signsY = {
            overlay: +1,
            selection: +1,
            n: -1,
            e: null,
            s: +1,
            w: null,
            nw: -1,
            ne: -1,
            se: +1,
            sw: +1
        };

        function type(t) {
            return {type: t};
        }

// Ignore right-click, since that should open the context menu.
        function defaultFilter() {
            return !d3Selection.event.button;
        }

        function defaultExtent() {
            var svg = this.ownerSVGElement || this;
            return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
        }

// Like d3.local, but with the name “__brush” rather than auto-generated.
        function local(node) {
            while (!node.__brush) if (!(node = node.parentNode)) return;
            return node.__brush;
        }

        function empty(extent) {
            return extent[0][0] === extent[1][0]
                || extent[0][1] === extent[1][1];
        }

        function brushSelection(node) {
            var state = node.__brush;
            return state ? state.dim.output(state.selection) : null;
        }

        function brushX() {
            return brush$1(X);
        }

        function brushY() {
            return brush$1(Y);
        }

        var brush = function() {
            return brush$1(XY);
        };

        function brush$1(dim) {
            var extent = defaultExtent,
                filter = defaultFilter,
                listeners = d3Dispatch.dispatch(brush, "start", "brush", "end"),
                handleSize = 6,
                touchending;

            function brush(group) {
                var overlay = group
                    .property("__brush", initialize)
                    .selectAll(".overlay")
                    .data([type("overlay")]);

                overlay.enter().append("rect")
                    .attr("class", "overlay")
                    .attr("pointer-events", "all")
                    .attr("cursor", cursors.overlay)
                    .merge(overlay)
                    .each(function() {
                        var extent = local(this).extent;
                        d3Selection.select(this)
                            .attr("x", extent[0][0])
                            .attr("y", extent[0][1])
                            .attr("width", extent[1][0] - extent[0][0])
                            .attr("height", extent[1][1] - extent[0][1]);
                    });

                group.selectAll(".selection")
                    .data([type("selection")])
                    .enter().append("rect")
                    .attr("class", "selection")
                    .attr("cursor", cursors.selection)
                    .attr("fill", "#777")
                    .attr("fill-opacity", 0.3)
                    .attr("stroke", "#fff")
                    .attr("shape-rendering", "crispEdges");

                var handle = group.selectAll(".handle")
                    .data(dim.handles, function(d) { return d.type; });

                handle.exit().remove();

                handle.enter().append("rect")
                    .attr("class", function(d) { return "handle handle--" + d.type; })
                    .attr("cursor", function(d) { return cursors[d.type]; });

                group
                    .each(redraw)
                    .attr("fill", "none")
                    .attr("pointer-events", "all")
                    .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
                    .on("mousedown.brush touchstart.brush", started);
            }

            brush.move = function(group, selection) {
                if (group.selection) {
                    group
                        .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
                        .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
                        .tween("brush", function() {
                            var that = this,
                                state = that.__brush,
                                emit = emitter(that, arguments),
                                selection0 = state.selection,
                                selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
                                i = d3Interpolate.interpolate(selection0, selection1);

                            function tween(t) {
                                state.selection = t === 1 && empty(selection1) ? null : i(t);
                                redraw.call(that);
                                emit.brush();
                            }

                            return selection0 && selection1 ? tween : tween(1);
                        });
                } else {
                    group
                        .each(function() {
                            var that = this,
                                args = arguments,
                                state = that.__brush,
                                selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
                                emit = emitter(that, args).beforestart();

                            d3Transition.interrupt(that);
                            state.selection = selection1 == null || empty(selection1) ? null : selection1;
                            redraw.call(that);
                            emit.start().brush().end();
                        });
                }
            };

            function redraw() {
                var group = d3Selection.select(this),
                    selection = local(this).selection;

                if (selection) {
                    group.selectAll(".selection")
                        .style("display", null)
                        .attr("x", selection[0][0])
                        .attr("y", selection[0][1])
                        .attr("width", selection[1][0] - selection[0][0])
                        .attr("height", selection[1][1] - selection[0][1]);

                    group.selectAll(".handle")
                        .style("display", null)
                        .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
                        .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
                        .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
                        .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
                }

                else {
                    group.selectAll(".selection,.handle")
                        .style("display", "none")
                        .attr("x", null)
                        .attr("y", null)
                        .attr("width", null)
                        .attr("height", null);
                }
            }

            function emitter(that, args) {
                return that.__brush.emitter || new Emitter(that, args);
            }

            function Emitter(that, args) {
                this.that = that;
                this.args = args;
                this.state = that.__brush;
                this.active = 0;
            }

            Emitter.prototype = {
                beforestart: function() {
                    if (++this.active === 1) this.state.emitter = this, this.starting = true;
                    return this;
                },
                start: function() {
                    if (this.starting) this.starting = false, this.emit("start");
                    return this;
                },
                brush: function() {
                    this.emit("brush");
                    return this;
                },
                end: function() {
                    if (--this.active === 0) delete this.state.emitter, this.emit("end");
                    return this;
                },
                emit: function(type) {
                    d3Selection.customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
                }
            };

            function started() {
                if (d3Selection.event.touches) { if (d3Selection.event.changedTouches.length < d3Selection.event.touches.length) return noevent(); }
                else if (touchending) return;
                if (!filter.apply(this, arguments)) return;

                var that = this,
                    type = d3Selection.event.target.__data__.type,
                    mode = (d3Selection.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE),
                    signX = dim === Y ? null : signsX[type],
                    signY = dim === X ? null : signsY[type],
                    state = local(that),
                    extent = state.extent,
                    selection = state.selection,
                    W = extent[0][0], w0, w1,
                    N = extent[0][1], n0, n1,
                    E = extent[1][0], e0, e1,
                    S = extent[1][1], s0, s1,
                    dx,
                    dy,
                    moving,
                    shifting = signX && signY && d3Selection.event.shiftKey,
                    lockX,
                    lockY,
                    point0 = d3Selection.mouse(that),
                    point = point0,
                    emit = emitter(that, arguments).beforestart();

                if (type === "overlay") {
                    state.selection = selection = [
                        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
                        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
                    ];
                } else {
                    w0 = selection[0][0];
                    n0 = selection[0][1];
                    e0 = selection[1][0];
                    s0 = selection[1][1];
                }

                w1 = w0;
                n1 = n0;
                e1 = e0;
                s1 = s0;

                var group = d3Selection.select(that)
                    .attr("pointer-events", "none");

                var overlay = group.selectAll(".overlay")
                    .attr("cursor", cursors[type]);

                if (d3Selection.event.touches) {
                    group
                        .on("touchmove.brush", moved, true)
                        .on("touchend.brush touchcancel.brush", ended, true);
                } else {
                    var view = d3Selection.select(d3Selection.event.view)
                        .on("keydown.brush", keydowned, true)
                        .on("keyup.brush", keyupped, true)
                        .on("mousemove.brush", moved, true)
                        .on("mouseup.brush", ended, true);

                    d3Drag.dragDisable(d3Selection.event.view);
                }

                nopropagation();
                d3Transition.interrupt(that);
                redraw.call(that);
                emit.start();

                function moved() {
                    var point1 = d3Selection.mouse(that);
                    if (shifting && !lockX && !lockY) {
                        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
                        else lockX = true;
                    }
                    point = point1;
                    moving = true;
                    noevent();
                    move();
                }

                function move() {
                    var t;

                    dx = point[0] - point0[0];
                    dy = point[1] - point0[1];

                    switch (mode) {
                        case MODE_SPACE:
                        case MODE_DRAG: {
                            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
                            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
                            break;
                        }
                        case MODE_HANDLE: {
                            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                            else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                            else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
                            break;
                        }
                        case MODE_CENTER: {
                            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
                            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
                            break;
                        }
                    }

                    if (e1 < w1) {
                        signX *= -1;
                        t = w0, w0 = e0, e0 = t;
                        t = w1, w1 = e1, e1 = t;
                        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
                    }

                    if (s1 < n1) {
                        signY *= -1;
                        t = n0, n0 = s0, s0 = t;
                        t = n1, n1 = s1, s1 = t;
                        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
                    }

                    if (state.selection) selection = state.selection; // May be set by brush.move!
                    if (lockX) w1 = selection[0][0], e1 = selection[1][0];
                    if (lockY) n1 = selection[0][1], s1 = selection[1][1];

                    if (selection[0][0] !== w1
                        || selection[0][1] !== n1
                        || selection[1][0] !== e1
                        || selection[1][1] !== s1) {
                        state.selection = [[w1, n1], [e1, s1]];
                        redraw.call(that);
                        emit.brush();
                    }
                }

                function ended() {
                    nopropagation();
                    if (d3Selection.event.touches) {
                        if (d3Selection.event.touches.length) return;
                        if (touchending) clearTimeout(touchending);
                        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
                        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
                    } else {
                        d3Drag.dragEnable(d3Selection.event.view, moving);
                        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
                    }
                    group.attr("pointer-events", "all");
                    overlay.attr("cursor", cursors.overlay);
                    if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
                    if (empty(selection)) state.selection = null, redraw.call(that);
                    emit.end();
                }

                function keydowned() {
                    switch (d3Selection.event.keyCode) {
                        case 16: { // SHIFT
                            shifting = signX && signY;
                            break;
                        }
                        case 18: { // ALT
                            if (mode === MODE_HANDLE) {
                                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                                mode = MODE_CENTER;
                                move();
                            }
                            break;
                        }
                        case 32: { // SPACE; takes priority over ALT
                            if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                                if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
                                if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
                                mode = MODE_SPACE;
                                overlay.attr("cursor", cursors.selection);
                                move();
                            }
                            break;
                        }
                        default: return;
                    }
                    noevent();
                }

                function keyupped() {
                    switch (d3Selection.event.keyCode) {
                        case 16: { // SHIFT
                            if (shifting) {
                                lockX = lockY = shifting = false;
                                move();
                            }
                            break;
                        }
                        case 18: { // ALT
                            if (mode === MODE_CENTER) {
                                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
                                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
                                mode = MODE_HANDLE;
                                move();
                            }
                            break;
                        }
                        case 32: { // SPACE
                            if (mode === MODE_SPACE) {
                                if (d3Selection.event.altKey) {
                                    if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                                    if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                                    mode = MODE_CENTER;
                                } else {
                                    if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
                                    if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
                                    mode = MODE_HANDLE;
                                }
                                overlay.attr("cursor", cursors[type]);
                                move();
                            }
                            break;
                        }
                        default: return;
                    }
                    noevent();
                }
            }

            function initialize() {
                var state = this.__brush || {selection: null};
                state.extent = extent.apply(this, arguments);
                state.dim = dim;
                return state;
            }

            brush.extent = function(_) {
                return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
            };

            brush.filter = function(_) {
                return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), brush) : filter;
            };

            brush.handleSize = function(_) {
                return arguments.length ? (handleSize = +_, brush) : handleSize;
            };

            brush.on = function() {
                var value = listeners.on.apply(listeners, arguments);
                return value === listeners ? brush : value;
            };

            return brush;
        }

        exports.brush = brush;
        exports.brushX = brushX;
        exports.brushY = brushY;
        exports.brushSelection = brushSelection;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-dispatch":45,"d3-drag":46,"d3-interpolate":53,"d3-selection":61,"d3-transition":66}],42:[function(require,module,exports){
// https://d3js.org/d3-chord/ Version 1.0.4. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-path')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-path'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3,global.d3));
    }(this, (function (exports,d3Array,d3Path) { 'use strict';

        var cos = Math.cos;
        var sin = Math.sin;
        var pi = Math.PI;
        var halfPi = pi / 2;
        var tau = pi * 2;
        var max = Math.max;

        function compareValue(compare) {
            return function(a, b) {
                return compare(
                    a.source.value + a.target.value,
                    b.source.value + b.target.value
                );
            };
        }

        var chord = function() {
            var padAngle = 0,
                sortGroups = null,
                sortSubgroups = null,
                sortChords = null;

            function chord(matrix) {
                var n = matrix.length,
                    groupSums = [],
                    groupIndex = d3Array.range(n),
                    subgroupIndex = [],
                    chords = [],
                    groups = chords.groups = new Array(n),
                    subgroups = new Array(n * n),
                    k,
                    x,
                    x0,
                    dx,
                    i,
                    j;

                // Compute the sum.
                k = 0, i = -1; while (++i < n) {
                    x = 0, j = -1; while (++j < n) {
                        x += matrix[i][j];
                    }
                    groupSums.push(x);
                    subgroupIndex.push(d3Array.range(n));
                    k += x;
                }

                // Sort groups…
                if (sortGroups) groupIndex.sort(function(a, b) {
                    return sortGroups(groupSums[a], groupSums[b]);
                });

                // Sort subgroups…
                if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
                    d.sort(function(a, b) {
                        return sortSubgroups(matrix[i][a], matrix[i][b]);
                    });
                });

                // Convert the sum to scaling factor for [0, 2pi].
                // TODO Allow start and end angle to be specified?
                // TODO Allow padding to be specified as percentage?
                k = max(0, tau - padAngle * n) / k;
                dx = k ? padAngle : tau / n;

                // Compute the start and end angle for each group and subgroup.
                // Note: Opera has a bug reordering object literal properties!
                x = 0, i = -1; while (++i < n) {
                    x0 = x, j = -1; while (++j < n) {
                        var di = groupIndex[i],
                            dj = subgroupIndex[di][j],
                            v = matrix[di][dj],
                            a0 = x,
                            a1 = x += v * k;
                        subgroups[dj * n + di] = {
                            index: di,
                            subindex: dj,
                            startAngle: a0,
                            endAngle: a1,
                            value: v
                        };
                    }
                    groups[di] = {
                        index: di,
                        startAngle: x0,
                        endAngle: x,
                        value: groupSums[di]
                    };
                    x += dx;
                }

                // Generate chords for each (non-empty) subgroup-subgroup link.
                i = -1; while (++i < n) {
                    j = i - 1; while (++j < n) {
                        var source = subgroups[j * n + i],
                            target = subgroups[i * n + j];
                        if (source.value || target.value) {
                            chords.push(source.value < target.value
                                ? {source: target, target: source}
                                : {source: source, target: target});
                        }
                    }
                }

                return sortChords ? chords.sort(sortChords) : chords;
            }

            chord.padAngle = function(_) {
                return arguments.length ? (padAngle = max(0, _), chord) : padAngle;
            };

            chord.sortGroups = function(_) {
                return arguments.length ? (sortGroups = _, chord) : sortGroups;
            };

            chord.sortSubgroups = function(_) {
                return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
            };

            chord.sortChords = function(_) {
                return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
            };

            return chord;
        };

        var slice = Array.prototype.slice;

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        function defaultSource(d) {
            return d.source;
        }

        function defaultTarget(d) {
            return d.target;
        }

        function defaultRadius(d) {
            return d.radius;
        }

        function defaultStartAngle(d) {
            return d.startAngle;
        }

        function defaultEndAngle(d) {
            return d.endAngle;
        }

        var ribbon = function() {
            var source = defaultSource,
                target = defaultTarget,
                radius = defaultRadius,
                startAngle = defaultStartAngle,
                endAngle = defaultEndAngle,
                context = null;

            function ribbon() {
                var buffer,
                    argv = slice.call(arguments),
                    s = source.apply(this, argv),
                    t = target.apply(this, argv),
                    sr = +radius.apply(this, (argv[0] = s, argv)),
                    sa0 = startAngle.apply(this, argv) - halfPi,
                    sa1 = endAngle.apply(this, argv) - halfPi,
                    sx0 = sr * cos(sa0),
                    sy0 = sr * sin(sa0),
                    tr = +radius.apply(this, (argv[0] = t, argv)),
                    ta0 = startAngle.apply(this, argv) - halfPi,
                    ta1 = endAngle.apply(this, argv) - halfPi;

                if (!context) context = buffer = d3Path.path();

                context.moveTo(sx0, sy0);
                context.arc(0, 0, sr, sa0, sa1);
                if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
                    context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
                    context.arc(0, 0, tr, ta0, ta1);
                }
                context.quadraticCurveTo(0, 0, sx0, sy0);
                context.closePath();

                if (buffer) return context = null, buffer + "" || null;
            }

            ribbon.radius = function(_) {
                return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), ribbon) : radius;
            };

            ribbon.startAngle = function(_) {
                return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), ribbon) : startAngle;
            };

            ribbon.endAngle = function(_) {
                return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), ribbon) : endAngle;
            };

            ribbon.source = function(_) {
                return arguments.length ? (source = _, ribbon) : source;
            };

            ribbon.target = function(_) {
                return arguments.length ? (target = _, ribbon) : target;
            };

            ribbon.context = function(_) {
                return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
            };

            return ribbon;
        };

        exports.chord = chord;
        exports.ribbon = ribbon;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-array":39,"d3-path":54}],43:[function(require,module,exports){
// https://d3js.org/d3-collection/ Version 1.0.4. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var prefix = "$";

        function Map() {}

        Map.prototype = map.prototype = {
            constructor: Map,
            has: function(key) {
                return (prefix + key) in this;
            },
            get: function(key) {
                return this[prefix + key];
            },
            set: function(key, value) {
                this[prefix + key] = value;
                return this;
            },
            remove: function(key) {
                var property = prefix + key;
                return property in this && delete this[property];
            },
            clear: function() {
                for (var property in this) if (property[0] === prefix) delete this[property];
            },
            keys: function() {
                var keys = [];
                for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
                return keys;
            },
            values: function() {
                var values = [];
                for (var property in this) if (property[0] === prefix) values.push(this[property]);
                return values;
            },
            entries: function() {
                var entries = [];
                for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
                return entries;
            },
            size: function() {
                var size = 0;
                for (var property in this) if (property[0] === prefix) ++size;
                return size;
            },
            empty: function() {
                for (var property in this) if (property[0] === prefix) return false;
                return true;
            },
            each: function(f) {
                for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
            }
        };

        function map(object, f) {
            var map = new Map;

            // Copy constructor.
            if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

            // Index array by numeric index or specified key function.
            else if (Array.isArray(object)) {
                var i = -1,
                    n = object.length,
                    o;

                if (f == null) while (++i < n) map.set(i, object[i]);
                else while (++i < n) map.set(f(o = object[i], i, object), o);
            }

            // Convert object to map.
            else if (object) for (var key in object) map.set(key, object[key]);

            return map;
        }

        var nest = function() {
            var keys = [],
                sortKeys = [],
                sortValues,
                rollup,
                nest;

            function apply(array, depth, createResult, setResult) {
                if (depth >= keys.length) {
                    if (sortValues != null) array.sort(sortValues);
                    return rollup != null ? rollup(array) : array;
                }

                var i = -1,
                    n = array.length,
                    key = keys[depth++],
                    keyValue,
                    value,
                    valuesByKey = map(),
                    values,
                    result = createResult();

                while (++i < n) {
                    if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
                        values.push(value);
                    } else {
                        valuesByKey.set(keyValue, [value]);
                    }
                }

                valuesByKey.each(function(values, key) {
                    setResult(result, key, apply(values, depth, createResult, setResult));
                });

                return result;
            }

            function entries(map$$1, depth) {
                if (++depth > keys.length) return map$$1;
                var array, sortKey = sortKeys[depth - 1];
                if (rollup != null && depth >= keys.length) array = map$$1.entries();
                else array = [], map$$1.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
                return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
            }

            return nest = {
                object: function(array) { return apply(array, 0, createObject, setObject); },
                map: function(array) { return apply(array, 0, createMap, setMap); },
                entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
                key: function(d) { keys.push(d); return nest; },
                sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
                sortValues: function(order) { sortValues = order; return nest; },
                rollup: function(f) { rollup = f; return nest; }
            };
        };

        function createObject() {
            return {};
        }

        function setObject(object, key, value) {
            object[key] = value;
        }

        function createMap() {
            return map();
        }

        function setMap(map$$1, key, value) {
            map$$1.set(key, value);
        }

        function Set() {}

        var proto = map.prototype;

        Set.prototype = set.prototype = {
            constructor: Set,
            has: proto.has,
            add: function(value) {
                value += "";
                this[prefix + value] = value;
                return this;
            },
            remove: proto.remove,
            clear: proto.clear,
            values: proto.keys,
            size: proto.size,
            empty: proto.empty,
            each: proto.each
        };

        function set(object, f) {
            var set = new Set;

            // Copy constructor.
            if (object instanceof Set) object.each(function(value) { set.add(value); });

            // Otherwise, assume it’s an array.
            else if (object) {
                var i = -1, n = object.length;
                if (f == null) while (++i < n) set.add(object[i]);
                else while (++i < n) set.add(f(object[i], i, object));
            }

            return set;
        }

        var keys = function(map) {
            var keys = [];
            for (var key in map) keys.push(key);
            return keys;
        };

        var values = function(map) {
            var values = [];
            for (var key in map) values.push(map[key]);
            return values;
        };

        var entries = function(map) {
            var entries = [];
            for (var key in map) entries.push({key: key, value: map[key]});
            return entries;
        };

        exports.nest = nest;
        exports.set = set;
        exports.map = map;
        exports.keys = keys;
        exports.values = values;
        exports.entries = entries;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],44:[function(require,module,exports){
// https://d3js.org/d3-color/ Version 1.0.3. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var define = function(constructor, factory, prototype) {
            constructor.prototype = factory.prototype = prototype;
            prototype.constructor = constructor;
        };

        function extend(parent, definition) {
            var prototype = Object.create(parent.prototype);
            for (var key in definition) prototype[key] = definition[key];
            return prototype;
        }

        function Color() {}

        var darker = 0.7;
        var brighter = 1 / darker;

        var reI = "\\s*([+-]?\\d+)\\s*";
        var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
        var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
        var reHex3 = /^#([0-9a-f]{3})$/;
        var reHex6 = /^#([0-9a-f]{6})$/;
        var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
        var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
        var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
        var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
        var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
        var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

        var named = {
            aliceblue: 0xf0f8ff,
            antiquewhite: 0xfaebd7,
            aqua: 0x00ffff,
            aquamarine: 0x7fffd4,
            azure: 0xf0ffff,
            beige: 0xf5f5dc,
            bisque: 0xffe4c4,
            black: 0x000000,
            blanchedalmond: 0xffebcd,
            blue: 0x0000ff,
            blueviolet: 0x8a2be2,
            brown: 0xa52a2a,
            burlywood: 0xdeb887,
            cadetblue: 0x5f9ea0,
            chartreuse: 0x7fff00,
            chocolate: 0xd2691e,
            coral: 0xff7f50,
            cornflowerblue: 0x6495ed,
            cornsilk: 0xfff8dc,
            crimson: 0xdc143c,
            cyan: 0x00ffff,
            darkblue: 0x00008b,
            darkcyan: 0x008b8b,
            darkgoldenrod: 0xb8860b,
            darkgray: 0xa9a9a9,
            darkgreen: 0x006400,
            darkgrey: 0xa9a9a9,
            darkkhaki: 0xbdb76b,
            darkmagenta: 0x8b008b,
            darkolivegreen: 0x556b2f,
            darkorange: 0xff8c00,
            darkorchid: 0x9932cc,
            darkred: 0x8b0000,
            darksalmon: 0xe9967a,
            darkseagreen: 0x8fbc8f,
            darkslateblue: 0x483d8b,
            darkslategray: 0x2f4f4f,
            darkslategrey: 0x2f4f4f,
            darkturquoise: 0x00ced1,
            darkviolet: 0x9400d3,
            deeppink: 0xff1493,
            deepskyblue: 0x00bfff,
            dimgray: 0x696969,
            dimgrey: 0x696969,
            dodgerblue: 0x1e90ff,
            firebrick: 0xb22222,
            floralwhite: 0xfffaf0,
            forestgreen: 0x228b22,
            fuchsia: 0xff00ff,
            gainsboro: 0xdcdcdc,
            ghostwhite: 0xf8f8ff,
            gold: 0xffd700,
            goldenrod: 0xdaa520,
            gray: 0x808080,
            green: 0x008000,
            greenyellow: 0xadff2f,
            grey: 0x808080,
            honeydew: 0xf0fff0,
            hotpink: 0xff69b4,
            indianred: 0xcd5c5c,
            indigo: 0x4b0082,
            ivory: 0xfffff0,
            khaki: 0xf0e68c,
            lavender: 0xe6e6fa,
            lavenderblush: 0xfff0f5,
            lawngreen: 0x7cfc00,
            lemonchiffon: 0xfffacd,
            lightblue: 0xadd8e6,
            lightcoral: 0xf08080,
            lightcyan: 0xe0ffff,
            lightgoldenrodyellow: 0xfafad2,
            lightgray: 0xd3d3d3,
            lightgreen: 0x90ee90,
            lightgrey: 0xd3d3d3,
            lightpink: 0xffb6c1,
            lightsalmon: 0xffa07a,
            lightseagreen: 0x20b2aa,
            lightskyblue: 0x87cefa,
            lightslategray: 0x778899,
            lightslategrey: 0x778899,
            lightsteelblue: 0xb0c4de,
            lightyellow: 0xffffe0,
            lime: 0x00ff00,
            limegreen: 0x32cd32,
            linen: 0xfaf0e6,
            magenta: 0xff00ff,
            maroon: 0x800000,
            mediumaquamarine: 0x66cdaa,
            mediumblue: 0x0000cd,
            mediumorchid: 0xba55d3,
            mediumpurple: 0x9370db,
            mediumseagreen: 0x3cb371,
            mediumslateblue: 0x7b68ee,
            mediumspringgreen: 0x00fa9a,
            mediumturquoise: 0x48d1cc,
            mediumvioletred: 0xc71585,
            midnightblue: 0x191970,
            mintcream: 0xf5fffa,
            mistyrose: 0xffe4e1,
            moccasin: 0xffe4b5,
            navajowhite: 0xffdead,
            navy: 0x000080,
            oldlace: 0xfdf5e6,
            olive: 0x808000,
            olivedrab: 0x6b8e23,
            orange: 0xffa500,
            orangered: 0xff4500,
            orchid: 0xda70d6,
            palegoldenrod: 0xeee8aa,
            palegreen: 0x98fb98,
            paleturquoise: 0xafeeee,
            palevioletred: 0xdb7093,
            papayawhip: 0xffefd5,
            peachpuff: 0xffdab9,
            peru: 0xcd853f,
            pink: 0xffc0cb,
            plum: 0xdda0dd,
            powderblue: 0xb0e0e6,
            purple: 0x800080,
            rebeccapurple: 0x663399,
            red: 0xff0000,
            rosybrown: 0xbc8f8f,
            royalblue: 0x4169e1,
            saddlebrown: 0x8b4513,
            salmon: 0xfa8072,
            sandybrown: 0xf4a460,
            seagreen: 0x2e8b57,
            seashell: 0xfff5ee,
            sienna: 0xa0522d,
            silver: 0xc0c0c0,
            skyblue: 0x87ceeb,
            slateblue: 0x6a5acd,
            slategray: 0x708090,
            slategrey: 0x708090,
            snow: 0xfffafa,
            springgreen: 0x00ff7f,
            steelblue: 0x4682b4,
            tan: 0xd2b48c,
            teal: 0x008080,
            thistle: 0xd8bfd8,
            tomato: 0xff6347,
            turquoise: 0x40e0d0,
            violet: 0xee82ee,
            wheat: 0xf5deb3,
            white: 0xffffff,
            whitesmoke: 0xf5f5f5,
            yellow: 0xffff00,
            yellowgreen: 0x9acd32
        };

        define(Color, color, {
            displayable: function() {
                return this.rgb().displayable();
            },
            toString: function() {
                return this.rgb() + "";
            }
        });

        function color(format) {
            var m;
            format = (format + "").trim().toLowerCase();
            return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
                : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
                    : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
                        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
                            : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
                                : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
                                    : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
                                        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
                                            : named.hasOwnProperty(format) ? rgbn(named[format])
                                                : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
                                                    : null;
        }

        function rgbn(n) {
            return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
        }

        function rgba(r, g, b, a) {
            if (a <= 0) r = g = b = NaN;
            return new Rgb(r, g, b, a);
        }

        function rgbConvert(o) {
            if (!(o instanceof Color)) o = color(o);
            if (!o) return new Rgb;
            o = o.rgb();
            return new Rgb(o.r, o.g, o.b, o.opacity);
        }

        function rgb(r, g, b, opacity) {
            return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
        }

        function Rgb(r, g, b, opacity) {
            this.r = +r;
            this.g = +g;
            this.b = +b;
            this.opacity = +opacity;
        }

        define(Rgb, rgb, extend(Color, {
            brighter: function(k) {
                k = k == null ? brighter : Math.pow(brighter, k);
                return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
            },
            darker: function(k) {
                k = k == null ? darker : Math.pow(darker, k);
                return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
            },
            rgb: function() {
                return this;
            },
            displayable: function() {
                return (0 <= this.r && this.r <= 255)
                    && (0 <= this.g && this.g <= 255)
                    && (0 <= this.b && this.b <= 255)
                    && (0 <= this.opacity && this.opacity <= 1);
            },
            toString: function() {
                var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
                return (a === 1 ? "rgb(" : "rgba(")
                    + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
                    + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
                    + Math.max(0, Math.min(255, Math.round(this.b) || 0))
                    + (a === 1 ? ")" : ", " + a + ")");
            }
        }));

        function hsla(h, s, l, a) {
            if (a <= 0) h = s = l = NaN;
            else if (l <= 0 || l >= 1) h = s = NaN;
            else if (s <= 0) h = NaN;
            return new Hsl(h, s, l, a);
        }

        function hslConvert(o) {
            if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
            if (!(o instanceof Color)) o = color(o);
            if (!o) return new Hsl;
            if (o instanceof Hsl) return o;
            o = o.rgb();
            var r = o.r / 255,
                g = o.g / 255,
                b = o.b / 255,
                min = Math.min(r, g, b),
                max = Math.max(r, g, b),
                h = NaN,
                s = max - min,
                l = (max + min) / 2;
            if (s) {
                if (r === max) h = (g - b) / s + (g < b) * 6;
                else if (g === max) h = (b - r) / s + 2;
                else h = (r - g) / s + 4;
                s /= l < 0.5 ? max + min : 2 - max - min;
                h *= 60;
            } else {
                s = l > 0 && l < 1 ? 0 : h;
            }
            return new Hsl(h, s, l, o.opacity);
        }

        function hsl(h, s, l, opacity) {
            return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
        }

        function Hsl(h, s, l, opacity) {
            this.h = +h;
            this.s = +s;
            this.l = +l;
            this.opacity = +opacity;
        }

        define(Hsl, hsl, extend(Color, {
            brighter: function(k) {
                k = k == null ? brighter : Math.pow(brighter, k);
                return new Hsl(this.h, this.s, this.l * k, this.opacity);
            },
            darker: function(k) {
                k = k == null ? darker : Math.pow(darker, k);
                return new Hsl(this.h, this.s, this.l * k, this.opacity);
            },
            rgb: function() {
                var h = this.h % 360 + (this.h < 0) * 360,
                    s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
                    l = this.l,
                    m2 = l + (l < 0.5 ? l : 1 - l) * s,
                    m1 = 2 * l - m2;
                return new Rgb(
                    hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
                    hsl2rgb(h, m1, m2),
                    hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
                    this.opacity
                );
            },
            displayable: function() {
                return (0 <= this.s && this.s <= 1 || isNaN(this.s))
                    && (0 <= this.l && this.l <= 1)
                    && (0 <= this.opacity && this.opacity <= 1);
            }
        }));

        /* From FvD 13.37, CSS Color Module Level 3 */
        function hsl2rgb(h, m1, m2) {
            return (h < 60 ? m1 + (m2 - m1) * h / 60
                    : h < 180 ? m2
                        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
                            : m1) * 255;
        }

        var deg2rad = Math.PI / 180;
        var rad2deg = 180 / Math.PI;

        var Kn = 18;
        var Xn = 0.950470;
        var Yn = 1;
        var Zn = 1.088830;
        var t0 = 4 / 29;
        var t1 = 6 / 29;
        var t2 = 3 * t1 * t1;
        var t3 = t1 * t1 * t1;

        function labConvert(o) {
            if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
            if (o instanceof Hcl) {
                var h = o.h * deg2rad;
                return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
            }
            if (!(o instanceof Rgb)) o = rgbConvert(o);
            var b = rgb2xyz(o.r),
                a = rgb2xyz(o.g),
                l = rgb2xyz(o.b),
                x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
                y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
                z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
            return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
        }

        function lab(l, a, b, opacity) {
            return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
        }

        function Lab(l, a, b, opacity) {
            this.l = +l;
            this.a = +a;
            this.b = +b;
            this.opacity = +opacity;
        }

        define(Lab, lab, extend(Color, {
            brighter: function(k) {
                return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
            },
            darker: function(k) {
                return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
            },
            rgb: function() {
                var y = (this.l + 16) / 116,
                    x = isNaN(this.a) ? y : y + this.a / 500,
                    z = isNaN(this.b) ? y : y - this.b / 200;
                y = Yn * lab2xyz(y);
                x = Xn * lab2xyz(x);
                z = Zn * lab2xyz(z);
                return new Rgb(
                    xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
                    xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
                    xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
                    this.opacity
                );
            }
        }));

        function xyz2lab(t) {
            return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
        }

        function lab2xyz(t) {
            return t > t1 ? t * t * t : t2 * (t - t0);
        }

        function xyz2rgb(x) {
            return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
        }

        function rgb2xyz(x) {
            return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
        }

        function hclConvert(o) {
            if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
            if (!(o instanceof Lab)) o = labConvert(o);
            var h = Math.atan2(o.b, o.a) * rad2deg;
            return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
        }

        function hcl(h, c, l, opacity) {
            return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
        }

        function Hcl(h, c, l, opacity) {
            this.h = +h;
            this.c = +c;
            this.l = +l;
            this.opacity = +opacity;
        }

        define(Hcl, hcl, extend(Color, {
            brighter: function(k) {
                return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
            },
            darker: function(k) {
                return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
            },
            rgb: function() {
                return labConvert(this).rgb();
            }
        }));

        var A = -0.14861;
        var B = +1.78277;
        var C = -0.29227;
        var D = -0.90649;
        var E = +1.97294;
        var ED = E * D;
        var EB = E * B;
        var BC_DA = B * C - D * A;

        function cubehelixConvert(o) {
            if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
            if (!(o instanceof Rgb)) o = rgbConvert(o);
            var r = o.r / 255,
                g = o.g / 255,
                b = o.b / 255,
                l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
                bl = b - l,
                k = (E * (g - l) - C * bl) / D,
                s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
                h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
            return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
        }

        function cubehelix(h, s, l, opacity) {
            return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
        }

        function Cubehelix(h, s, l, opacity) {
            this.h = +h;
            this.s = +s;
            this.l = +l;
            this.opacity = +opacity;
        }

        define(Cubehelix, cubehelix, extend(Color, {
            brighter: function(k) {
                k = k == null ? brighter : Math.pow(brighter, k);
                return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
            },
            darker: function(k) {
                k = k == null ? darker : Math.pow(darker, k);
                return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
            },
            rgb: function() {
                var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
                    l = +this.l,
                    a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
                    cosh = Math.cos(h),
                    sinh = Math.sin(h);
                return new Rgb(
                    255 * (l + a * (A * cosh + B * sinh)),
                    255 * (l + a * (C * cosh + D * sinh)),
                    255 * (l + a * (E * cosh)),
                    this.opacity
                );
            }
        }));

        exports.color = color;
        exports.rgb = rgb;
        exports.hsl = hsl;
        exports.lab = lab;
        exports.hcl = hcl;
        exports.cubehelix = cubehelix;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],45:[function(require,module,exports){
// https://d3js.org/d3-dispatch/ Version 1.0.3. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var noop = {value: function() {}};

        function dispatch() {
            for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
                if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
                _[t] = [];
            }
            return new Dispatch(_);
        }

        function Dispatch(_) {
            this._ = _;
        }

        function parseTypenames(typenames, types) {
            return typenames.trim().split(/^|\s+/).map(function(t) {
                var name = "", i = t.indexOf(".");
                if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
                if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
                return {type: t, name: name};
            });
        }

        Dispatch.prototype = dispatch.prototype = {
            constructor: Dispatch,
            on: function(typename, callback) {
                var _ = this._,
                    T = parseTypenames(typename + "", _),
                    t,
                    i = -1,
                    n = T.length;

                // If no callback was specified, return the callback of the given type and name.
                if (arguments.length < 2) {
                    while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
                    return;
                }

                // If a type was specified, set the callback for the given type and name.
                // Otherwise, if a null callback was specified, remove callbacks of the given name.
                if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
                while (++i < n) {
                    if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
                    else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
                }

                return this;
            },
            copy: function() {
                var copy = {}, _ = this._;
                for (var t in _) copy[t] = _[t].slice();
                return new Dispatch(copy);
            },
            call: function(type, that) {
                if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
                if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
                for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
            },
            apply: function(type, that, args) {
                if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
                for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
            }
        };

        function get(type, name) {
            for (var i = 0, n = type.length, c; i < n; ++i) {
                if ((c = type[i]).name === name) {
                    return c.value;
                }
            }
        }

        function set(type, name, callback) {
            for (var i = 0, n = type.length; i < n; ++i) {
                if (type[i].name === name) {
                    type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
                    break;
                }
            }
            if (callback != null) type.push({name: name, value: callback});
            return type;
        }

        exports.dispatch = dispatch;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],46:[function(require,module,exports){
// https://d3js.org/d3-drag/ Version 1.2.1. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-selection')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-selection'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3,global.d3));
    }(this, (function (exports,d3Dispatch,d3Selection) { 'use strict';

        function nopropagation() {
            d3Selection.event.stopImmediatePropagation();
        }

        var noevent = function() {
            d3Selection.event.preventDefault();
            d3Selection.event.stopImmediatePropagation();
        };

        var nodrag = function(view) {
            var root = view.document.documentElement,
                selection = d3Selection.select(view).on("dragstart.drag", noevent, true);
            if ("onselectstart" in root) {
                selection.on("selectstart.drag", noevent, true);
            } else {
                root.__noselect = root.style.MozUserSelect;
                root.style.MozUserSelect = "none";
            }
        };

        function yesdrag(view, noclick) {
            var root = view.document.documentElement,
                selection = d3Selection.select(view).on("dragstart.drag", null);
            if (noclick) {
                selection.on("click.drag", noevent, true);
                setTimeout(function() { selection.on("click.drag", null); }, 0);
            }
            if ("onselectstart" in root) {
                selection.on("selectstart.drag", null);
            } else {
                root.style.MozUserSelect = root.__noselect;
                delete root.__noselect;
            }
        }

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch$$1) {
            this.target = target;
            this.type = type;
            this.subject = subject;
            this.identifier = id;
            this.active = active;
            this.x = x;
            this.y = y;
            this.dx = dx;
            this.dy = dy;
            this._ = dispatch$$1;
        }

        DragEvent.prototype.on = function() {
            var value = this._.on.apply(this._, arguments);
            return value === this._ ? this : value;
        };

// Ignore right-click, since that should open the context menu.
        function defaultFilter() {
            return !d3Selection.event.button;
        }

        function defaultContainer() {
            return this.parentNode;
        }

        function defaultSubject(d) {
            return d == null ? {x: d3Selection.event.x, y: d3Selection.event.y} : d;
        }

        function defaultTouchable() {
            return "ontouchstart" in this;
        }

        var drag = function() {
            var filter = defaultFilter,
                container = defaultContainer,
                subject = defaultSubject,
                touchable = defaultTouchable,
                gestures = {},
                listeners = d3Dispatch.dispatch("start", "drag", "end"),
                active = 0,
                mousedownx,
                mousedowny,
                mousemoving,
                touchending,
                clickDistance2 = 0;

            function drag(selection) {
                selection
                    .on("mousedown.drag", mousedowned)
                    .filter(touchable)
                    .on("touchstart.drag", touchstarted)
                    .on("touchmove.drag", touchmoved)
                    .on("touchend.drag touchcancel.drag", touchended)
                    .style("touch-action", "none")
                    .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
            }

            function mousedowned() {
                if (touchending || !filter.apply(this, arguments)) return;
                var gesture = beforestart("mouse", container.apply(this, arguments), d3Selection.mouse, this, arguments);
                if (!gesture) return;
                d3Selection.select(d3Selection.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
                nodrag(d3Selection.event.view);
                nopropagation();
                mousemoving = false;
                mousedownx = d3Selection.event.clientX;
                mousedowny = d3Selection.event.clientY;
                gesture("start");
            }

            function mousemoved() {
                noevent();
                if (!mousemoving) {
                    var dx = d3Selection.event.clientX - mousedownx, dy = d3Selection.event.clientY - mousedowny;
                    mousemoving = dx * dx + dy * dy > clickDistance2;
                }
                gestures.mouse("drag");
            }

            function mouseupped() {
                d3Selection.select(d3Selection.event.view).on("mousemove.drag mouseup.drag", null);
                yesdrag(d3Selection.event.view, mousemoving);
                noevent();
                gestures.mouse("end");
            }

            function touchstarted() {
                if (!filter.apply(this, arguments)) return;
                var touches = d3Selection.event.changedTouches,
                    c = container.apply(this, arguments),
                    n = touches.length, i, gesture;

                for (i = 0; i < n; ++i) {
                    if (gesture = beforestart(touches[i].identifier, c, d3Selection.touch, this, arguments)) {
                        nopropagation();
                        gesture("start");
                    }
                }
            }

            function touchmoved() {
                var touches = d3Selection.event.changedTouches,
                    n = touches.length, i, gesture;

                for (i = 0; i < n; ++i) {
                    if (gesture = gestures[touches[i].identifier]) {
                        noevent();
                        gesture("drag");
                    }
                }
            }

            function touchended() {
                var touches = d3Selection.event.changedTouches,
                    n = touches.length, i, gesture;

                if (touchending) clearTimeout(touchending);
                touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
                for (i = 0; i < n; ++i) {
                    if (gesture = gestures[touches[i].identifier]) {
                        nopropagation();
                        gesture("end");
                    }
                }
            }

            function beforestart(id, container, point, that, args) {
                var p = point(container, id), s, dx, dy,
                    sublisteners = listeners.copy();

                if (!d3Selection.customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
                        if ((d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;
                        dx = s.x - p[0] || 0;
                        dy = s.y - p[1] || 0;
                        return true;
                    })) return;

                return function gesture(type) {
                    var p0 = p, n;
                    switch (type) {
                        case "start": gestures[id] = gesture, n = active++; break;
                        case "end": delete gestures[id], --active; // nobreak
                        case "drag": p = point(container, id), n = active; break;
                    }
                    d3Selection.customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
                };
            }

            drag.filter = function(_) {
                return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), drag) : filter;
            };

            drag.container = function(_) {
                return arguments.length ? (container = typeof _ === "function" ? _ : constant(_), drag) : container;
            };

            drag.subject = function(_) {
                return arguments.length ? (subject = typeof _ === "function" ? _ : constant(_), drag) : subject;
            };

            drag.touchable = function(_) {
                return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), drag) : touchable;
            };

            drag.on = function() {
                var value = listeners.on.apply(listeners, arguments);
                return value === listeners ? drag : value;
            };

            drag.clickDistance = function(_) {
                return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
            };

            return drag;
        };

        exports.drag = drag;
        exports.dragDisable = nodrag;
        exports.dragEnable = yesdrag;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-dispatch":45,"d3-selection":61}],47:[function(require,module,exports){
// https://d3js.org/d3-dsv/ Version 1.0.8. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var EOL = {};
        var EOF = {};
        var QUOTE = 34;
        var NEWLINE = 10;
        var RETURN = 13;

        function objectConverter(columns) {
            return new Function("d", "return {" + columns.map(function(name, i) {
                    return JSON.stringify(name) + ": d[" + i + "]";
                }).join(",") + "}");
        }

        function customConverter(columns, f) {
            var object = objectConverter(columns);
            return function(row, i) {
                return f(object(row), i, columns);
            };
        }

// Compute unique columns in order of discovery.
        function inferColumns(rows) {
            var columnSet = Object.create(null),
                columns = [];

            rows.forEach(function(row) {
                for (var column in row) {
                    if (!(column in columnSet)) {
                        columns.push(columnSet[column] = column);
                    }
                }
            });

            return columns;
        }

        var dsv = function(delimiter) {
            var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
                DELIMITER = delimiter.charCodeAt(0);

            function parse(text, f) {
                var convert, columns, rows = parseRows(text, function(row, i) {
                    if (convert) return convert(row, i - 1);
                    columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
                });
                rows.columns = columns || [];
                return rows;
            }

            function parseRows(text, f) {
                var rows = [], // output rows
                    N = text.length,
                    I = 0, // current character index
                    n = 0, // current line number
                    t, // current token
                    eof = N <= 0, // current token followed by EOF?
                    eol = false; // current token followed by EOL?

                // Strip the trailing newline.
                if (text.charCodeAt(N - 1) === NEWLINE) --N;
                if (text.charCodeAt(N - 1) === RETURN) --N;

                function token() {
                    if (eof) return EOF;
                    if (eol) return eol = false, EOL;

                    // Unescape quotes.
                    var i, j = I, c;
                    if (text.charCodeAt(j) === QUOTE) {
                        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
                        if ((i = I) >= N) eof = true;
                        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
                        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
                        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
                    }

                    // Find next delimiter or newline.
                    while (I < N) {
                        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
                        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
                        else if (c !== DELIMITER) continue;
                        return text.slice(j, i);
                    }

                    // Return last token before EOF.
                    return eof = true, text.slice(j, N);
                }

                while ((t = token()) !== EOF) {
                    var row = [];
                    while (t !== EOL && t !== EOF) row.push(t), t = token();
                    if (f && (row = f(row, n++)) == null) continue;
                    rows.push(row);
                }

                return rows;
            }

            function format(rows, columns) {
                if (columns == null) columns = inferColumns(rows);
                return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
                    return columns.map(function(column) {
                        return formatValue(row[column]);
                    }).join(delimiter);
                })).join("\n");
            }

            function formatRows(rows) {
                return rows.map(formatRow).join("\n");
            }

            function formatRow(row) {
                return row.map(formatValue).join(delimiter);
            }

            function formatValue(text) {
                return text == null ? ""
                    : reFormat.test(text += "") ? "\"" + text.replace(/"/g, "\"\"") + "\""
                        : text;
            }

            return {
                parse: parse,
                parseRows: parseRows,
                format: format,
                formatRows: formatRows
            };
        };

        var csv = dsv(",");

        var csvParse = csv.parse;
        var csvParseRows = csv.parseRows;
        var csvFormat = csv.format;
        var csvFormatRows = csv.formatRows;

        var tsv = dsv("\t");

        var tsvParse = tsv.parse;
        var tsvParseRows = tsv.parseRows;
        var tsvFormat = tsv.format;
        var tsvFormatRows = tsv.formatRows;

        exports.dsvFormat = dsv;
        exports.csvParse = csvParse;
        exports.csvParseRows = csvParseRows;
        exports.csvFormat = csvFormat;
        exports.csvFormatRows = csvFormatRows;
        exports.tsvParse = tsvParse;
        exports.tsvParseRows = tsvParseRows;
        exports.tsvFormat = tsvFormat;
        exports.tsvFormatRows = tsvFormatRows;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],48:[function(require,module,exports){
// https://d3js.org/d3-ease/ Version 1.0.3. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        function linear(t) {
            return +t;
        }

        function quadIn(t) {
            return t * t;
        }

        function quadOut(t) {
            return t * (2 - t);
        }

        function quadInOut(t) {
            return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
        }

        function cubicIn(t) {
            return t * t * t;
        }

        function cubicOut(t) {
            return --t * t * t + 1;
        }

        function cubicInOut(t) {
            return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
        }

        var exponent = 3;

        var polyIn = (function custom(e) {
            e = +e;

            function polyIn(t) {
                return Math.pow(t, e);
            }

            polyIn.exponent = custom;

            return polyIn;
        })(exponent);

        var polyOut = (function custom(e) {
            e = +e;

            function polyOut(t) {
                return 1 - Math.pow(1 - t, e);
            }

            polyOut.exponent = custom;

            return polyOut;
        })(exponent);

        var polyInOut = (function custom(e) {
            e = +e;

            function polyInOut(t) {
                return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
            }

            polyInOut.exponent = custom;

            return polyInOut;
        })(exponent);

        var pi = Math.PI;
        var halfPi = pi / 2;

        function sinIn(t) {
            return 1 - Math.cos(t * halfPi);
        }

        function sinOut(t) {
            return Math.sin(t * halfPi);
        }

        function sinInOut(t) {
            return (1 - Math.cos(pi * t)) / 2;
        }

        function expIn(t) {
            return Math.pow(2, 10 * t - 10);
        }

        function expOut(t) {
            return 1 - Math.pow(2, -10 * t);
        }

        function expInOut(t) {
            return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
        }

        function circleIn(t) {
            return 1 - Math.sqrt(1 - t * t);
        }

        function circleOut(t) {
            return Math.sqrt(1 - --t * t);
        }

        function circleInOut(t) {
            return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
        }

        var b1 = 4 / 11;
        var b2 = 6 / 11;
        var b3 = 8 / 11;
        var b4 = 3 / 4;
        var b5 = 9 / 11;
        var b6 = 10 / 11;
        var b7 = 15 / 16;
        var b8 = 21 / 22;
        var b9 = 63 / 64;
        var b0 = 1 / b1 / b1;

        function bounceIn(t) {
            return 1 - bounceOut(1 - t);
        }

        function bounceOut(t) {
            return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
        }

        function bounceInOut(t) {
            return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
        }

        var overshoot = 1.70158;

        var backIn = (function custom(s) {
            s = +s;

            function backIn(t) {
                return t * t * ((s + 1) * t - s);
            }

            backIn.overshoot = custom;

            return backIn;
        })(overshoot);

        var backOut = (function custom(s) {
            s = +s;

            function backOut(t) {
                return --t * t * ((s + 1) * t + s) + 1;
            }

            backOut.overshoot = custom;

            return backOut;
        })(overshoot);

        var backInOut = (function custom(s) {
            s = +s;

            function backInOut(t) {
                return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
            }

            backInOut.overshoot = custom;

            return backInOut;
        })(overshoot);

        var tau = 2 * Math.PI;
        var amplitude = 1;
        var period = 0.3;

        var elasticIn = (function custom(a, p) {
            var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

            function elasticIn(t) {
                return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
            }

            elasticIn.amplitude = function(a) { return custom(a, p * tau); };
            elasticIn.period = function(p) { return custom(a, p); };

            return elasticIn;
        })(amplitude, period);

        var elasticOut = (function custom(a, p) {
            var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

            function elasticOut(t) {
                return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
            }

            elasticOut.amplitude = function(a) { return custom(a, p * tau); };
            elasticOut.period = function(p) { return custom(a, p); };

            return elasticOut;
        })(amplitude, period);

        var elasticInOut = (function custom(a, p) {
            var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

            function elasticInOut(t) {
                return ((t = t * 2 - 1) < 0
                        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
                        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
            }

            elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
            elasticInOut.period = function(p) { return custom(a, p); };

            return elasticInOut;
        })(amplitude, period);

        exports.easeLinear = linear;
        exports.easeQuad = quadInOut;
        exports.easeQuadIn = quadIn;
        exports.easeQuadOut = quadOut;
        exports.easeQuadInOut = quadInOut;
        exports.easeCubic = cubicInOut;
        exports.easeCubicIn = cubicIn;
        exports.easeCubicOut = cubicOut;
        exports.easeCubicInOut = cubicInOut;
        exports.easePoly = polyInOut;
        exports.easePolyIn = polyIn;
        exports.easePolyOut = polyOut;
        exports.easePolyInOut = polyInOut;
        exports.easeSin = sinInOut;
        exports.easeSinIn = sinIn;
        exports.easeSinOut = sinOut;
        exports.easeSinInOut = sinInOut;
        exports.easeExp = expInOut;
        exports.easeExpIn = expIn;
        exports.easeExpOut = expOut;
        exports.easeExpInOut = expInOut;
        exports.easeCircle = circleInOut;
        exports.easeCircleIn = circleIn;
        exports.easeCircleOut = circleOut;
        exports.easeCircleInOut = circleInOut;
        exports.easeBounce = bounceOut;
        exports.easeBounceIn = bounceIn;
        exports.easeBounceOut = bounceOut;
        exports.easeBounceInOut = bounceInOut;
        exports.easeBack = backInOut;
        exports.easeBackIn = backIn;
        exports.easeBackOut = backOut;
        exports.easeBackInOut = backInOut;
        exports.easeElastic = elasticOut;
        exports.easeElasticIn = elasticIn;
        exports.easeElasticOut = elasticOut;
        exports.easeElasticInOut = elasticInOut;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],49:[function(require,module,exports){
// https://d3js.org/d3-force/ Version 1.1.0. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-quadtree'), require('d3-collection'), require('d3-dispatch'), require('d3-timer')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));
    }(this, (function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';

        var center = function(x, y) {
            var nodes;

            if (x == null) x = 0;
            if (y == null) y = 0;

            function force() {
                var i,
                    n = nodes.length,
                    node,
                    sx = 0,
                    sy = 0;

                for (i = 0; i < n; ++i) {
                    node = nodes[i], sx += node.x, sy += node.y;
                }

                for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
                    node = nodes[i], node.x -= sx, node.y -= sy;
                }
            }

            force.initialize = function(_) {
                nodes = _;
            };

            force.x = function(_) {
                return arguments.length ? (x = +_, force) : x;
            };

            force.y = function(_) {
                return arguments.length ? (y = +_, force) : y;
            };

            return force;
        };

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        var jiggle = function() {
            return (Math.random() - 0.5) * 1e-6;
        };

        function x(d) {
            return d.x + d.vx;
        }

        function y(d) {
            return d.y + d.vy;
        }

        var collide = function(radius) {
            var nodes,
                radii,
                strength = 1,
                iterations = 1;

            if (typeof radius !== "function") radius = constant(radius == null ? 1 : +radius);

            function force() {
                var i, n = nodes.length,
                    tree,
                    node,
                    xi,
                    yi,
                    ri,
                    ri2;

                for (var k = 0; k < iterations; ++k) {
                    tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);
                    for (i = 0; i < n; ++i) {
                        node = nodes[i];
                        ri = radii[node.index], ri2 = ri * ri;
                        xi = node.x + node.vx;
                        yi = node.y + node.vy;
                        tree.visit(apply);
                    }
                }

                function apply(quad, x0, y0, x1, y1) {
                    var data = quad.data, rj = quad.r, r = ri + rj;
                    if (data) {
                        if (data.index > node.index) {
                            var x = xi - data.x - data.vx,
                                y = yi - data.y - data.vy,
                                l = x * x + y * y;
                            if (l < r * r) {
                                if (x === 0) x = jiggle(), l += x * x;
                                if (y === 0) y = jiggle(), l += y * y;
                                l = (r - (l = Math.sqrt(l))) / l * strength;
                                node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                                node.vy += (y *= l) * r;
                                data.vx -= x * (r = 1 - r);
                                data.vy -= y * r;
                            }
                        }
                        return;
                    }
                    return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
                }
            }

            function prepare(quad) {
                if (quad.data) return quad.r = radii[quad.data.index];
                for (var i = quad.r = 0; i < 4; ++i) {
                    if (quad[i] && quad[i].r > quad.r) {
                        quad.r = quad[i].r;
                    }
                }
            }

            function initialize() {
                if (!nodes) return;
                var i, n = nodes.length, node;
                radii = new Array(n);
                for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
            }

            force.initialize = function(_) {
                nodes = _;
                initialize();
            };

            force.iterations = function(_) {
                return arguments.length ? (iterations = +_, force) : iterations;
            };

            force.strength = function(_) {
                return arguments.length ? (strength = +_, force) : strength;
            };

            force.radius = function(_) {
                return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
            };

            return force;
        };

        function index(d) {
            return d.index;
        }

        function find(nodeById, nodeId) {
            var node = nodeById.get(nodeId);
            if (!node) throw new Error("missing: " + nodeId);
            return node;
        }

        var link = function(links) {
            var id = index,
                strength = defaultStrength,
                strengths,
                distance = constant(30),
                distances,
                nodes,
                count,
                bias,
                iterations = 1;

            if (links == null) links = [];

            function defaultStrength(link) {
                return 1 / Math.min(count[link.source.index], count[link.target.index]);
            }

            function force(alpha) {
                for (var k = 0, n = links.length; k < iterations; ++k) {
                    for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
                        link = links[i], source = link.source, target = link.target;
                        x = target.x + target.vx - source.x - source.vx || jiggle();
                        y = target.y + target.vy - source.y - source.vy || jiggle();
                        l = Math.sqrt(x * x + y * y);
                        l = (l - distances[i]) / l * alpha * strengths[i];
                        x *= l, y *= l;
                        target.vx -= x * (b = bias[i]);
                        target.vy -= y * b;
                        source.vx += x * (b = 1 - b);
                        source.vy += y * b;
                    }
                }
            }

            function initialize() {
                if (!nodes) return;

                var i,
                    n = nodes.length,
                    m = links.length,
                    nodeById = d3Collection.map(nodes, id),
                    link;

                for (i = 0, count = new Array(n); i < m; ++i) {
                    link = links[i], link.index = i;
                    if (typeof link.source !== "object") link.source = find(nodeById, link.source);
                    if (typeof link.target !== "object") link.target = find(nodeById, link.target);
                    count[link.source.index] = (count[link.source.index] || 0) + 1;
                    count[link.target.index] = (count[link.target.index] || 0) + 1;
                }

                for (i = 0, bias = new Array(m); i < m; ++i) {
                    link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
                }

                strengths = new Array(m), initializeStrength();
                distances = new Array(m), initializeDistance();
            }

            function initializeStrength() {
                if (!nodes) return;

                for (var i = 0, n = links.length; i < n; ++i) {
                    strengths[i] = +strength(links[i], i, links);
                }
            }

            function initializeDistance() {
                if (!nodes) return;

                for (var i = 0, n = links.length; i < n; ++i) {
                    distances[i] = +distance(links[i], i, links);
                }
            }

            force.initialize = function(_) {
                nodes = _;
                initialize();
            };

            force.links = function(_) {
                return arguments.length ? (links = _, initialize(), force) : links;
            };

            force.id = function(_) {
                return arguments.length ? (id = _, force) : id;
            };

            force.iterations = function(_) {
                return arguments.length ? (iterations = +_, force) : iterations;
            };

            force.strength = function(_) {
                return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initializeStrength(), force) : strength;
            };

            force.distance = function(_) {
                return arguments.length ? (distance = typeof _ === "function" ? _ : constant(+_), initializeDistance(), force) : distance;
            };

            return force;
        };

        function x$1(d) {
            return d.x;
        }

        function y$1(d) {
            return d.y;
        }

        var initialRadius = 10;
        var initialAngle = Math.PI * (3 - Math.sqrt(5));

        var simulation = function(nodes) {
            var simulation,
                alpha = 1,
                alphaMin = 0.001,
                alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
                alphaTarget = 0,
                velocityDecay = 0.6,
                forces = d3Collection.map(),
                stepper = d3Timer.timer(step),
                event = d3Dispatch.dispatch("tick", "end");

            if (nodes == null) nodes = [];

            function step() {
                tick();
                event.call("tick", simulation);
                if (alpha < alphaMin) {
                    stepper.stop();
                    event.call("end", simulation);
                }
            }

            function tick() {
                var i, n = nodes.length, node;

                alpha += (alphaTarget - alpha) * alphaDecay;

                forces.each(function(force) {
                    force(alpha);
                });

                for (i = 0; i < n; ++i) {
                    node = nodes[i];
                    if (node.fx == null) node.x += node.vx *= velocityDecay;
                    else node.x = node.fx, node.vx = 0;
                    if (node.fy == null) node.y += node.vy *= velocityDecay;
                    else node.y = node.fy, node.vy = 0;
                }
            }

            function initializeNodes() {
                for (var i = 0, n = nodes.length, node; i < n; ++i) {
                    node = nodes[i], node.index = i;
                    if (isNaN(node.x) || isNaN(node.y)) {
                        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
                        node.x = radius * Math.cos(angle);
                        node.y = radius * Math.sin(angle);
                    }
                    if (isNaN(node.vx) || isNaN(node.vy)) {
                        node.vx = node.vy = 0;
                    }
                }
            }

            function initializeForce(force) {
                if (force.initialize) force.initialize(nodes);
                return force;
            }

            initializeNodes();

            return simulation = {
                tick: tick,

                restart: function() {
                    return stepper.restart(step), simulation;
                },

                stop: function() {
                    return stepper.stop(), simulation;
                },

                nodes: function(_) {
                    return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
                },

                alpha: function(_) {
                    return arguments.length ? (alpha = +_, simulation) : alpha;
                },

                alphaMin: function(_) {
                    return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
                },

                alphaDecay: function(_) {
                    return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
                },

                alphaTarget: function(_) {
                    return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
                },

                velocityDecay: function(_) {
                    return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
                },

                force: function(name, _) {
                    return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
                },

                find: function(x, y, radius) {
                    var i = 0,
                        n = nodes.length,
                        dx,
                        dy,
                        d2,
                        node,
                        closest;

                    if (radius == null) radius = Infinity;
                    else radius *= radius;

                    for (i = 0; i < n; ++i) {
                        node = nodes[i];
                        dx = x - node.x;
                        dy = y - node.y;
                        d2 = dx * dx + dy * dy;
                        if (d2 < radius) closest = node, radius = d2;
                    }

                    return closest;
                },

                on: function(name, _) {
                    return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
                }
            };
        };

        var manyBody = function() {
            var nodes,
                node,
                alpha,
                strength = constant(-30),
                strengths,
                distanceMin2 = 1,
                distanceMax2 = Infinity,
                theta2 = 0.81;

            function force(_) {
                var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);
                for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
            }

            function initialize() {
                if (!nodes) return;
                var i, n = nodes.length, node;
                strengths = new Array(n);
                for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
            }

            function accumulate(quad) {
                var strength = 0, q, c, weight = 0, x, y, i;

                // For internal nodes, accumulate forces from child quadrants.
                if (quad.length) {
                    for (x = y = i = 0; i < 4; ++i) {
                        if ((q = quad[i]) && (c = Math.abs(q.value))) {
                            strength += q.value, weight += c, x += c * q.x, y += c * q.y;
                        }
                    }
                    quad.x = x / weight;
                    quad.y = y / weight;
                }

                // For leaf nodes, accumulate forces from coincident quadrants.
                else {
                    q = quad;
                    q.x = q.data.x;
                    q.y = q.data.y;
                    do strength += strengths[q.data.index];
                    while (q = q.next);
                }

                quad.value = strength;
            }

            function apply(quad, x1, _, x2) {
                if (!quad.value) return true;

                var x = quad.x - node.x,
                    y = quad.y - node.y,
                    w = x2 - x1,
                    l = x * x + y * y;

                // Apply the Barnes-Hut approximation if possible.
                // Limit forces for very close nodes; randomize direction if coincident.
                if (w * w / theta2 < l) {
                    if (l < distanceMax2) {
                        if (x === 0) x = jiggle(), l += x * x;
                        if (y === 0) y = jiggle(), l += y * y;
                        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
                        node.vx += x * quad.value * alpha / l;
                        node.vy += y * quad.value * alpha / l;
                    }
                    return true;
                }

                // Otherwise, process points directly.
                else if (quad.length || l >= distanceMax2) return;

                // Limit forces for very close nodes; randomize direction if coincident.
                if (quad.data !== node || quad.next) {
                    if (x === 0) x = jiggle(), l += x * x;
                    if (y === 0) y = jiggle(), l += y * y;
                    if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
                }

                do if (quad.data !== node) {
                    w = strengths[quad.data.index] * alpha / l;
                    node.vx += x * w;
                    node.vy += y * w;
                } while (quad = quad.next);
            }

            force.initialize = function(_) {
                nodes = _;
                initialize();
            };

            force.strength = function(_) {
                return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
            };

            force.distanceMin = function(_) {
                return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
            };

            force.distanceMax = function(_) {
                return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
            };

            force.theta = function(_) {
                return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
            };

            return force;
        };

        var radial = function(radius, x, y) {
            var nodes,
                strength = constant(0.1),
                strengths,
                radiuses;

            if (typeof radius !== "function") radius = constant(+radius);
            if (x == null) x = 0;
            if (y == null) y = 0;

            function force(alpha) {
                for (var i = 0, n = nodes.length; i < n; ++i) {
                    var node = nodes[i],
                        dx = node.x - x || 1e-6,
                        dy = node.y - y || 1e-6,
                        r = Math.sqrt(dx * dx + dy * dy),
                        k = (radiuses[i] - r) * strengths[i] * alpha / r;
                    node.vx += dx * k;
                    node.vy += dy * k;
                }
            }

            function initialize() {
                if (!nodes) return;
                var i, n = nodes.length;
                strengths = new Array(n);
                radiuses = new Array(n);
                for (i = 0; i < n; ++i) {
                    radiuses[i] = +radius(nodes[i], i, nodes);
                    strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
                }
            }

            force.initialize = function(_) {
                nodes = _, initialize();
            };

            force.strength = function(_) {
                return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
            };

            force.radius = function(_) {
                return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
            };

            force.x = function(_) {
                return arguments.length ? (x = +_, force) : x;
            };

            force.y = function(_) {
                return arguments.length ? (y = +_, force) : y;
            };

            return force;
        };

        var x$2 = function(x) {
            var strength = constant(0.1),
                nodes,
                strengths,
                xz;

            if (typeof x !== "function") x = constant(x == null ? 0 : +x);

            function force(alpha) {
                for (var i = 0, n = nodes.length, node; i < n; ++i) {
                    node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
                }
            }

            function initialize() {
                if (!nodes) return;
                var i, n = nodes.length;
                strengths = new Array(n);
                xz = new Array(n);
                for (i = 0; i < n; ++i) {
                    strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
                }
            }

            force.initialize = function(_) {
                nodes = _;
                initialize();
            };

            force.strength = function(_) {
                return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
            };

            force.x = function(_) {
                return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), initialize(), force) : x;
            };

            return force;
        };

        var y$2 = function(y) {
            var strength = constant(0.1),
                nodes,
                strengths,
                yz;

            if (typeof y !== "function") y = constant(y == null ? 0 : +y);

            function force(alpha) {
                for (var i = 0, n = nodes.length, node; i < n; ++i) {
                    node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
                }
            }

            function initialize() {
                if (!nodes) return;
                var i, n = nodes.length;
                strengths = new Array(n);
                yz = new Array(n);
                for (i = 0; i < n; ++i) {
                    strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
                }
            }

            force.initialize = function(_) {
                nodes = _;
                initialize();
            };

            force.strength = function(_) {
                return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
            };

            force.y = function(_) {
                return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), initialize(), force) : y;
            };

            return force;
        };

        exports.forceCenter = center;
        exports.forceCollide = collide;
        exports.forceLink = link;
        exports.forceManyBody = manyBody;
        exports.forceRadial = radial;
        exports.forceSimulation = simulation;
        exports.forceX = x$2;
        exports.forceY = y$2;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-collection":43,"d3-dispatch":45,"d3-quadtree":56,"d3-timer":65}],50:[function(require,module,exports){
// https://d3js.org/d3-format/ Version 1.2.1. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
        var formatDecimal = function(x, p) {
            if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
            var i, coefficient = x.slice(0, i);

            // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
            // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
            return [
                coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
                +x.slice(i + 1)
            ];
        };

        var exponent = function(x) {
            return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
        };

        var formatGroup = function(grouping, thousands) {
            return function(value, width) {
                var i = value.length,
                    t = [],
                    j = 0,
                    g = grouping[0],
                    length = 0;

                while (i > 0 && g > 0) {
                    if (length + g + 1 > width) g = Math.max(1, width - length);
                    t.push(value.substring(i -= g, i + g));
                    if ((length += g + 1) > width) break;
                    g = grouping[j = (j + 1) % grouping.length];
                }

                return t.reverse().join(thousands);
            };
        };

        var formatNumerals = function(numerals) {
            return function(value) {
                return value.replace(/[0-9]/g, function(i) {
                    return numerals[+i];
                });
            };
        };

        var formatDefault = function(x, p) {
            x = x.toPrecision(p);

            out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
                switch (x[i]) {
                    case ".": i0 = i1 = i; break;
                    case "0": if (i0 === 0) i0 = i; i1 = i; break;
                    case "e": break out;
                    default: if (i0 > 0) i0 = 0; break;
                }
            }

            return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
        };

        var prefixExponent;

        var formatPrefixAuto = function(x, p) {
            var d = formatDecimal(x, p);
            if (!d) return x + "";
            var coefficient = d[0],
                exponent = d[1],
                i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
                n = coefficient.length;
            return i === n ? coefficient
                : i > n ? coefficient + new Array(i - n + 1).join("0")
                    : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
                        : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
        };

        var formatRounded = function(x, p) {
            var d = formatDecimal(x, p);
            if (!d) return x + "";
            var coefficient = d[0],
                exponent = d[1];
            return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
                : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
                    : coefficient + new Array(exponent - coefficient.length + 2).join("0");
        };

        var formatTypes = {
            "": formatDefault,
            "%": function(x, p) { return (x * 100).toFixed(p); },
            "b": function(x) { return Math.round(x).toString(2); },
            "c": function(x) { return x + ""; },
            "d": function(x) { return Math.round(x).toString(10); },
            "e": function(x, p) { return x.toExponential(p); },
            "f": function(x, p) { return x.toFixed(p); },
            "g": function(x, p) { return x.toPrecision(p); },
            "o": function(x) { return Math.round(x).toString(8); },
            "p": function(x, p) { return formatRounded(x * 100, p); },
            "r": formatRounded,
            "s": formatPrefixAuto,
            "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
            "x": function(x) { return Math.round(x).toString(16); }
        };

// [[fill]align][sign][symbol][0][width][,][.precision][type]
        var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

        function formatSpecifier(specifier) {
            return new FormatSpecifier(specifier);
        }

        formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

        function FormatSpecifier(specifier) {
            if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

            var match,
                fill = match[1] || " ",
                align = match[2] || ">",
                sign = match[3] || "-",
                symbol = match[4] || "",
                zero = !!match[5],
                width = match[6] && +match[6],
                comma = !!match[7],
                precision = match[8] && +match[8].slice(1),
                type = match[9] || "";

            // The "n" type is an alias for ",g".
            if (type === "n") comma = true, type = "g";

            // Map invalid types to the default format.
            else if (!formatTypes[type]) type = "";

            // If zero fill is specified, padding goes after sign and before digits.
            if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

            this.fill = fill;
            this.align = align;
            this.sign = sign;
            this.symbol = symbol;
            this.zero = zero;
            this.width = width;
            this.comma = comma;
            this.precision = precision;
            this.type = type;
        }

        FormatSpecifier.prototype.toString = function() {
            return this.fill
                + this.align
                + this.sign
                + this.symbol
                + (this.zero ? "0" : "")
                + (this.width == null ? "" : Math.max(1, this.width | 0))
                + (this.comma ? "," : "")
                + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
                + this.type;
        };

        var identity = function(x) {
            return x;
        };

        var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

        var formatLocale = function(locale) {
            var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,
                currency = locale.currency,
                decimal = locale.decimal,
                numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,
                percent = locale.percent || "%";

            function newFormat(specifier) {
                specifier = formatSpecifier(specifier);

                var fill = specifier.fill,
                    align = specifier.align,
                    sign = specifier.sign,
                    symbol = specifier.symbol,
                    zero = specifier.zero,
                    width = specifier.width,
                    comma = specifier.comma,
                    precision = specifier.precision,
                    type = specifier.type;

                // Compute the prefix and suffix.
                // For SI-prefix, the suffix is lazily computed.
                var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
                    suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

                // What format function should we use?
                // Is this an integer type?
                // Can this type generate exponential notation?
                var formatType = formatTypes[type],
                    maybeSuffix = !type || /[defgprs%]/.test(type);

                // Set the default precision if not specified,
                // or clamp the specified precision to the supported range.
                // For significant precision, it must be in [1, 21].
                // For fixed precision, it must be in [0, 20].
                precision = precision == null ? (type ? 6 : 12)
                    : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
                        : Math.max(0, Math.min(20, precision));

                function format(value) {
                    var valuePrefix = prefix,
                        valueSuffix = suffix,
                        i, n, c;

                    if (type === "c") {
                        valueSuffix = formatType(value) + valueSuffix;
                        value = "";
                    } else {
                        value = +value;

                        // Perform the initial formatting.
                        var valueNegative = value < 0;
                        value = formatType(Math.abs(value), precision);

                        // If a negative value rounds to zero during formatting, treat as positive.
                        if (valueNegative && +value === 0) valueNegative = false;

                        // Compute the prefix and suffix.
                        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");

                        // Break the formatted value into the integer “value” part that can be
                        // grouped, and fractional or exponential “suffix” part that is not.
                        if (maybeSuffix) {
                            i = -1, n = value.length;
                            while (++i < n) {
                                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                                    valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                                    value = value.slice(0, i);
                                    break;
                                }
                            }
                        }
                    }

                    // If the fill character is not "0", grouping is applied before padding.
                    if (comma && !zero) value = group(value, Infinity);

                    // Compute the padding.
                    var length = valuePrefix.length + value.length + valueSuffix.length,
                        padding = length < width ? new Array(width - length + 1).join(fill) : "";

                    // If the fill character is "0", grouping is applied after padding.
                    if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

                    // Reconstruct the final output based on the desired alignment.
                    switch (align) {
                        case "<": value = valuePrefix + value + valueSuffix + padding; break;
                        case "=": value = valuePrefix + padding + value + valueSuffix; break;
                        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
                        default: value = padding + valuePrefix + value + valueSuffix; break;
                    }

                    return numerals(value);
                }

                format.toString = function() {
                    return specifier + "";
                };

                return format;
            }

            function formatPrefix(specifier, value) {
                var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
                    e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
                    k = Math.pow(10, -e),
                    prefix = prefixes[8 + e / 3];
                return function(value) {
                    return f(k * value) + prefix;
                };
            }

            return {
                format: newFormat,
                formatPrefix: formatPrefix
            };
        };

        var locale;



        defaultLocale({
            decimal: ".",
            thousands: ",",
            grouping: [3],
            currency: ["$", ""]
        });

        function defaultLocale(definition) {
            locale = formatLocale(definition);
            exports.format = locale.format;
            exports.formatPrefix = locale.formatPrefix;
            return locale;
        }

        var precisionFixed = function(step) {
            return Math.max(0, -exponent(Math.abs(step)));
        };

        var precisionPrefix = function(step, value) {
            return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
        };

        var precisionRound = function(step, max) {
            step = Math.abs(step), max = Math.abs(max) - step;
            return Math.max(0, exponent(max) - exponent(step)) + 1;
        };

        exports.formatDefaultLocale = defaultLocale;
        exports.formatLocale = formatLocale;
        exports.formatSpecifier = formatSpecifier;
        exports.precisionFixed = precisionFixed;
        exports.precisionPrefix = precisionPrefix;
        exports.precisionRound = precisionRound;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],51:[function(require,module,exports){
// https://d3js.org/d3-geo/ Version 1.9.1. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3));
    }(this, (function (exports,d3Array) { 'use strict';

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/

        var adder = function() {
            return new Adder;
        };

        function Adder() {
            this.reset();
        }

        Adder.prototype = {
            constructor: Adder,
            reset: function() {
                this.s = // rounded value
                    this.t = 0; // exact error
            },
            add: function(y) {
                add(temp, y, this.t);
                add(this, temp.s, this.s);
                if (this.s) this.t += temp.t;
                else this.s = temp.t;
            },
            valueOf: function() {
                return this.s;
            }
        };

        var temp = new Adder;

        function add(adder, a, b) {
            var x = adder.s = a + b,
                bv = x - a,
                av = x - bv;
            adder.t = (a - av) + (b - bv);
        }

        var epsilon = 1e-6;
        var epsilon2 = 1e-12;
        var pi = Math.PI;
        var halfPi = pi / 2;
        var quarterPi = pi / 4;
        var tau = pi * 2;

        var degrees = 180 / pi;
        var radians = pi / 180;

        var abs = Math.abs;
        var atan = Math.atan;
        var atan2 = Math.atan2;
        var cos = Math.cos;
        var ceil = Math.ceil;
        var exp = Math.exp;

        var log = Math.log;
        var pow = Math.pow;
        var sin = Math.sin;
        var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
        var sqrt = Math.sqrt;
        var tan = Math.tan;

        function acos(x) {
            return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
        }

        function asin(x) {
            return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
        }

        function haversin(x) {
            return (x = sin(x / 2)) * x;
        }

        function noop() {}

        function streamGeometry(geometry, stream) {
            if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
                streamGeometryType[geometry.type](geometry, stream);
            }
        }

        var streamObjectType = {
            Feature: function(object, stream) {
                streamGeometry(object.geometry, stream);
            },
            FeatureCollection: function(object, stream) {
                var features = object.features, i = -1, n = features.length;
                while (++i < n) streamGeometry(features[i].geometry, stream);
            }
        };

        var streamGeometryType = {
            Sphere: function(object, stream) {
                stream.sphere();
            },
            Point: function(object, stream) {
                object = object.coordinates;
                stream.point(object[0], object[1], object[2]);
            },
            MultiPoint: function(object, stream) {
                var coordinates = object.coordinates, i = -1, n = coordinates.length;
                while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
            },
            LineString: function(object, stream) {
                streamLine(object.coordinates, stream, 0);
            },
            MultiLineString: function(object, stream) {
                var coordinates = object.coordinates, i = -1, n = coordinates.length;
                while (++i < n) streamLine(coordinates[i], stream, 0);
            },
            Polygon: function(object, stream) {
                streamPolygon(object.coordinates, stream);
            },
            MultiPolygon: function(object, stream) {
                var coordinates = object.coordinates, i = -1, n = coordinates.length;
                while (++i < n) streamPolygon(coordinates[i], stream);
            },
            GeometryCollection: function(object, stream) {
                var geometries = object.geometries, i = -1, n = geometries.length;
                while (++i < n) streamGeometry(geometries[i], stream);
            }
        };

        function streamLine(coordinates, stream, closed) {
            var i = -1, n = coordinates.length - closed, coordinate;
            stream.lineStart();
            while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
            stream.lineEnd();
        }

        function streamPolygon(coordinates, stream) {
            var i = -1, n = coordinates.length;
            stream.polygonStart();
            while (++i < n) streamLine(coordinates[i], stream, 1);
            stream.polygonEnd();
        }

        var geoStream = function(object, stream) {
            if (object && streamObjectType.hasOwnProperty(object.type)) {
                streamObjectType[object.type](object, stream);
            } else {
                streamGeometry(object, stream);
            }
        };

        var areaRingSum = adder();

        var areaSum = adder();
        var lambda00;
        var phi00;
        var lambda0;
        var cosPhi0;
        var sinPhi0;

        var areaStream = {
            point: noop,
            lineStart: noop,
            lineEnd: noop,
            polygonStart: function() {
                areaRingSum.reset();
                areaStream.lineStart = areaRingStart;
                areaStream.lineEnd = areaRingEnd;
            },
            polygonEnd: function() {
                var areaRing = +areaRingSum;
                areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
                this.lineStart = this.lineEnd = this.point = noop;
            },
            sphere: function() {
                areaSum.add(tau);
            }
        };

        function areaRingStart() {
            areaStream.point = areaPointFirst;
        }

        function areaRingEnd() {
            areaPoint(lambda00, phi00);
        }

        function areaPointFirst(lambda, phi) {
            areaStream.point = areaPoint;
            lambda00 = lambda, phi00 = phi;
            lambda *= radians, phi *= radians;
            lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
        }

        function areaPoint(lambda, phi) {
            lambda *= radians, phi *= radians;
            phi = phi / 2 + quarterPi; // half the angular distance from south pole

            // Spherical excess E for a spherical triangle with vertices: south pole,
            // previous point, current point.  Uses a formula derived from Cagnoli’s
            // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
            var dLambda = lambda - lambda0,
                sdLambda = dLambda >= 0 ? 1 : -1,
                adLambda = sdLambda * dLambda,
                cosPhi = cos(phi),
                sinPhi = sin(phi),
                k = sinPhi0 * sinPhi,
                u = cosPhi0 * cosPhi + k * cos(adLambda),
                v = k * sdLambda * sin(adLambda);
            areaRingSum.add(atan2(v, u));

            // Advance the previous points.
            lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
        }

        var area = function(object) {
            areaSum.reset();
            geoStream(object, areaStream);
            return areaSum * 2;
        };

        function spherical(cartesian) {
            return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
        }

        function cartesian(spherical) {
            var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);
            return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
        }

        function cartesianDot(a, b) {
            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
        }

        function cartesianCross(a, b) {
            return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
        }

// TODO return a
        function cartesianAddInPlace(a, b) {
            a[0] += b[0], a[1] += b[1], a[2] += b[2];
        }

        function cartesianScale(vector, k) {
            return [vector[0] * k, vector[1] * k, vector[2] * k];
        }

// TODO return d
        function cartesianNormalizeInPlace(d) {
            var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
            d[0] /= l, d[1] /= l, d[2] /= l;
        }

        var lambda0$1;
        var phi0;
        var lambda1;
        var phi1;
        var lambda2;
        var lambda00$1;
        var phi00$1;
        var p0;
        var deltaSum = adder();
        var ranges;
        var range$1;

        var boundsStream = {
            point: boundsPoint,
            lineStart: boundsLineStart,
            lineEnd: boundsLineEnd,
            polygonStart: function() {
                boundsStream.point = boundsRingPoint;
                boundsStream.lineStart = boundsRingStart;
                boundsStream.lineEnd = boundsRingEnd;
                deltaSum.reset();
                areaStream.polygonStart();
            },
            polygonEnd: function() {
                areaStream.polygonEnd();
                boundsStream.point = boundsPoint;
                boundsStream.lineStart = boundsLineStart;
                boundsStream.lineEnd = boundsLineEnd;
                if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
                else if (deltaSum > epsilon) phi1 = 90;
                else if (deltaSum < -epsilon) phi0 = -90;
                range$1[0] = lambda0$1, range$1[1] = lambda1;
            }
        };

        function boundsPoint(lambda, phi) {
            ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
            if (phi < phi0) phi0 = phi;
            if (phi > phi1) phi1 = phi;
        }

        function linePoint(lambda, phi) {
            var p = cartesian([lambda * radians, phi * radians]);
            if (p0) {
                var normal = cartesianCross(p0, p),
                    equatorial = [normal[1], -normal[0], 0],
                    inflection = cartesianCross(equatorial, normal);
                cartesianNormalizeInPlace(inflection);
                inflection = spherical(inflection);
                var delta = lambda - lambda2,
                    sign$$1 = delta > 0 ? 1 : -1,
                    lambdai = inflection[0] * degrees * sign$$1,
                    phii,
                    antimeridian = abs(delta) > 180;
                if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
                    phii = inflection[1] * degrees;
                    if (phii > phi1) phi1 = phii;
                } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
                    phii = -inflection[1] * degrees;
                    if (phii < phi0) phi0 = phii;
                } else {
                    if (phi < phi0) phi0 = phi;
                    if (phi > phi1) phi1 = phi;
                }
                if (antimeridian) {
                    if (lambda < lambda2) {
                        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
                    } else {
                        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
                    }
                } else {
                    if (lambda1 >= lambda0$1) {
                        if (lambda < lambda0$1) lambda0$1 = lambda;
                        if (lambda > lambda1) lambda1 = lambda;
                    } else {
                        if (lambda > lambda2) {
                            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
                        } else {
                            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
                        }
                    }
                }
            } else {
                ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
            }
            if (phi < phi0) phi0 = phi;
            if (phi > phi1) phi1 = phi;
            p0 = p, lambda2 = lambda;
        }

        function boundsLineStart() {
            boundsStream.point = linePoint;
        }

        function boundsLineEnd() {
            range$1[0] = lambda0$1, range$1[1] = lambda1;
            boundsStream.point = boundsPoint;
            p0 = null;
        }

        function boundsRingPoint(lambda, phi) {
            if (p0) {
                var delta = lambda - lambda2;
                deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
            } else {
                lambda00$1 = lambda, phi00$1 = phi;
            }
            areaStream.point(lambda, phi);
            linePoint(lambda, phi);
        }

        function boundsRingStart() {
            areaStream.lineStart();
        }

        function boundsRingEnd() {
            boundsRingPoint(lambda00$1, phi00$1);
            areaStream.lineEnd();
            if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);
            range$1[0] = lambda0$1, range$1[1] = lambda1;
            p0 = null;
        }

// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
        function angle(lambda0, lambda1) {
            return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
        }

        function rangeCompare(a, b) {
            return a[0] - b[0];
        }

        function rangeContains(range$$1, x) {
            return range$$1[0] <= range$$1[1] ? range$$1[0] <= x && x <= range$$1[1] : x < range$$1[0] || range$$1[1] < x;
        }

        var bounds = function(feature) {
            var i, n, a, b, merged, deltaMax, delta;

            phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
            ranges = [];
            geoStream(feature, boundsStream);

            // First, sort ranges by their minimum longitudes.
            if (n = ranges.length) {
                ranges.sort(rangeCompare);

                // Then, merge any ranges that overlap.
                for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
                    b = ranges[i];
                    if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
                        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
                        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
                    } else {
                        merged.push(a = b);
                    }
                }

                // Finally, find the largest gap between the merged ranges.
                // The final bounding box will be the inverse of this gap.
                for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
                    b = merged[i];
                    if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
                }
            }

            ranges = range$1 = null;

            return lambda0$1 === Infinity || phi0 === Infinity
                ? [[NaN, NaN], [NaN, NaN]]
                : [[lambda0$1, phi0], [lambda1, phi1]];
        };

        var W0;
        var W1;
        var X0;
        var Y0;
        var Z0;
        var X1;
        var Y1;
        var Z1;
        var X2;
        var Y2;
        var Z2;
        var lambda00$2;
        var phi00$2;
        var x0;
        var y0;
        var z0; // previous point

        var centroidStream = {
            sphere: noop,
            point: centroidPoint,
            lineStart: centroidLineStart,
            lineEnd: centroidLineEnd,
            polygonStart: function() {
                centroidStream.lineStart = centroidRingStart;
                centroidStream.lineEnd = centroidRingEnd;
            },
            polygonEnd: function() {
                centroidStream.lineStart = centroidLineStart;
                centroidStream.lineEnd = centroidLineEnd;
            }
        };

// Arithmetic mean of Cartesian vectors.
        function centroidPoint(lambda, phi) {
            lambda *= radians, phi *= radians;
            var cosPhi = cos(phi);
            centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
        }

        function centroidPointCartesian(x, y, z) {
            ++W0;
            X0 += (x - X0) / W0;
            Y0 += (y - Y0) / W0;
            Z0 += (z - Z0) / W0;
        }

        function centroidLineStart() {
            centroidStream.point = centroidLinePointFirst;
        }

        function centroidLinePointFirst(lambda, phi) {
            lambda *= radians, phi *= radians;
            var cosPhi = cos(phi);
            x0 = cosPhi * cos(lambda);
            y0 = cosPhi * sin(lambda);
            z0 = sin(phi);
            centroidStream.point = centroidLinePoint;
            centroidPointCartesian(x0, y0, z0);
        }

        function centroidLinePoint(lambda, phi) {
            lambda *= radians, phi *= radians;
            var cosPhi = cos(phi),
                x = cosPhi * cos(lambda),
                y = cosPhi * sin(lambda),
                z = sin(phi),
                w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
            W1 += w;
            X1 += w * (x0 + (x0 = x));
            Y1 += w * (y0 + (y0 = y));
            Z1 += w * (z0 + (z0 = z));
            centroidPointCartesian(x0, y0, z0);
        }

        function centroidLineEnd() {
            centroidStream.point = centroidPoint;
        }

// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
        function centroidRingStart() {
            centroidStream.point = centroidRingPointFirst;
        }

        function centroidRingEnd() {
            centroidRingPoint(lambda00$2, phi00$2);
            centroidStream.point = centroidPoint;
        }

        function centroidRingPointFirst(lambda, phi) {
            lambda00$2 = lambda, phi00$2 = phi;
            lambda *= radians, phi *= radians;
            centroidStream.point = centroidRingPoint;
            var cosPhi = cos(phi);
            x0 = cosPhi * cos(lambda);
            y0 = cosPhi * sin(lambda);
            z0 = sin(phi);
            centroidPointCartesian(x0, y0, z0);
        }

        function centroidRingPoint(lambda, phi) {
            lambda *= radians, phi *= radians;
            var cosPhi = cos(phi),
                x = cosPhi * cos(lambda),
                y = cosPhi * sin(lambda),
                z = sin(phi),
                cx = y0 * z - z0 * y,
                cy = z0 * x - x0 * z,
                cz = x0 * y - y0 * x,
                m = sqrt(cx * cx + cy * cy + cz * cz),
                w = asin(m), // line weight = angle
                v = m && -w / m; // area weight multiplier
            X2 += v * cx;
            Y2 += v * cy;
            Z2 += v * cz;
            W1 += w;
            X1 += w * (x0 + (x0 = x));
            Y1 += w * (y0 + (y0 = y));
            Z1 += w * (z0 + (z0 = z));
            centroidPointCartesian(x0, y0, z0);
        }

        var centroid = function(object) {
            W0 = W1 =
                X0 = Y0 = Z0 =
                    X1 = Y1 = Z1 =
                        X2 = Y2 = Z2 = 0;
            geoStream(object, centroidStream);

            var x = X2,
                y = Y2,
                z = Z2,
                m = x * x + y * y + z * z;

            // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
            if (m < epsilon2) {
                x = X1, y = Y1, z = Z1;
                // If the feature has zero length, fall back to arithmetic mean of point vectors.
                if (W1 < epsilon) x = X0, y = Y0, z = Z0;
                m = x * x + y * y + z * z;
                // If the feature still has an undefined ccentroid, then return.
                if (m < epsilon2) return [NaN, NaN];
            }

            return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];
        };

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        var compose = function(a, b) {

            function compose(x, y) {
                return x = a(x, y), b(x[0], x[1]);
            }

            if (a.invert && b.invert) compose.invert = function(x, y) {
                return x = b.invert(x, y), x && a.invert(x[0], x[1]);
            };

            return compose;
        };

        function rotationIdentity(lambda, phi) {
            return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
        }

        rotationIdentity.invert = rotationIdentity;

        function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
            return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
                : rotationLambda(deltaLambda))
                : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
                    : rotationIdentity);
        }

        function forwardRotationLambda(deltaLambda) {
            return function(lambda, phi) {
                return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
            };
        }

        function rotationLambda(deltaLambda) {
            var rotation = forwardRotationLambda(deltaLambda);
            rotation.invert = forwardRotationLambda(-deltaLambda);
            return rotation;
        }

        function rotationPhiGamma(deltaPhi, deltaGamma) {
            var cosDeltaPhi = cos(deltaPhi),
                sinDeltaPhi = sin(deltaPhi),
                cosDeltaGamma = cos(deltaGamma),
                sinDeltaGamma = sin(deltaGamma);

            function rotation(lambda, phi) {
                var cosPhi = cos(phi),
                    x = cos(lambda) * cosPhi,
                    y = sin(lambda) * cosPhi,
                    z = sin(phi),
                    k = z * cosDeltaPhi + x * sinDeltaPhi;
                return [
                    atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
                    asin(k * cosDeltaGamma + y * sinDeltaGamma)
                ];
            }

            rotation.invert = function(lambda, phi) {
                var cosPhi = cos(phi),
                    x = cos(lambda) * cosPhi,
                    y = sin(lambda) * cosPhi,
                    z = sin(phi),
                    k = z * cosDeltaGamma - y * sinDeltaGamma;
                return [
                    atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
                    asin(k * cosDeltaPhi - x * sinDeltaPhi)
                ];
            };

            return rotation;
        }

        var rotation = function(rotate) {
            rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

            function forward(coordinates) {
                coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
                return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
            }

            forward.invert = function(coordinates) {
                coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
                return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
            };

            return forward;
        };

// Generates a circle centered at [0°, 0°], with a given radius and precision.
        function circleStream(stream, radius, delta, direction, t0, t1) {
            if (!delta) return;
            var cosRadius = cos(radius),
                sinRadius = sin(radius),
                step = direction * delta;
            if (t0 == null) {
                t0 = radius + direction * tau;
                t1 = radius - step / 2;
            } else {
                t0 = circleRadius(cosRadius, t0);
                t1 = circleRadius(cosRadius, t1);
                if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
            }
            for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
                point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
                stream.point(point[0], point[1]);
            }
        }

// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
        function circleRadius(cosRadius, point) {
            point = cartesian(point), point[0] -= cosRadius;
            cartesianNormalizeInPlace(point);
            var radius = acos(-point[1]);
            return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
        }

        var circle = function() {
            var center = constant([0, 0]),
                radius = constant(90),
                precision = constant(6),
                ring,
                rotate,
                stream = {point: point};

            function point(x, y) {
                ring.push(x = rotate(x, y));
                x[0] *= degrees, x[1] *= degrees;
            }

            function circle() {
                var c = center.apply(this, arguments),
                    r = radius.apply(this, arguments) * radians,
                    p = precision.apply(this, arguments) * radians;
                ring = [];
                rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
                circleStream(stream, r, p, 1);
                c = {type: "Polygon", coordinates: [ring]};
                ring = rotate = null;
                return c;
            }

            circle.center = function(_) {
                return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;
            };

            circle.radius = function(_) {
                return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;
            };

            circle.precision = function(_) {
                return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;
            };

            return circle;
        };

        var clipBuffer = function() {
            var lines = [],
                line;
            return {
                point: function(x, y) {
                    line.push([x, y]);
                },
                lineStart: function() {
                    lines.push(line = []);
                },
                lineEnd: noop,
                rejoin: function() {
                    if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
                },
                result: function() {
                    var result = lines;
                    lines = [];
                    line = null;
                    return result;
                }
            };
        };

        var pointEqual = function(a, b) {
            return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
        };

        function Intersection(point, points, other, entry) {
            this.x = point;
            this.z = points;
            this.o = other; // another intersection
            this.e = entry; // is an entry?
            this.v = false; // visited
            this.n = this.p = null; // next & previous
        }

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
        var clipRejoin = function(segments, compareIntersection, startInside, interpolate, stream) {
            var subject = [],
                clip = [],
                i,
                n;

            segments.forEach(function(segment) {
                if ((n = segment.length - 1) <= 0) return;
                var n, p0 = segment[0], p1 = segment[n], x;

                // If the first and last points of a segment are coincident, then treat as a
                // closed ring. TODO if all rings are closed, then the winding order of the
                // exterior ring should be checked.
                if (pointEqual(p0, p1)) {
                    stream.lineStart();
                    for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
                    stream.lineEnd();
                    return;
                }

                subject.push(x = new Intersection(p0, segment, null, true));
                clip.push(x.o = new Intersection(p0, null, x, false));
                subject.push(x = new Intersection(p1, segment, null, false));
                clip.push(x.o = new Intersection(p1, null, x, true));
            });

            if (!subject.length) return;

            clip.sort(compareIntersection);
            link(subject);
            link(clip);

            for (i = 0, n = clip.length; i < n; ++i) {
                clip[i].e = startInside = !startInside;
            }

            var start = subject[0],
                points,
                point;

            while (1) {
                // Find first unvisited intersection.
                var current = start,
                    isSubject = true;
                while (current.v) if ((current = current.n) === start) return;
                points = current.z;
                stream.lineStart();
                do {
                    current.v = current.o.v = true;
                    if (current.e) {
                        if (isSubject) {
                            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
                        } else {
                            interpolate(current.x, current.n.x, 1, stream);
                        }
                        current = current.n;
                    } else {
                        if (isSubject) {
                            points = current.p.z;
                            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
                        } else {
                            interpolate(current.x, current.p.x, -1, stream);
                        }
                        current = current.p;
                    }
                    current = current.o;
                    points = current.z;
                    isSubject = !isSubject;
                } while (!current.v);
                stream.lineEnd();
            }
        };

        function link(array) {
            if (!(n = array.length)) return;
            var n,
                i = 0,
                a = array[0],
                b;
            while (++i < n) {
                a.n = b = array[i];
                b.p = a;
                a = b;
            }
            a.n = b = array[0];
            b.p = a;
        }

        var sum = adder();

        var polygonContains = function(polygon, point) {
            var lambda = point[0],
                phi = point[1],
                normal = [sin(lambda), -cos(lambda), 0],
                angle = 0,
                winding = 0;

            sum.reset();

            for (var i = 0, n = polygon.length; i < n; ++i) {
                if (!(m = (ring = polygon[i]).length)) continue;
                var ring,
                    m,
                    point0 = ring[m - 1],
                    lambda0 = point0[0],
                    phi0 = point0[1] / 2 + quarterPi,
                    sinPhi0 = sin(phi0),
                    cosPhi0 = cos(phi0);

                for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
                    var point1 = ring[j],
                        lambda1 = point1[0],
                        phi1 = point1[1] / 2 + quarterPi,
                        sinPhi1 = sin(phi1),
                        cosPhi1 = cos(phi1),
                        delta = lambda1 - lambda0,
                        sign$$1 = delta >= 0 ? 1 : -1,
                        absDelta = sign$$1 * delta,
                        antimeridian = absDelta > pi,
                        k = sinPhi0 * sinPhi1;

                    sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
                    angle += antimeridian ? delta + sign$$1 * tau : delta;

                    // Are the longitudes either side of the point’s meridian (lambda),
                    // and are the latitudes smaller than the parallel (phi)?
                    if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
                        var arc = cartesianCross(cartesian(point0), cartesian(point1));
                        cartesianNormalizeInPlace(arc);
                        var intersection = cartesianCross(normal, arc);
                        cartesianNormalizeInPlace(intersection);
                        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
                        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
                            winding += antimeridian ^ delta >= 0 ? 1 : -1;
                        }
                    }
                }
            }

            // First, determine whether the South pole is inside or outside:
            //
            // It is inside if:
            // * the polygon winds around it in a clockwise direction.
            // * the polygon does not (cumulatively) wind around it, but has a negative
            //   (counter-clockwise) area.
            //
            // Second, count the (signed) number of times a segment crosses a lambda
            // from the point to the South pole.  If it is zero, then the point is the
            // same side as the South pole.

            return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);
        };

        var clip = function(pointVisible, clipLine, interpolate, start) {
            return function(sink) {
                var line = clipLine(sink),
                    ringBuffer = clipBuffer(),
                    ringSink = clipLine(ringBuffer),
                    polygonStarted = false,
                    polygon,
                    segments,
                    ring;

                var clip = {
                    point: point,
                    lineStart: lineStart,
                    lineEnd: lineEnd,
                    polygonStart: function() {
                        clip.point = pointRing;
                        clip.lineStart = ringStart;
                        clip.lineEnd = ringEnd;
                        segments = [];
                        polygon = [];
                    },
                    polygonEnd: function() {
                        clip.point = point;
                        clip.lineStart = lineStart;
                        clip.lineEnd = lineEnd;
                        segments = d3Array.merge(segments);
                        var startInside = polygonContains(polygon, start);
                        if (segments.length) {
                            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                            clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
                        } else if (startInside) {
                            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                            sink.lineStart();
                            interpolate(null, null, 1, sink);
                            sink.lineEnd();
                        }
                        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
                        segments = polygon = null;
                    },
                    sphere: function() {
                        sink.polygonStart();
                        sink.lineStart();
                        interpolate(null, null, 1, sink);
                        sink.lineEnd();
                        sink.polygonEnd();
                    }
                };

                function point(lambda, phi) {
                    if (pointVisible(lambda, phi)) sink.point(lambda, phi);
                }

                function pointLine(lambda, phi) {
                    line.point(lambda, phi);
                }

                function lineStart() {
                    clip.point = pointLine;
                    line.lineStart();
                }

                function lineEnd() {
                    clip.point = point;
                    line.lineEnd();
                }

                function pointRing(lambda, phi) {
                    ring.push([lambda, phi]);
                    ringSink.point(lambda, phi);
                }

                function ringStart() {
                    ringSink.lineStart();
                    ring = [];
                }

                function ringEnd() {
                    pointRing(ring[0][0], ring[0][1]);
                    ringSink.lineEnd();

                    var clean = ringSink.clean(),
                        ringSegments = ringBuffer.result(),
                        i, n = ringSegments.length, m,
                        segment,
                        point;

                    ring.pop();
                    polygon.push(ring);
                    ring = null;

                    if (!n) return;

                    // No intersections.
                    if (clean & 1) {
                        segment = ringSegments[0];
                        if ((m = segment.length - 1) > 0) {
                            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                            sink.lineStart();
                            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
                            sink.lineEnd();
                        }
                        return;
                    }

                    // Rejoin connected segments.
                    // TODO reuse ringBuffer.rejoin()?
                    if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

                    segments.push(ringSegments.filter(validSegment));
                }

                return clip;
            };
        };

        function validSegment(segment) {
            return segment.length > 1;
        }

// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
        function compareIntersection(a, b) {
            return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])
                - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
        }

        var clipAntimeridian = clip(
            function() { return true; },
            clipAntimeridianLine,
            clipAntimeridianInterpolate,
            [-pi, -halfPi]
        );

// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
        function clipAntimeridianLine(stream) {
            var lambda0 = NaN,
                phi0 = NaN,
                sign0 = NaN,
                clean; // no intersections

            return {
                lineStart: function() {
                    stream.lineStart();
                    clean = 1;
                },
                point: function(lambda1, phi1) {
                    var sign1 = lambda1 > 0 ? pi : -pi,
                        delta = abs(lambda1 - lambda0);
                    if (abs(delta - pi) < epsilon) { // line crosses a pole
                        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
                        stream.point(sign0, phi0);
                        stream.lineEnd();
                        stream.lineStart();
                        stream.point(sign1, phi0);
                        stream.point(lambda1, phi0);
                        clean = 0;
                    } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian
                        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies
                        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
                        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
                        stream.point(sign0, phi0);
                        stream.lineEnd();
                        stream.lineStart();
                        stream.point(sign1, phi0);
                        clean = 0;
                    }
                    stream.point(lambda0 = lambda1, phi0 = phi1);
                    sign0 = sign1;
                },
                lineEnd: function() {
                    stream.lineEnd();
                    lambda0 = phi0 = NaN;
                },
                clean: function() {
                    return 2 - clean; // if intersections, rejoin first and last segments
                }
            };
        }

        function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
            var cosPhi0,
                cosPhi1,
                sinLambda0Lambda1 = sin(lambda0 - lambda1);
            return abs(sinLambda0Lambda1) > epsilon
                ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)
                    - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))
                    / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
                : (phi0 + phi1) / 2;
        }

        function clipAntimeridianInterpolate(from, to, direction, stream) {
            var phi;
            if (from == null) {
                phi = direction * halfPi;
                stream.point(-pi, phi);
                stream.point(0, phi);
                stream.point(pi, phi);
                stream.point(pi, 0);
                stream.point(pi, -phi);
                stream.point(0, -phi);
                stream.point(-pi, -phi);
                stream.point(-pi, 0);
                stream.point(-pi, phi);
            } else if (abs(from[0] - to[0]) > epsilon) {
                var lambda = from[0] < to[0] ? pi : -pi;
                phi = direction * lambda / 2;
                stream.point(-lambda, phi);
                stream.point(0, phi);
                stream.point(lambda, phi);
            } else {
                stream.point(to[0], to[1]);
            }
        }

        var clipCircle = function(radius) {
            var cr = cos(radius),
                delta = 6 * radians,
                smallRadius = cr > 0,
                notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case

            function interpolate(from, to, direction, stream) {
                circleStream(stream, radius, delta, direction, from, to);
            }

            function visible(lambda, phi) {
                return cos(lambda) * cos(phi) > cr;
            }

            // Takes a line and cuts into visible segments. Return values used for polygon
            // clipping: 0 - there were intersections or the line was empty; 1 - no
            // intersections 2 - there were intersections, and the first and last segments
            // should be rejoined.
            function clipLine(stream) {
                var point0, // previous point
                    c0, // code for previous point
                    v0, // visibility of previous point
                    v00, // visibility of first point
                    clean; // no intersections
                return {
                    lineStart: function() {
                        v00 = v0 = false;
                        clean = 1;
                    },
                    point: function(lambda, phi) {
                        var point1 = [lambda, phi],
                            point2,
                            v = visible(lambda, phi),
                            c = smallRadius
                                ? v ? 0 : code(lambda, phi)
                                : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
                        if (!point0 && (v00 = v0 = v)) stream.lineStart();
                        // Handle degeneracies.
                        // TODO ignore if not clipping polygons.
                        if (v !== v0) {
                            point2 = intersect(point0, point1);
                            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
                                point1[0] += epsilon;
                                point1[1] += epsilon;
                                v = visible(point1[0], point1[1]);
                            }
                        }
                        if (v !== v0) {
                            clean = 0;
                            if (v) {
                                // outside going in
                                stream.lineStart();
                                point2 = intersect(point1, point0);
                                stream.point(point2[0], point2[1]);
                            } else {
                                // inside going out
                                point2 = intersect(point0, point1);
                                stream.point(point2[0], point2[1]);
                                stream.lineEnd();
                            }
                            point0 = point2;
                        } else if (notHemisphere && point0 && smallRadius ^ v) {
                            var t;
                            // If the codes for two points are different, or are both zero,
                            // and there this segment intersects with the small circle.
                            if (!(c & c0) && (t = intersect(point1, point0, true))) {
                                clean = 0;
                                if (smallRadius) {
                                    stream.lineStart();
                                    stream.point(t[0][0], t[0][1]);
                                    stream.point(t[1][0], t[1][1]);
                                    stream.lineEnd();
                                } else {
                                    stream.point(t[1][0], t[1][1]);
                                    stream.lineEnd();
                                    stream.lineStart();
                                    stream.point(t[0][0], t[0][1]);
                                }
                            }
                        }
                        if (v && (!point0 || !pointEqual(point0, point1))) {
                            stream.point(point1[0], point1[1]);
                        }
                        point0 = point1, v0 = v, c0 = c;
                    },
                    lineEnd: function() {
                        if (v0) stream.lineEnd();
                        point0 = null;
                    },
                    // Rejoin first and last segments if there were intersections and the first
                    // and last points were visible.
                    clean: function() {
                        return clean | ((v00 && v0) << 1);
                    }
                };
            }

            // Intersects the great circle between a and b with the clip circle.
            function intersect(a, b, two) {
                var pa = cartesian(a),
                    pb = cartesian(b);

                // We have two planes, n1.p = d1 and n2.p = d2.
                // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
                var n1 = [1, 0, 0], // normal
                    n2 = cartesianCross(pa, pb),
                    n2n2 = cartesianDot(n2, n2),
                    n1n2 = n2[0], // cartesianDot(n1, n2),
                    determinant = n2n2 - n1n2 * n1n2;

                // Two polar points.
                if (!determinant) return !two && a;

                var c1 =  cr * n2n2 / determinant,
                    c2 = -cr * n1n2 / determinant,
                    n1xn2 = cartesianCross(n1, n2),
                    A = cartesianScale(n1, c1),
                    B = cartesianScale(n2, c2);
                cartesianAddInPlace(A, B);

                // Solve |p(t)|^2 = 1.
                var u = n1xn2,
                    w = cartesianDot(A, u),
                    uu = cartesianDot(u, u),
                    t2 = w * w - uu * (cartesianDot(A, A) - 1);

                if (t2 < 0) return;

                var t = sqrt(t2),
                    q = cartesianScale(u, (-w - t) / uu);
                cartesianAddInPlace(q, A);
                q = spherical(q);

                if (!two) return q;

                // Two intersection points.
                var lambda0 = a[0],
                    lambda1 = b[0],
                    phi0 = a[1],
                    phi1 = b[1],
                    z;

                if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

                var delta = lambda1 - lambda0,
                    polar = abs(delta - pi) < epsilon,
                    meridian = polar || delta < epsilon;

                if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

                // Check that the first point is between a and b.
                if (meridian
                        ? polar
                            ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)
                            : phi0 <= q[1] && q[1] <= phi1
                        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
                    var q1 = cartesianScale(u, (-w + t) / uu);
                    cartesianAddInPlace(q1, A);
                    return [q, spherical(q1)];
                }
            }

            // Generates a 4-bit vector representing the location of a point relative to
            // the small circle's bounding box.
            function code(lambda, phi) {
                var r = smallRadius ? radius : pi - radius,
                    code = 0;
                if (lambda < -r) code |= 1; // left
                else if (lambda > r) code |= 2; // right
                if (phi < -r) code |= 4; // below
                else if (phi > r) code |= 8; // above
                return code;
            }

            return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
        };

        var clipLine = function(a, b, x0, y0, x1, y1) {
            var ax = a[0],
                ay = a[1],
                bx = b[0],
                by = b[1],
                t0 = 0,
                t1 = 1,
                dx = bx - ax,
                dy = by - ay,
                r;

            r = x0 - ax;
            if (!dx && r > 0) return;
            r /= dx;
            if (dx < 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            } else if (dx > 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            }

            r = x1 - ax;
            if (!dx && r < 0) return;
            r /= dx;
            if (dx < 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            } else if (dx > 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            }

            r = y0 - ay;
            if (!dy && r > 0) return;
            r /= dy;
            if (dy < 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            } else if (dy > 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            }

            r = y1 - ay;
            if (!dy && r < 0) return;
            r /= dy;
            if (dy < 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            } else if (dy > 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            }

            if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
            if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
            return true;
        };

        var clipMax = 1e9;
        var clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

        function clipRectangle(x0, y0, x1, y1) {

            function visible(x, y) {
                return x0 <= x && x <= x1 && y0 <= y && y <= y1;
            }

            function interpolate(from, to, direction, stream) {
                var a = 0, a1 = 0;
                if (from == null
                    || (a = corner(from, direction)) !== (a1 = corner(to, direction))
                    || comparePoint(from, to) < 0 ^ direction > 0) {
                    do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
                    while ((a = (a + direction + 4) % 4) !== a1);
                } else {
                    stream.point(to[0], to[1]);
                }
            }

            function corner(p, direction) {
                return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3
                    : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1
                        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0
                            : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
            }

            function compareIntersection(a, b) {
                return comparePoint(a.x, b.x);
            }

            function comparePoint(a, b) {
                var ca = corner(a, 1),
                    cb = corner(b, 1);
                return ca !== cb ? ca - cb
                    : ca === 0 ? b[1] - a[1]
                        : ca === 1 ? a[0] - b[0]
                            : ca === 2 ? a[1] - b[1]
                                : b[0] - a[0];
            }

            return function(stream) {
                var activeStream = stream,
                    bufferStream = clipBuffer(),
                    segments,
                    polygon,
                    ring,
                    x__, y__, v__, // first point
                    x_, y_, v_, // previous point
                    first,
                    clean;

                var clipStream = {
                    point: point,
                    lineStart: lineStart,
                    lineEnd: lineEnd,
                    polygonStart: polygonStart,
                    polygonEnd: polygonEnd
                };

                function point(x, y) {
                    if (visible(x, y)) activeStream.point(x, y);
                }

                function polygonInside() {
                    var winding = 0;

                    for (var i = 0, n = polygon.length; i < n; ++i) {
                        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
                            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
                            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
                        }
                    }

                    return winding;
                }

                // Buffer geometry within a polygon and then clip it en masse.
                function polygonStart() {
                    activeStream = bufferStream, segments = [], polygon = [], clean = true;
                }

                function polygonEnd() {
                    var startInside = polygonInside(),
                        cleanInside = clean && startInside,
                        visible = (segments = d3Array.merge(segments)).length;
                    if (cleanInside || visible) {
                        stream.polygonStart();
                        if (cleanInside) {
                            stream.lineStart();
                            interpolate(null, null, 1, stream);
                            stream.lineEnd();
                        }
                        if (visible) {
                            clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
                        }
                        stream.polygonEnd();
                    }
                    activeStream = stream, segments = polygon = ring = null;
                }

                function lineStart() {
                    clipStream.point = linePoint;
                    if (polygon) polygon.push(ring = []);
                    first = true;
                    v_ = false;
                    x_ = y_ = NaN;
                }

                // TODO rather than special-case polygons, simply handle them separately.
                // Ideally, coincident intersection points should be jittered to avoid
                // clipping issues.
                function lineEnd() {
                    if (segments) {
                        linePoint(x__, y__);
                        if (v__ && v_) bufferStream.rejoin();
                        segments.push(bufferStream.result());
                    }
                    clipStream.point = point;
                    if (v_) activeStream.lineEnd();
                }

                function linePoint(x, y) {
                    var v = visible(x, y);
                    if (polygon) ring.push([x, y]);
                    if (first) {
                        x__ = x, y__ = y, v__ = v;
                        first = false;
                        if (v) {
                            activeStream.lineStart();
                            activeStream.point(x, y);
                        }
                    } else {
                        if (v && v_) activeStream.point(x, y);
                        else {
                            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
                            if (clipLine(a, b, x0, y0, x1, y1)) {
                                if (!v_) {
                                    activeStream.lineStart();
                                    activeStream.point(a[0], a[1]);
                                }
                                activeStream.point(b[0], b[1]);
                                if (!v) activeStream.lineEnd();
                                clean = false;
                            } else if (v) {
                                activeStream.lineStart();
                                activeStream.point(x, y);
                                clean = false;
                            }
                        }
                    }
                    x_ = x, y_ = y, v_ = v;
                }

                return clipStream;
            };
        }

        var extent = function() {
            var x0 = 0,
                y0 = 0,
                x1 = 960,
                y1 = 500,
                cache,
                cacheStream,
                clip;

            return clip = {
                stream: function(stream) {
                    return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
                },
                extent: function(_) {
                    return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
                }
            };
        };

        var lengthSum = adder();
        var lambda0$2;
        var sinPhi0$1;
        var cosPhi0$1;

        var lengthStream = {
            sphere: noop,
            point: noop,
            lineStart: lengthLineStart,
            lineEnd: noop,
            polygonStart: noop,
            polygonEnd: noop
        };

        function lengthLineStart() {
            lengthStream.point = lengthPointFirst;
            lengthStream.lineEnd = lengthLineEnd;
        }

        function lengthLineEnd() {
            lengthStream.point = lengthStream.lineEnd = noop;
        }

        function lengthPointFirst(lambda, phi) {
            lambda *= radians, phi *= radians;
            lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);
            lengthStream.point = lengthPoint;
        }

        function lengthPoint(lambda, phi) {
            lambda *= radians, phi *= radians;
            var sinPhi = sin(phi),
                cosPhi = cos(phi),
                delta = abs(lambda - lambda0$2),
                cosDelta = cos(delta),
                sinDelta = sin(delta),
                x = cosPhi * sinDelta,
                y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
                z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
            lengthSum.add(atan2(sqrt(x * x + y * y), z));
            lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
        }

        var length = function(object) {
            lengthSum.reset();
            geoStream(object, lengthStream);
            return +lengthSum;
        };

        var coordinates = [null, null];
        var object = {type: "LineString", coordinates: coordinates};

        var distance = function(a, b) {
            coordinates[0] = a;
            coordinates[1] = b;
            return length(object);
        };

        var containsObjectType = {
            Feature: function(object, point) {
                return containsGeometry(object.geometry, point);
            },
            FeatureCollection: function(object, point) {
                var features = object.features, i = -1, n = features.length;
                while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
                return false;
            }
        };

        var containsGeometryType = {
            Sphere: function() {
                return true;
            },
            Point: function(object, point) {
                return containsPoint(object.coordinates, point);
            },
            MultiPoint: function(object, point) {
                var coordinates = object.coordinates, i = -1, n = coordinates.length;
                while (++i < n) if (containsPoint(coordinates[i], point)) return true;
                return false;
            },
            LineString: function(object, point) {
                return containsLine(object.coordinates, point);
            },
            MultiLineString: function(object, point) {
                var coordinates = object.coordinates, i = -1, n = coordinates.length;
                while (++i < n) if (containsLine(coordinates[i], point)) return true;
                return false;
            },
            Polygon: function(object, point) {
                return containsPolygon(object.coordinates, point);
            },
            MultiPolygon: function(object, point) {
                var coordinates = object.coordinates, i = -1, n = coordinates.length;
                while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
                return false;
            },
            GeometryCollection: function(object, point) {
                var geometries = object.geometries, i = -1, n = geometries.length;
                while (++i < n) if (containsGeometry(geometries[i], point)) return true;
                return false;
            }
        };

        function containsGeometry(geometry, point) {
            return geometry && containsGeometryType.hasOwnProperty(geometry.type)
                ? containsGeometryType[geometry.type](geometry, point)
                : false;
        }

        function containsPoint(coordinates, point) {
            return distance(coordinates, point) === 0;
        }

        function containsLine(coordinates, point) {
            var ab = distance(coordinates[0], coordinates[1]),
                ao = distance(coordinates[0], point),
                ob = distance(point, coordinates[1]);
            return ao + ob <= ab + epsilon;
        }

        function containsPolygon(coordinates, point) {
            return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
        }

        function ringRadians(ring) {
            return ring = ring.map(pointRadians), ring.pop(), ring;
        }

        function pointRadians(point) {
            return [point[0] * radians, point[1] * radians];
        }

        var contains = function(object, point) {
            return (object && containsObjectType.hasOwnProperty(object.type)
                ? containsObjectType[object.type]
                : containsGeometry)(object, point);
        };

        function graticuleX(y0, y1, dy) {
            var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);
            return function(x) { return y.map(function(y) { return [x, y]; }); };
        }

        function graticuleY(x0, x1, dx) {
            var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);
            return function(y) { return x.map(function(x) { return [x, y]; }); };
        }

        function graticule() {
            var x1, x0, X1, X0,
                y1, y0, Y1, Y0,
                dx = 10, dy = dx, DX = 90, DY = 360,
                x, y, X, Y,
                precision = 2.5;

            function graticule() {
                return {type: "MultiLineString", coordinates: lines()};
            }

            function lines() {
                return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)
                    .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
                    .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))
                    .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));
            }

            graticule.lines = function() {
                return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
            };

            graticule.outline = function() {
                return {
                    type: "Polygon",
                    coordinates: [
                        X(X0).concat(
                            Y(Y1).slice(1),
                            X(X1).reverse().slice(1),
                            Y(Y0).reverse().slice(1))
                    ]
                };
            };

            graticule.extent = function(_) {
                if (!arguments.length) return graticule.extentMinor();
                return graticule.extentMajor(_).extentMinor(_);
            };

            graticule.extentMajor = function(_) {
                if (!arguments.length) return [[X0, Y0], [X1, Y1]];
                X0 = +_[0][0], X1 = +_[1][0];
                Y0 = +_[0][1], Y1 = +_[1][1];
                if (X0 > X1) _ = X0, X0 = X1, X1 = _;
                if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
                return graticule.precision(precision);
            };

            graticule.extentMinor = function(_) {
                if (!arguments.length) return [[x0, y0], [x1, y1]];
                x0 = +_[0][0], x1 = +_[1][0];
                y0 = +_[0][1], y1 = +_[1][1];
                if (x0 > x1) _ = x0, x0 = x1, x1 = _;
                if (y0 > y1) _ = y0, y0 = y1, y1 = _;
                return graticule.precision(precision);
            };

            graticule.step = function(_) {
                if (!arguments.length) return graticule.stepMinor();
                return graticule.stepMajor(_).stepMinor(_);
            };

            graticule.stepMajor = function(_) {
                if (!arguments.length) return [DX, DY];
                DX = +_[0], DY = +_[1];
                return graticule;
            };

            graticule.stepMinor = function(_) {
                if (!arguments.length) return [dx, dy];
                dx = +_[0], dy = +_[1];
                return graticule;
            };

            graticule.precision = function(_) {
                if (!arguments.length) return precision;
                precision = +_;
                x = graticuleX(y0, y1, 90);
                y = graticuleY(x0, x1, precision);
                X = graticuleX(Y0, Y1, 90);
                Y = graticuleY(X0, X1, precision);
                return graticule;
            };

            return graticule
                .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])
                .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
        }

        function graticule10() {
            return graticule()();
        }

        var interpolate = function(a, b) {
            var x0 = a[0] * radians,
                y0 = a[1] * radians,
                x1 = b[0] * radians,
                y1 = b[1] * radians,
                cy0 = cos(y0),
                sy0 = sin(y0),
                cy1 = cos(y1),
                sy1 = sin(y1),
                kx0 = cy0 * cos(x0),
                ky0 = cy0 * sin(x0),
                kx1 = cy1 * cos(x1),
                ky1 = cy1 * sin(x1),
                d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
                k = sin(d);

            var interpolate = d ? function(t) {
                var B = sin(t *= d) / k,
                    A = sin(d - t) / k,
                    x = A * kx0 + B * kx1,
                    y = A * ky0 + B * ky1,
                    z = A * sy0 + B * sy1;
                return [
                    atan2(y, x) * degrees,
                    atan2(z, sqrt(x * x + y * y)) * degrees
                ];
            } : function() {
                return [x0 * degrees, y0 * degrees];
            };

            interpolate.distance = d;

            return interpolate;
        };

        var identity = function(x) {
            return x;
        };

        var areaSum$1 = adder();
        var areaRingSum$1 = adder();
        var x00;
        var y00;
        var x0$1;
        var y0$1;

        var areaStream$1 = {
            point: noop,
            lineStart: noop,
            lineEnd: noop,
            polygonStart: function() {
                areaStream$1.lineStart = areaRingStart$1;
                areaStream$1.lineEnd = areaRingEnd$1;
            },
            polygonEnd: function() {
                areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
                areaSum$1.add(abs(areaRingSum$1));
                areaRingSum$1.reset();
            },
            result: function() {
                var area = areaSum$1 / 2;
                areaSum$1.reset();
                return area;
            }
        };

        function areaRingStart$1() {
            areaStream$1.point = areaPointFirst$1;
        }

        function areaPointFirst$1(x, y) {
            areaStream$1.point = areaPoint$1;
            x00 = x0$1 = x, y00 = y0$1 = y;
        }

        function areaPoint$1(x, y) {
            areaRingSum$1.add(y0$1 * x - x0$1 * y);
            x0$1 = x, y0$1 = y;
        }

        function areaRingEnd$1() {
            areaPoint$1(x00, y00);
        }

        var x0$2 = Infinity;
        var y0$2 = x0$2;
        var x1 = -x0$2;
        var y1 = x1;

        var boundsStream$1 = {
            point: boundsPoint$1,
            lineStart: noop,
            lineEnd: noop,
            polygonStart: noop,
            polygonEnd: noop,
            result: function() {
                var bounds = [[x0$2, y0$2], [x1, y1]];
                x1 = y1 = -(y0$2 = x0$2 = Infinity);
                return bounds;
            }
        };

        function boundsPoint$1(x, y) {
            if (x < x0$2) x0$2 = x;
            if (x > x1) x1 = x;
            if (y < y0$2) y0$2 = y;
            if (y > y1) y1 = y;
        }

// TODO Enforce positive area for exterior, negative area for interior?

        var X0$1 = 0;
        var Y0$1 = 0;
        var Z0$1 = 0;
        var X1$1 = 0;
        var Y1$1 = 0;
        var Z1$1 = 0;
        var X2$1 = 0;
        var Y2$1 = 0;
        var Z2$1 = 0;
        var x00$1;
        var y00$1;
        var x0$3;
        var y0$3;

        var centroidStream$1 = {
            point: centroidPoint$1,
            lineStart: centroidLineStart$1,
            lineEnd: centroidLineEnd$1,
            polygonStart: function() {
                centroidStream$1.lineStart = centroidRingStart$1;
                centroidStream$1.lineEnd = centroidRingEnd$1;
            },
            polygonEnd: function() {
                centroidStream$1.point = centroidPoint$1;
                centroidStream$1.lineStart = centroidLineStart$1;
                centroidStream$1.lineEnd = centroidLineEnd$1;
            },
            result: function() {
                var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
                    : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
                        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
                            : [NaN, NaN];
                X0$1 = Y0$1 = Z0$1 =
                    X1$1 = Y1$1 = Z1$1 =
                        X2$1 = Y2$1 = Z2$1 = 0;
                return centroid;
            }
        };

        function centroidPoint$1(x, y) {
            X0$1 += x;
            Y0$1 += y;
            ++Z0$1;
        }

        function centroidLineStart$1() {
            centroidStream$1.point = centroidPointFirstLine;
        }

        function centroidPointFirstLine(x, y) {
            centroidStream$1.point = centroidPointLine;
            centroidPoint$1(x0$3 = x, y0$3 = y);
        }

        function centroidPointLine(x, y) {
            var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
            X1$1 += z * (x0$3 + x) / 2;
            Y1$1 += z * (y0$3 + y) / 2;
            Z1$1 += z;
            centroidPoint$1(x0$3 = x, y0$3 = y);
        }

        function centroidLineEnd$1() {
            centroidStream$1.point = centroidPoint$1;
        }

        function centroidRingStart$1() {
            centroidStream$1.point = centroidPointFirstRing;
        }

        function centroidRingEnd$1() {
            centroidPointRing(x00$1, y00$1);
        }

        function centroidPointFirstRing(x, y) {
            centroidStream$1.point = centroidPointRing;
            centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
        }

        function centroidPointRing(x, y) {
            var dx = x - x0$3,
                dy = y - y0$3,
                z = sqrt(dx * dx + dy * dy);

            X1$1 += z * (x0$3 + x) / 2;
            Y1$1 += z * (y0$3 + y) / 2;
            Z1$1 += z;

            z = y0$3 * x - x0$3 * y;
            X2$1 += z * (x0$3 + x);
            Y2$1 += z * (y0$3 + y);
            Z2$1 += z * 3;
            centroidPoint$1(x0$3 = x, y0$3 = y);
        }

        function PathContext(context) {
            this._context = context;
        }

        PathContext.prototype = {
            _radius: 4.5,
            pointRadius: function(_) {
                return this._radius = _, this;
            },
            polygonStart: function() {
                this._line = 0;
            },
            polygonEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._point = 0;
            },
            lineEnd: function() {
                if (this._line === 0) this._context.closePath();
                this._point = NaN;
            },
            point: function(x, y) {
                switch (this._point) {
                    case 0: {
                        this._context.moveTo(x, y);
                        this._point = 1;
                        break;
                    }
                    case 1: {
                        this._context.lineTo(x, y);
                        break;
                    }
                    default: {
                        this._context.moveTo(x + this._radius, y);
                        this._context.arc(x, y, this._radius, 0, tau);
                        break;
                    }
                }
            },
            result: noop
        };

        var lengthSum$1 = adder();
        var lengthRing;
        var x00$2;
        var y00$2;
        var x0$4;
        var y0$4;

        var lengthStream$1 = {
            point: noop,
            lineStart: function() {
                lengthStream$1.point = lengthPointFirst$1;
            },
            lineEnd: function() {
                if (lengthRing) lengthPoint$1(x00$2, y00$2);
                lengthStream$1.point = noop;
            },
            polygonStart: function() {
                lengthRing = true;
            },
            polygonEnd: function() {
                lengthRing = null;
            },
            result: function() {
                var length = +lengthSum$1;
                lengthSum$1.reset();
                return length;
            }
        };

        function lengthPointFirst$1(x, y) {
            lengthStream$1.point = lengthPoint$1;
            x00$2 = x0$4 = x, y00$2 = y0$4 = y;
        }

        function lengthPoint$1(x, y) {
            x0$4 -= x, y0$4 -= y;
            lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
            x0$4 = x, y0$4 = y;
        }

        function PathString() {
            this._string = [];
        }

        PathString.prototype = {
            _radius: 4.5,
            _circle: circle$1(4.5),
            pointRadius: function(_) {
                if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
                return this;
            },
            polygonStart: function() {
                this._line = 0;
            },
            polygonEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._point = 0;
            },
            lineEnd: function() {
                if (this._line === 0) this._string.push("Z");
                this._point = NaN;
            },
            point: function(x, y) {
                switch (this._point) {
                    case 0: {
                        this._string.push("M", x, ",", y);
                        this._point = 1;
                        break;
                    }
                    case 1: {
                        this._string.push("L", x, ",", y);
                        break;
                    }
                    default: {
                        if (this._circle == null) this._circle = circle$1(this._radius);
                        this._string.push("M", x, ",", y, this._circle);
                        break;
                    }
                }
            },
            result: function() {
                if (this._string.length) {
                    var result = this._string.join("");
                    this._string = [];
                    return result;
                } else {
                    return null;
                }
            }
        };

        function circle$1(radius) {
            return "m0," + radius
                + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
                + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
                + "z";
        }

        var index = function(projection, context) {
            var pointRadius = 4.5,
                projectionStream,
                contextStream;

            function path(object) {
                if (object) {
                    if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
                    geoStream(object, projectionStream(contextStream));
                }
                return contextStream.result();
            }

            path.area = function(object) {
                geoStream(object, projectionStream(areaStream$1));
                return areaStream$1.result();
            };

            path.measure = function(object) {
                geoStream(object, projectionStream(lengthStream$1));
                return lengthStream$1.result();
            };

            path.bounds = function(object) {
                geoStream(object, projectionStream(boundsStream$1));
                return boundsStream$1.result();
            };

            path.centroid = function(object) {
                geoStream(object, projectionStream(centroidStream$1));
                return centroidStream$1.result();
            };

            path.projection = function(_) {
                return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
            };

            path.context = function(_) {
                if (!arguments.length) return context;
                contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
                if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
                return path;
            };

            path.pointRadius = function(_) {
                if (!arguments.length) return pointRadius;
                pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
                return path;
            };

            return path.projection(projection).context(context);
        };

        var transform = function(methods) {
            return {
                stream: transformer(methods)
            };
        };

        function transformer(methods) {
            return function(stream) {
                var s = new TransformStream;
                for (var key in methods) s[key] = methods[key];
                s.stream = stream;
                return s;
            };
        }

        function TransformStream() {}

        TransformStream.prototype = {
            constructor: TransformStream,
            point: function(x, y) { this.stream.point(x, y); },
            sphere: function() { this.stream.sphere(); },
            lineStart: function() { this.stream.lineStart(); },
            lineEnd: function() { this.stream.lineEnd(); },
            polygonStart: function() { this.stream.polygonStart(); },
            polygonEnd: function() { this.stream.polygonEnd(); }
        };

        function fit(projection, fitBounds, object) {
            var clip = projection.clipExtent && projection.clipExtent();
            projection.scale(150).translate([0, 0]);
            if (clip != null) projection.clipExtent(null);
            geoStream(object, projection.stream(boundsStream$1));
            fitBounds(boundsStream$1.result());
            if (clip != null) projection.clipExtent(clip);
            return projection;
        }

        function fitExtent(projection, extent, object) {
            return fit(projection, function(b) {
                var w = extent[1][0] - extent[0][0],
                    h = extent[1][1] - extent[0][1],
                    k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
                    x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
                    y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
                projection.scale(150 * k).translate([x, y]);
            }, object);
        }

        function fitSize(projection, size, object) {
            return fitExtent(projection, [[0, 0], size], object);
        }

        function fitWidth(projection, width, object) {
            return fit(projection, function(b) {
                var w = +width,
                    k = w / (b[1][0] - b[0][0]),
                    x = (w - k * (b[1][0] + b[0][0])) / 2,
                    y = -k * b[0][1];
                projection.scale(150 * k).translate([x, y]);
            }, object);
        }

        function fitHeight(projection, height, object) {
            return fit(projection, function(b) {
                var h = +height,
                    k = h / (b[1][1] - b[0][1]),
                    x = -k * b[0][0],
                    y = (h - k * (b[1][1] + b[0][1])) / 2;
                projection.scale(150 * k).translate([x, y]);
            }, object);
        }

        var maxDepth = 16;
        var cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

        var resample = function(project, delta2) {
            return +delta2 ? resample$1(project, delta2) : resampleNone(project);
        };

        function resampleNone(project) {
            return transformer({
                point: function(x, y) {
                    x = project(x, y);
                    this.stream.point(x[0], x[1]);
                }
            });
        }

        function resample$1(project, delta2) {

            function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
                var dx = x1 - x0,
                    dy = y1 - y0,
                    d2 = dx * dx + dy * dy;
                if (d2 > 4 * delta2 && depth--) {
                    var a = a0 + a1,
                        b = b0 + b1,
                        c = c0 + c1,
                        m = sqrt(a * a + b * b + c * c),
                        phi2 = asin(c /= m),
                        lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),
                        p = project(lambda2, phi2),
                        x2 = p[0],
                        y2 = p[1],
                        dx2 = x2 - x0,
                        dy2 = y2 - y0,
                        dz = dy * dx2 - dx * dy2;
                    if (dz * dz / d2 > delta2 // perpendicular projected distance
                        || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
                        || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
                        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
                        stream.point(x2, y2);
                        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
                    }
                }
            }
            return function(stream) {
                var lambda00, x00, y00, a00, b00, c00, // first point
                    lambda0, x0, y0, a0, b0, c0; // previous point

                var resampleStream = {
                    point: point,
                    lineStart: lineStart,
                    lineEnd: lineEnd,
                    polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
                    polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
                };

                function point(x, y) {
                    x = project(x, y);
                    stream.point(x[0], x[1]);
                }

                function lineStart() {
                    x0 = NaN;
                    resampleStream.point = linePoint;
                    stream.lineStart();
                }

                function linePoint(lambda, phi) {
                    var c = cartesian([lambda, phi]), p = project(lambda, phi);
                    resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
                    stream.point(x0, y0);
                }

                function lineEnd() {
                    resampleStream.point = point;
                    stream.lineEnd();
                }

                function ringStart() {
                    lineStart();
                    resampleStream.point = ringPoint;
                    resampleStream.lineEnd = ringEnd;
                }

                function ringPoint(lambda, phi) {
                    linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
                    resampleStream.point = linePoint;
                }

                function ringEnd() {
                    resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
                    resampleStream.lineEnd = lineEnd;
                    lineEnd();
                }

                return resampleStream;
            };
        }

        var transformRadians = transformer({
            point: function(x, y) {
                this.stream.point(x * radians, y * radians);
            }
        });

        function transformRotate(rotate) {
            return transformer({
                point: function(x, y) {
                    var r = rotate(x, y);
                    return this.stream.point(r[0], r[1]);
                }
            });
        }

        function projection(project) {
            return projectionMutator(function() { return project; })();
        }

        function projectionMutator(projectAt) {
            var project,
                k = 150, // scale
                x = 480, y = 250, // translate
                dx, dy, lambda = 0, phi = 0, // center
                deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
                theta = null, preclip = clipAntimeridian, // clip angle
                x0 = null, y0, x1, y1, postclip = identity, // clip extent
                delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
                cache,
                cacheStream;

            function projection(point) {
                point = projectRotate(point[0] * radians, point[1] * radians);
                return [point[0] * k + dx, dy - point[1] * k];
            }

            function invert(point) {
                point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
                return point && [point[0] * degrees, point[1] * degrees];
            }

            function projectTransform(x, y) {
                return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
            }

            projection.stream = function(stream) {
                return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
            };

            projection.preclip = function(_) {
                return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
            };

            projection.postclip = function(_) {
                return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
            };

            projection.clipAngle = function(_) {
                return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
            };

            projection.clipExtent = function(_) {
                return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
            };

            projection.scale = function(_) {
                return arguments.length ? (k = +_, recenter()) : k;
            };

            projection.translate = function(_) {
                return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
            };

            projection.center = function(_) {
                return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
            };

            projection.rotate = function(_) {
                return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
            };

            projection.precision = function(_) {
                return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
            };

            projection.fitExtent = function(extent, object) {
                return fitExtent(projection, extent, object);
            };

            projection.fitSize = function(size, object) {
                return fitSize(projection, size, object);
            };

            projection.fitWidth = function(width, object) {
                return fitWidth(projection, width, object);
            };

            projection.fitHeight = function(height, object) {
                return fitHeight(projection, height, object);
            };

            function recenter() {
                projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
                var center = project(lambda, phi);
                dx = x - center[0] * k;
                dy = y + center[1] * k;
                return reset();
            }

            function reset() {
                cache = cacheStream = null;
                return projection;
            }

            return function() {
                project = projectAt.apply(this, arguments);
                projection.invert = project.invert && invert;
                return recenter();
            };
        }

        function conicProjection(projectAt) {
            var phi0 = 0,
                phi1 = pi / 3,
                m = projectionMutator(projectAt),
                p = m(phi0, phi1);

            p.parallels = function(_) {
                return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
            };

            return p;
        }

        function cylindricalEqualAreaRaw(phi0) {
            var cosPhi0 = cos(phi0);

            function forward(lambda, phi) {
                return [lambda * cosPhi0, sin(phi) / cosPhi0];
            }

            forward.invert = function(x, y) {
                return [x / cosPhi0, asin(y * cosPhi0)];
            };

            return forward;
        }

        function conicEqualAreaRaw(y0, y1) {
            var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;

            // Are the parallels symmetrical around the Equator?
            if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);

            var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

            function project(x, y) {
                var r = sqrt(c - 2 * n * sin(y)) / n;
                return [r * sin(x *= n), r0 - r * cos(x)];
            }

            project.invert = function(x, y) {
                var r0y = r0 - y;
                return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
            };

            return project;
        }

        var conicEqualArea = function() {
            return conicProjection(conicEqualAreaRaw)
                .scale(155.424)
                .center([0, 33.6442]);
        };

        var albers = function() {
            return conicEqualArea()
                .parallels([29.5, 45.5])
                .scale(1070)
                .translate([480, 250])
                .rotate([96, 0])
                .center([-0.6, 38.7]);
        };

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
        function multiplex(streams) {
            var n = streams.length;
            return {
                point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
                sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
                lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
                lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
                polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
                polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
            };
        }

// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
        var albersUsa = function() {
            var cache,
                cacheStream,
                lower48 = albers(), lower48Point,
                alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
                hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
                point, pointStream = {point: function(x, y) { point = [x, y]; }};

            function albersUsa(coordinates) {
                var x = coordinates[0], y = coordinates[1];
                return point = null, (lower48Point.point(x, y), point)
                || (alaskaPoint.point(x, y), point)
                || (hawaiiPoint.point(x, y), point);
            }

            albersUsa.invert = function(coordinates) {
                var k = lower48.scale(),
                    t = lower48.translate(),
                    x = (coordinates[0] - t[0]) / k,
                    y = (coordinates[1] - t[1]) / k;
                return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
                    : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
                        : lower48).invert(coordinates);
            };

            albersUsa.stream = function(stream) {
                return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
            };

            albersUsa.precision = function(_) {
                if (!arguments.length) return lower48.precision();
                lower48.precision(_), alaska.precision(_), hawaii.precision(_);
                return reset();
            };

            albersUsa.scale = function(_) {
                if (!arguments.length) return lower48.scale();
                lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
                return albersUsa.translate(lower48.translate());
            };

            albersUsa.translate = function(_) {
                if (!arguments.length) return lower48.translate();
                var k = lower48.scale(), x = +_[0], y = +_[1];

                lower48Point = lower48
                    .translate(_)
                    .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
                    .stream(pointStream);

                alaskaPoint = alaska
                    .translate([x - 0.307 * k, y + 0.201 * k])
                    .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])
                    .stream(pointStream);

                hawaiiPoint = hawaii
                    .translate([x - 0.205 * k, y + 0.212 * k])
                    .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])
                    .stream(pointStream);

                return reset();
            };

            albersUsa.fitExtent = function(extent, object) {
                return fitExtent(albersUsa, extent, object);
            };

            albersUsa.fitSize = function(size, object) {
                return fitSize(albersUsa, size, object);
            };

            albersUsa.fitWidth = function(width, object) {
                return fitWidth(albersUsa, width, object);
            };

            albersUsa.fitHeight = function(height, object) {
                return fitHeight(albersUsa, height, object);
            };

            function reset() {
                cache = cacheStream = null;
                return albersUsa;
            }

            return albersUsa.scale(1070);
        };

        function azimuthalRaw(scale) {
            return function(x, y) {
                var cx = cos(x),
                    cy = cos(y),
                    k = scale(cx * cy);
                return [
                    k * cy * sin(x),
                    k * sin(y)
                ];
            }
        }

        function azimuthalInvert(angle) {
            return function(x, y) {
                var z = sqrt(x * x + y * y),
                    c = angle(z),
                    sc = sin(c),
                    cc = cos(c);
                return [
                    atan2(x * sc, z * cc),
                    asin(z && y * sc / z)
                ];
            }
        }

        var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
            return sqrt(2 / (1 + cxcy));
        });

        azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
            return 2 * asin(z / 2);
        });

        var azimuthalEqualArea = function() {
            return projection(azimuthalEqualAreaRaw)
                .scale(124.75)
                .clipAngle(180 - 1e-3);
        };

        var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
            return (c = acos(c)) && c / sin(c);
        });

        azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
            return z;
        });

        var azimuthalEquidistant = function() {
            return projection(azimuthalEquidistantRaw)
                .scale(79.4188)
                .clipAngle(180 - 1e-3);
        };

        function mercatorRaw(lambda, phi) {
            return [lambda, log(tan((halfPi + phi) / 2))];
        }

        mercatorRaw.invert = function(x, y) {
            return [x, 2 * atan(exp(y)) - halfPi];
        };

        var mercator = function() {
            return mercatorProjection(mercatorRaw)
                .scale(961 / tau);
        };

        function mercatorProjection(project) {
            var m = projection(project),
                center = m.center,
                scale = m.scale,
                translate = m.translate,
                clipExtent = m.clipExtent,
                x0 = null, y0, x1, y1; // clip extent

            m.scale = function(_) {
                return arguments.length ? (scale(_), reclip()) : scale();
            };

            m.translate = function(_) {
                return arguments.length ? (translate(_), reclip()) : translate();
            };

            m.center = function(_) {
                return arguments.length ? (center(_), reclip()) : center();
            };

            m.clipExtent = function(_) {
                return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
            };

            function reclip() {
                var k = pi * scale(),
                    t = m(rotation(m.rotate()).invert([0, 0]));
                return clipExtent(x0 == null
                    ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
                        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
                        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
            }

            return reclip();
        }

        function tany(y) {
            return tan((halfPi + y) / 2);
        }

        function conicConformalRaw(y0, y1) {
            var cy0 = cos(y0),
                n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),
                f = cy0 * pow(tany(y0), n) / n;

            if (!n) return mercatorRaw;

            function project(x, y) {
                if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }
                else { if (y > halfPi - epsilon) y = halfPi - epsilon; }
                var r = f / pow(tany(y), n);
                return [r * sin(n * x), f - r * cos(n * x)];
            }

            project.invert = function(x, y) {
                var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
                return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];
            };

            return project;
        }

        var conicConformal = function() {
            return conicProjection(conicConformalRaw)
                .scale(109.5)
                .parallels([30, 30]);
        };

        function equirectangularRaw(lambda, phi) {
            return [lambda, phi];
        }

        equirectangularRaw.invert = equirectangularRaw;

        var equirectangular = function() {
            return projection(equirectangularRaw)
                .scale(152.63);
        };

        function conicEquidistantRaw(y0, y1) {
            var cy0 = cos(y0),
                n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),
                g = cy0 / n + y0;

            if (abs(n) < epsilon) return equirectangularRaw;

            function project(x, y) {
                var gy = g - y, nx = n * x;
                return [gy * sin(nx), g - gy * cos(nx)];
            }

            project.invert = function(x, y) {
                var gy = g - y;
                return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
            };

            return project;
        }

        var conicEquidistant = function() {
            return conicProjection(conicEquidistantRaw)
                .scale(131.154)
                .center([0, 13.9389]);
        };

        function gnomonicRaw(x, y) {
            var cy = cos(y), k = cos(x) * cy;
            return [cy * sin(x) / k, sin(y) / k];
        }

        gnomonicRaw.invert = azimuthalInvert(atan);

        var gnomonic = function() {
            return projection(gnomonicRaw)
                .scale(144.049)
                .clipAngle(60);
        };

        function scaleTranslate(kx, ky, tx, ty) {
            return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({
                point: function(x, y) {
                    this.stream.point(x * kx + tx, y * ky + ty);
                }
            });
        }

        var identity$1 = function() {
            var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform$$1 = identity, // scale, translate and reflect
                x0 = null, y0, x1, y1, // clip extent
                postclip = identity,
                cache,
                cacheStream,
                projection;

            function reset() {
                cache = cacheStream = null;
                return projection;
            }

            return projection = {
                stream: function(stream) {
                    return cache && cacheStream === stream ? cache : cache = transform$$1(postclip(cacheStream = stream));
                },
                postclip: function(_) {
                    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
                },
                clipExtent: function(_) {
                    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
                },
                scale: function(_) {
                    return arguments.length ? (transform$$1 = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
                },
                translate: function(_) {
                    return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
                },
                reflectX: function(_) {
                    return arguments.length ? (transform$$1 = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
                },
                reflectY: function(_) {
                    return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
                },
                fitExtent: function(extent, object) {
                    return fitExtent(projection, extent, object);
                },
                fitSize: function(size, object) {
                    return fitSize(projection, size, object);
                },
                fitWidth: function(width, object) {
                    return fitWidth(projection, width, object);
                },
                fitHeight: function(height, object) {
                    return fitHeight(projection, height, object);
                }
            };
        };

        function naturalEarth1Raw(lambda, phi) {
            var phi2 = phi * phi, phi4 = phi2 * phi2;
            return [
                lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
                phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
            ];
        }

        naturalEarth1Raw.invert = function(x, y) {
            var phi = y, i = 25, delta;
            do {
                var phi2 = phi * phi, phi4 = phi2 * phi2;
                phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
                    (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
            } while (abs(delta) > epsilon && --i > 0);
            return [
                x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
                phi
            ];
        };

        var naturalEarth1 = function() {
            return projection(naturalEarth1Raw)
                .scale(175.295);
        };

        function orthographicRaw(x, y) {
            return [cos(y) * sin(x), sin(y)];
        }

        orthographicRaw.invert = azimuthalInvert(asin);

        var orthographic = function() {
            return projection(orthographicRaw)
                .scale(249.5)
                .clipAngle(90 + epsilon);
        };

        function stereographicRaw(x, y) {
            var cy = cos(y), k = 1 + cos(x) * cy;
            return [cy * sin(x) / k, sin(y) / k];
        }

        stereographicRaw.invert = azimuthalInvert(function(z) {
            return 2 * atan(z);
        });

        var stereographic = function() {
            return projection(stereographicRaw)
                .scale(250)
                .clipAngle(142);
        };

        function transverseMercatorRaw(lambda, phi) {
            return [log(tan((halfPi + phi) / 2)), -lambda];
        }

        transverseMercatorRaw.invert = function(x, y) {
            return [-y, 2 * atan(exp(x)) - halfPi];
        };

        var transverseMercator = function() {
            var m = mercatorProjection(transverseMercatorRaw),
                center = m.center,
                rotate = m.rotate;

            m.center = function(_) {
                return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
            };

            m.rotate = function(_) {
                return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
            };

            return rotate([0, 0, 90])
                .scale(159.155);
        };

        exports.geoArea = area;
        exports.geoBounds = bounds;
        exports.geoCentroid = centroid;
        exports.geoCircle = circle;
        exports.geoClipAntimeridian = clipAntimeridian;
        exports.geoClipCircle = clipCircle;
        exports.geoClipExtent = extent;
        exports.geoClipRectangle = clipRectangle;
        exports.geoContains = contains;
        exports.geoDistance = distance;
        exports.geoGraticule = graticule;
        exports.geoGraticule10 = graticule10;
        exports.geoInterpolate = interpolate;
        exports.geoLength = length;
        exports.geoPath = index;
        exports.geoAlbers = albers;
        exports.geoAlbersUsa = albersUsa;
        exports.geoAzimuthalEqualArea = azimuthalEqualArea;
        exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
        exports.geoAzimuthalEquidistant = azimuthalEquidistant;
        exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
        exports.geoConicConformal = conicConformal;
        exports.geoConicConformalRaw = conicConformalRaw;
        exports.geoConicEqualArea = conicEqualArea;
        exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
        exports.geoConicEquidistant = conicEquidistant;
        exports.geoConicEquidistantRaw = conicEquidistantRaw;
        exports.geoEquirectangular = equirectangular;
        exports.geoEquirectangularRaw = equirectangularRaw;
        exports.geoGnomonic = gnomonic;
        exports.geoGnomonicRaw = gnomonicRaw;
        exports.geoIdentity = identity$1;
        exports.geoProjection = projection;
        exports.geoProjectionMutator = projectionMutator;
        exports.geoMercator = mercator;
        exports.geoMercatorRaw = mercatorRaw;
        exports.geoNaturalEarth1 = naturalEarth1;
        exports.geoNaturalEarth1Raw = naturalEarth1Raw;
        exports.geoOrthographic = orthographic;
        exports.geoOrthographicRaw = orthographicRaw;
        exports.geoStereographic = stereographic;
        exports.geoStereographicRaw = stereographicRaw;
        exports.geoTransverseMercator = transverseMercator;
        exports.geoTransverseMercatorRaw = transverseMercatorRaw;
        exports.geoRotation = rotation;
        exports.geoStream = geoStream;
        exports.geoTransform = transform;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-array":39}],52:[function(require,module,exports){
// https://d3js.org/d3-hierarchy/ Version 1.1.5. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        function defaultSeparation(a, b) {
            return a.parent === b.parent ? 1 : 2;
        }

        function meanX(children) {
            return children.reduce(meanXReduce, 0) / children.length;
        }

        function meanXReduce(x, c) {
            return x + c.x;
        }

        function maxY(children) {
            return 1 + children.reduce(maxYReduce, 0);
        }

        function maxYReduce(y, c) {
            return Math.max(y, c.y);
        }

        function leafLeft(node) {
            var children;
            while (children = node.children) node = children[0];
            return node;
        }

        function leafRight(node) {
            var children;
            while (children = node.children) node = children[children.length - 1];
            return node;
        }

        var cluster = function() {
            var separation = defaultSeparation,
                dx = 1,
                dy = 1,
                nodeSize = false;

            function cluster(root) {
                var previousNode,
                    x = 0;

                // First walk, computing the initial x & y values.
                root.eachAfter(function(node) {
                    var children = node.children;
                    if (children) {
                        node.x = meanX(children);
                        node.y = maxY(children);
                    } else {
                        node.x = previousNode ? x += separation(node, previousNode) : 0;
                        node.y = 0;
                        previousNode = node;
                    }
                });

                var left = leafLeft(root),
                    right = leafRight(root),
                    x0 = left.x - separation(left, right) / 2,
                    x1 = right.x + separation(right, left) / 2;

                // Second walk, normalizing x & y to the desired size.
                return root.eachAfter(nodeSize ? function(node) {
                    node.x = (node.x - root.x) * dx;
                    node.y = (root.y - node.y) * dy;
                } : function(node) {
                    node.x = (node.x - x0) / (x1 - x0) * dx;
                    node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
                });
            }

            cluster.separation = function(x) {
                return arguments.length ? (separation = x, cluster) : separation;
            };

            cluster.size = function(x) {
                return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
            };

            cluster.nodeSize = function(x) {
                return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
            };

            return cluster;
        };

        function count(node) {
            var sum = 0,
                children = node.children,
                i = children && children.length;
            if (!i) sum = 1;
            else while (--i >= 0) sum += children[i].value;
            node.value = sum;
        }

        var node_count = function() {
            return this.eachAfter(count);
        };

        var node_each = function(callback) {
            var node = this, current, next = [node], children, i, n;
            do {
                current = next.reverse(), next = [];
                while (node = current.pop()) {
                    callback(node), children = node.children;
                    if (children) for (i = 0, n = children.length; i < n; ++i) {
                        next.push(children[i]);
                    }
                }
            } while (next.length);
            return this;
        };

        var node_eachBefore = function(callback) {
            var node = this, nodes = [node], children, i;
            while (node = nodes.pop()) {
                callback(node), children = node.children;
                if (children) for (i = children.length - 1; i >= 0; --i) {
                    nodes.push(children[i]);
                }
            }
            return this;
        };

        var node_eachAfter = function(callback) {
            var node = this, nodes = [node], next = [], children, i, n;
            while (node = nodes.pop()) {
                next.push(node), children = node.children;
                if (children) for (i = 0, n = children.length; i < n; ++i) {
                    nodes.push(children[i]);
                }
            }
            while (node = next.pop()) {
                callback(node);
            }
            return this;
        };

        var node_sum = function(value) {
            return this.eachAfter(function(node) {
                var sum = +value(node.data) || 0,
                    children = node.children,
                    i = children && children.length;
                while (--i >= 0) sum += children[i].value;
                node.value = sum;
            });
        };

        var node_sort = function(compare) {
            return this.eachBefore(function(node) {
                if (node.children) {
                    node.children.sort(compare);
                }
            });
        };

        var node_path = function(end) {
            var start = this,
                ancestor = leastCommonAncestor(start, end),
                nodes = [start];
            while (start !== ancestor) {
                start = start.parent;
                nodes.push(start);
            }
            var k = nodes.length;
            while (end !== ancestor) {
                nodes.splice(k, 0, end);
                end = end.parent;
            }
            return nodes;
        };

        function leastCommonAncestor(a, b) {
            if (a === b) return a;
            var aNodes = a.ancestors(),
                bNodes = b.ancestors(),
                c = null;
            a = aNodes.pop();
            b = bNodes.pop();
            while (a === b) {
                c = a;
                a = aNodes.pop();
                b = bNodes.pop();
            }
            return c;
        }

        var node_ancestors = function() {
            var node = this, nodes = [node];
            while (node = node.parent) {
                nodes.push(node);
            }
            return nodes;
        };

        var node_descendants = function() {
            var nodes = [];
            this.each(function(node) {
                nodes.push(node);
            });
            return nodes;
        };

        var node_leaves = function() {
            var leaves = [];
            this.eachBefore(function(node) {
                if (!node.children) {
                    leaves.push(node);
                }
            });
            return leaves;
        };

        var node_links = function() {
            var root = this, links = [];
            root.each(function(node) {
                if (node !== root) { // Don’t include the root’s parent, if any.
                    links.push({source: node.parent, target: node});
                }
            });
            return links;
        };

        function hierarchy(data, children) {
            var root = new Node(data),
                valued = +data.value && (root.value = data.value),
                node,
                nodes = [root],
                child,
                childs,
                i,
                n;

            if (children == null) children = defaultChildren;

            while (node = nodes.pop()) {
                if (valued) node.value = +node.data.value;
                if ((childs = children(node.data)) && (n = childs.length)) {
                    node.children = new Array(n);
                    for (i = n - 1; i >= 0; --i) {
                        nodes.push(child = node.children[i] = new Node(childs[i]));
                        child.parent = node;
                        child.depth = node.depth + 1;
                    }
                }
            }

            return root.eachBefore(computeHeight);
        }

        function node_copy() {
            return hierarchy(this).eachBefore(copyData);
        }

        function defaultChildren(d) {
            return d.children;
        }

        function copyData(node) {
            node.data = node.data.data;
        }

        function computeHeight(node) {
            var height = 0;
            do node.height = height;
            while ((node = node.parent) && (node.height < ++height));
        }

        function Node(data) {
            this.data = data;
            this.depth =
                this.height = 0;
            this.parent = null;
        }

        Node.prototype = hierarchy.prototype = {
            constructor: Node,
            count: node_count,
            each: node_each,
            eachAfter: node_eachAfter,
            eachBefore: node_eachBefore,
            sum: node_sum,
            sort: node_sort,
            path: node_path,
            ancestors: node_ancestors,
            descendants: node_descendants,
            leaves: node_leaves,
            links: node_links,
            copy: node_copy
        };

        var slice = Array.prototype.slice;

        function shuffle(array) {
            var m = array.length,
                t,
                i;

            while (m) {
                i = Math.random() * m-- | 0;
                t = array[m];
                array[m] = array[i];
                array[i] = t;
            }

            return array;
        }

        var enclose = function(circles) {
            var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;

            while (i < n) {
                p = circles[i];
                if (e && enclosesWeak(e, p)) ++i;
                else e = encloseBasis(B = extendBasis(B, p)), i = 0;
            }

            return e;
        };

        function extendBasis(B, p) {
            var i, j;

            if (enclosesWeakAll(p, B)) return [p];

            // If we get here then B must have at least one element.
            for (i = 0; i < B.length; ++i) {
                if (enclosesNot(p, B[i])
                    && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
                    return [B[i], p];
                }
            }

            // If we get here then B must have at least two elements.
            for (i = 0; i < B.length - 1; ++i) {
                for (j = i + 1; j < B.length; ++j) {
                    if (enclosesNot(encloseBasis2(B[i], B[j]), p)
                        && enclosesNot(encloseBasis2(B[i], p), B[j])
                        && enclosesNot(encloseBasis2(B[j], p), B[i])
                        && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
                        return [B[i], B[j], p];
                    }
                }
            }

            // If we get here then something is very wrong.
            throw new Error;
        }

        function enclosesNot(a, b) {
            var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
            return dr < 0 || dr * dr < dx * dx + dy * dy;
        }

        function enclosesWeak(a, b) {
            var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;
            return dr > 0 && dr * dr > dx * dx + dy * dy;
        }

        function enclosesWeakAll(a, B) {
            for (var i = 0; i < B.length; ++i) {
                if (!enclosesWeak(a, B[i])) {
                    return false;
                }
            }
            return true;
        }

        function encloseBasis(B) {
            switch (B.length) {
                case 1: return encloseBasis1(B[0]);
                case 2: return encloseBasis2(B[0], B[1]);
                case 3: return encloseBasis3(B[0], B[1], B[2]);
            }
        }

        function encloseBasis1(a) {
            return {
                x: a.x,
                y: a.y,
                r: a.r
            };
        }

        function encloseBasis2(a, b) {
            var x1 = a.x, y1 = a.y, r1 = a.r,
                x2 = b.x, y2 = b.y, r2 = b.r,
                x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
                l = Math.sqrt(x21 * x21 + y21 * y21);
            return {
                x: (x1 + x2 + x21 / l * r21) / 2,
                y: (y1 + y2 + y21 / l * r21) / 2,
                r: (l + r1 + r2) / 2
            };
        }

        function encloseBasis3(a, b, c) {
            var x1 = a.x, y1 = a.y, r1 = a.r,
                x2 = b.x, y2 = b.y, r2 = b.r,
                x3 = c.x, y3 = c.y, r3 = c.r,
                a2 = x1 - x2,
                a3 = x1 - x3,
                b2 = y1 - y2,
                b3 = y1 - y3,
                c2 = r2 - r1,
                c3 = r3 - r1,
                d1 = x1 * x1 + y1 * y1 - r1 * r1,
                d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
                d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
                ab = a3 * b2 - a2 * b3,
                xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
                xb = (b3 * c2 - b2 * c3) / ab,
                ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
                yb = (a2 * c3 - a3 * c2) / ab,
                A = xb * xb + yb * yb - 1,
                B = 2 * (r1 + xa * xb + ya * yb),
                C = xa * xa + ya * ya - r1 * r1,
                r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
            return {
                x: x1 + xa + xb * r,
                y: y1 + ya + yb * r,
                r: r
            };
        }

        function place(a, b, c) {
            var ax = a.x,
                ay = a.y,
                da = b.r + c.r,
                db = a.r + c.r,
                dx = b.x - ax,
                dy = b.y - ay,
                dc = dx * dx + dy * dy;
            if (dc) {
                var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
                    y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
                c.x = ax + x * dx + y * dy;
                c.y = ay + x * dy - y * dx;
            } else {
                c.x = ax + db;
                c.y = ay;
            }
        }

        function intersects(a, b) {
            var dx = b.x - a.x,
                dy = b.y - a.y,
                dr = a.r + b.r;
            return dr * dr - 1e-6 > dx * dx + dy * dy;
        }

        function score(node) {
            var a = node._,
                b = node.next._,
                ab = a.r + b.r,
                dx = (a.x * b.r + b.x * a.r) / ab,
                dy = (a.y * b.r + b.y * a.r) / ab;
            return dx * dx + dy * dy;
        }

        function Node$1(circle) {
            this._ = circle;
            this.next = null;
            this.previous = null;
        }

        function packEnclose(circles) {
            if (!(n = circles.length)) return 0;

            var a, b, c, n, aa, ca, i, j, k, sj, sk;

            // Place the first circle.
            a = circles[0], a.x = 0, a.y = 0;
            if (!(n > 1)) return a.r;

            // Place the second circle.
            b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
            if (!(n > 2)) return a.r + b.r;

            // Place the third circle.
            place(b, a, c = circles[2]);

            // Initialize the front-chain using the first three circles a, b and c.
            a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
            a.next = c.previous = b;
            b.next = a.previous = c;
            c.next = b.previous = a;

            // Attempt to place each remaining circle…
            pack: for (i = 3; i < n; ++i) {
                place(a._, b._, c = circles[i]), c = new Node$1(c);

                // Find the closest intersecting circle on the front-chain, if any.
                // “Closeness” is determined by linear distance along the front-chain.
                // “Ahead” or “behind” is likewise determined by linear distance.
                j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
                do {
                    if (sj <= sk) {
                        if (intersects(j._, c._)) {
                            b = j, a.next = b, b.previous = a, --i;
                            continue pack;
                        }
                        sj += j._.r, j = j.next;
                    } else {
                        if (intersects(k._, c._)) {
                            a = k, a.next = b, b.previous = a, --i;
                            continue pack;
                        }
                        sk += k._.r, k = k.previous;
                    }
                } while (j !== k.next);

                // Success! Insert the new circle c between a and b.
                c.previous = a, c.next = b, a.next = b.previous = b = c;

                // Compute the new closest circle pair to the centroid.
                aa = score(a);
                while ((c = c.next) !== b) {
                    if ((ca = score(c)) < aa) {
                        a = c, aa = ca;
                    }
                }
                b = a.next;
            }

            // Compute the enclosing circle of the front chain.
            a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

            // Translate the circles to put the enclosing circle around the origin.
            for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

            return c.r;
        }

        var siblings = function(circles) {
            packEnclose(circles);
            return circles;
        };

        function optional(f) {
            return f == null ? null : required(f);
        }

        function required(f) {
            if (typeof f !== "function") throw new Error;
            return f;
        }

        function constantZero() {
            return 0;
        }

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        function defaultRadius(d) {
            return Math.sqrt(d.value);
        }

        var index = function() {
            var radius = null,
                dx = 1,
                dy = 1,
                padding = constantZero;

            function pack(root) {
                root.x = dx / 2, root.y = dy / 2;
                if (radius) {
                    root.eachBefore(radiusLeaf(radius))
                        .eachAfter(packChildren(padding, 0.5))
                        .eachBefore(translateChild(1));
                } else {
                    root.eachBefore(radiusLeaf(defaultRadius))
                        .eachAfter(packChildren(constantZero, 1))
                        .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
                        .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
                }
                return root;
            }

            pack.radius = function(x) {
                return arguments.length ? (radius = optional(x), pack) : radius;
            };

            pack.size = function(x) {
                return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
            };

            pack.padding = function(x) {
                return arguments.length ? (padding = typeof x === "function" ? x : constant(+x), pack) : padding;
            };

            return pack;
        };

        function radiusLeaf(radius) {
            return function(node) {
                if (!node.children) {
                    node.r = Math.max(0, +radius(node) || 0);
                }
            };
        }

        function packChildren(padding, k) {
            return function(node) {
                if (children = node.children) {
                    var children,
                        i,
                        n = children.length,
                        r = padding(node) * k || 0,
                        e;

                    if (r) for (i = 0; i < n; ++i) children[i].r += r;
                    e = packEnclose(children);
                    if (r) for (i = 0; i < n; ++i) children[i].r -= r;
                    node.r = e + r;
                }
            };
        }

        function translateChild(k) {
            return function(node) {
                var parent = node.parent;
                node.r *= k;
                if (parent) {
                    node.x = parent.x + k * node.x;
                    node.y = parent.y + k * node.y;
                }
            };
        }

        var roundNode = function(node) {
            node.x0 = Math.round(node.x0);
            node.y0 = Math.round(node.y0);
            node.x1 = Math.round(node.x1);
            node.y1 = Math.round(node.y1);
        };

        var treemapDice = function(parent, x0, y0, x1, y1) {
            var nodes = parent.children,
                node,
                i = -1,
                n = nodes.length,
                k = parent.value && (x1 - x0) / parent.value;

            while (++i < n) {
                node = nodes[i], node.y0 = y0, node.y1 = y1;
                node.x0 = x0, node.x1 = x0 += node.value * k;
            }
        };

        var partition = function() {
            var dx = 1,
                dy = 1,
                padding = 0,
                round = false;

            function partition(root) {
                var n = root.height + 1;
                root.x0 =
                    root.y0 = padding;
                root.x1 = dx;
                root.y1 = dy / n;
                root.eachBefore(positionNode(dy, n));
                if (round) root.eachBefore(roundNode);
                return root;
            }

            function positionNode(dy, n) {
                return function(node) {
                    if (node.children) {
                        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
                    }
                    var x0 = node.x0,
                        y0 = node.y0,
                        x1 = node.x1 - padding,
                        y1 = node.y1 - padding;
                    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
                    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
                    node.x0 = x0;
                    node.y0 = y0;
                    node.x1 = x1;
                    node.y1 = y1;
                };
            }

            partition.round = function(x) {
                return arguments.length ? (round = !!x, partition) : round;
            };

            partition.size = function(x) {
                return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
            };

            partition.padding = function(x) {
                return arguments.length ? (padding = +x, partition) : padding;
            };

            return partition;
        };

        var keyPrefix = "$";
        var preroot = {depth: -1};
        var ambiguous = {};

        function defaultId(d) {
            return d.id;
        }

        function defaultParentId(d) {
            return d.parentId;
        }

        var stratify = function() {
            var id = defaultId,
                parentId = defaultParentId;

            function stratify(data) {
                var d,
                    i,
                    n = data.length,
                    root,
                    parent,
                    node,
                    nodes = new Array(n),
                    nodeId,
                    nodeKey,
                    nodeByKey = {};

                for (i = 0; i < n; ++i) {
                    d = data[i], node = nodes[i] = new Node(d);
                    if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
                        nodeKey = keyPrefix + (node.id = nodeId);
                        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
                    }
                }

                for (i = 0; i < n; ++i) {
                    node = nodes[i], nodeId = parentId(data[i], i, data);
                    if (nodeId == null || !(nodeId += "")) {
                        if (root) throw new Error("multiple roots");
                        root = node;
                    } else {
                        parent = nodeByKey[keyPrefix + nodeId];
                        if (!parent) throw new Error("missing: " + nodeId);
                        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
                        if (parent.children) parent.children.push(node);
                        else parent.children = [node];
                        node.parent = parent;
                    }
                }

                if (!root) throw new Error("no root");
                root.parent = preroot;
                root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
                root.parent = null;
                if (n > 0) throw new Error("cycle");

                return root;
            }

            stratify.id = function(x) {
                return arguments.length ? (id = required(x), stratify) : id;
            };

            stratify.parentId = function(x) {
                return arguments.length ? (parentId = required(x), stratify) : parentId;
            };

            return stratify;
        };

        function defaultSeparation$1(a, b) {
            return a.parent === b.parent ? 1 : 2;
        }

// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }

// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
        function nextLeft(v) {
            var children = v.children;
            return children ? children[0] : v.t;
        }

// This function works analogously to nextLeft.
        function nextRight(v) {
            var children = v.children;
            return children ? children[children.length - 1] : v.t;
        }

// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
        function moveSubtree(wm, wp, shift) {
            var change = shift / (wp.i - wm.i);
            wp.c -= change;
            wp.s += shift;
            wm.c += change;
            wp.z += shift;
            wp.m += shift;
        }

// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
        function executeShifts(v) {
            var shift = 0,
                change = 0,
                children = v.children,
                i = children.length,
                w;
            while (--i >= 0) {
                w = children[i];
                w.z += shift;
                w.m += shift;
                shift += w.s + (change += w.c);
            }
        }

// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
        function nextAncestor(vim, v, ancestor) {
            return vim.a.parent === v.parent ? vim.a : ancestor;
        }

        function TreeNode(node, i) {
            this._ = node;
            this.parent = null;
            this.children = null;
            this.A = null; // default ancestor
            this.a = this; // ancestor
            this.z = 0; // prelim
            this.m = 0; // mod
            this.c = 0; // change
            this.s = 0; // shift
            this.t = null; // thread
            this.i = i; // number
        }

        TreeNode.prototype = Object.create(Node.prototype);

        function treeRoot(root) {
            var tree = new TreeNode(root, 0),
                node,
                nodes = [tree],
                child,
                children,
                i,
                n;

            while (node = nodes.pop()) {
                if (children = node._.children) {
                    node.children = new Array(n = children.length);
                    for (i = n - 1; i >= 0; --i) {
                        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
                        child.parent = node;
                    }
                }
            }

            (tree.parent = new TreeNode(null, 0)).children = [tree];
            return tree;
        }

// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
        var tree = function() {
            var separation = defaultSeparation$1,
                dx = 1,
                dy = 1,
                nodeSize = null;

            function tree(root) {
                var t = treeRoot(root);

                // Compute the layout using Buchheim et al.’s algorithm.
                t.eachAfter(firstWalk), t.parent.m = -t.z;
                t.eachBefore(secondWalk);

                // If a fixed node size is specified, scale x and y.
                if (nodeSize) root.eachBefore(sizeNode);

                // If a fixed tree size is specified, scale x and y based on the extent.
                // Compute the left-most, right-most, and depth-most nodes for extents.
                else {
                    var left = root,
                        right = root,
                        bottom = root;
                    root.eachBefore(function(node) {
                        if (node.x < left.x) left = node;
                        if (node.x > right.x) right = node;
                        if (node.depth > bottom.depth) bottom = node;
                    });
                    var s = left === right ? 1 : separation(left, right) / 2,
                        tx = s - left.x,
                        kx = dx / (right.x + s + tx),
                        ky = dy / (bottom.depth || 1);
                    root.eachBefore(function(node) {
                        node.x = (node.x + tx) * kx;
                        node.y = node.depth * ky;
                    });
                }

                return root;
            }

            // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
            // applied recursively to the children of v, as well as the function
            // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
            // node v is placed to the midpoint of its outermost children.
            function firstWalk(v) {
                var children = v.children,
                    siblings = v.parent.children,
                    w = v.i ? siblings[v.i - 1] : null;
                if (children) {
                    executeShifts(v);
                    var midpoint = (children[0].z + children[children.length - 1].z) / 2;
                    if (w) {
                        v.z = w.z + separation(v._, w._);
                        v.m = v.z - midpoint;
                    } else {
                        v.z = midpoint;
                    }
                } else if (w) {
                    v.z = w.z + separation(v._, w._);
                }
                v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
            }

            // Computes all real x-coordinates by summing up the modifiers recursively.
            function secondWalk(v) {
                v._.x = v.z + v.parent.m;
                v.m += v.parent.m;
            }

            // The core of the algorithm. Here, a new subtree is combined with the
            // previous subtrees. Threads are used to traverse the inside and outside
            // contours of the left and right subtree up to the highest common level. The
            // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
            // superscript o means outside and i means inside, the subscript - means left
            // subtree and + means right subtree. For summing up the modifiers along the
            // contour, we use respective variables si+, si-, so-, and so+. Whenever two
            // nodes of the inside contours conflict, we compute the left one of the
            // greatest uncommon ancestors using the function ANCESTOR and call MOVE
            // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
            // Finally, we add a new thread (if necessary).
            function apportion(v, w, ancestor) {
                if (w) {
                    var vip = v,
                        vop = v,
                        vim = w,
                        vom = vip.parent.children[0],
                        sip = vip.m,
                        sop = vop.m,
                        sim = vim.m,
                        som = vom.m,
                        shift;
                    while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
                        vom = nextLeft(vom);
                        vop = nextRight(vop);
                        vop.a = v;
                        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
                        if (shift > 0) {
                            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
                            sip += shift;
                            sop += shift;
                        }
                        sim += vim.m;
                        sip += vip.m;
                        som += vom.m;
                        sop += vop.m;
                    }
                    if (vim && !nextRight(vop)) {
                        vop.t = vim;
                        vop.m += sim - sop;
                    }
                    if (vip && !nextLeft(vom)) {
                        vom.t = vip;
                        vom.m += sip - som;
                        ancestor = v;
                    }
                }
                return ancestor;
            }

            function sizeNode(node) {
                node.x *= dx;
                node.y = node.depth * dy;
            }

            tree.separation = function(x) {
                return arguments.length ? (separation = x, tree) : separation;
            };

            tree.size = function(x) {
                return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
            };

            tree.nodeSize = function(x) {
                return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
            };

            return tree;
        };

        var treemapSlice = function(parent, x0, y0, x1, y1) {
            var nodes = parent.children,
                node,
                i = -1,
                n = nodes.length,
                k = parent.value && (y1 - y0) / parent.value;

            while (++i < n) {
                node = nodes[i], node.x0 = x0, node.x1 = x1;
                node.y0 = y0, node.y1 = y0 += node.value * k;
            }
        };

        var phi = (1 + Math.sqrt(5)) / 2;

        function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
            var rows = [],
                nodes = parent.children,
                row,
                nodeValue,
                i0 = 0,
                i1 = 0,
                n = nodes.length,
                dx, dy,
                value = parent.value,
                sumValue,
                minValue,
                maxValue,
                newRatio,
                minRatio,
                alpha,
                beta;

            while (i0 < n) {
                dx = x1 - x0, dy = y1 - y0;

                // Find the next non-empty node.
                do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
                minValue = maxValue = sumValue;
                alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
                beta = sumValue * sumValue * alpha;
                minRatio = Math.max(maxValue / beta, beta / minValue);

                // Keep adding nodes while the aspect ratio maintains or improves.
                for (; i1 < n; ++i1) {
                    sumValue += nodeValue = nodes[i1].value;
                    if (nodeValue < minValue) minValue = nodeValue;
                    if (nodeValue > maxValue) maxValue = nodeValue;
                    beta = sumValue * sumValue * alpha;
                    newRatio = Math.max(maxValue / beta, beta / minValue);
                    if (newRatio > minRatio) { sumValue -= nodeValue; break; }
                    minRatio = newRatio;
                }

                // Position and record the row orientation.
                rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
                if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
                else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
                value -= sumValue, i0 = i1;
            }

            return rows;
        }

        var squarify = ((function custom(ratio) {

            function squarify(parent, x0, y0, x1, y1) {
                squarifyRatio(ratio, parent, x0, y0, x1, y1);
            }

            squarify.ratio = function(x) {
                return custom((x = +x) > 1 ? x : 1);
            };

            return squarify;
        }))(phi);

        var index$1 = function() {
            var tile = squarify,
                round = false,
                dx = 1,
                dy = 1,
                paddingStack = [0],
                paddingInner = constantZero,
                paddingTop = constantZero,
                paddingRight = constantZero,
                paddingBottom = constantZero,
                paddingLeft = constantZero;

            function treemap(root) {
                root.x0 =
                    root.y0 = 0;
                root.x1 = dx;
                root.y1 = dy;
                root.eachBefore(positionNode);
                paddingStack = [0];
                if (round) root.eachBefore(roundNode);
                return root;
            }

            function positionNode(node) {
                var p = paddingStack[node.depth],
                    x0 = node.x0 + p,
                    y0 = node.y0 + p,
                    x1 = node.x1 - p,
                    y1 = node.y1 - p;
                if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
                if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
                node.x0 = x0;
                node.y0 = y0;
                node.x1 = x1;
                node.y1 = y1;
                if (node.children) {
                    p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
                    x0 += paddingLeft(node) - p;
                    y0 += paddingTop(node) - p;
                    x1 -= paddingRight(node) - p;
                    y1 -= paddingBottom(node) - p;
                    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
                    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
                    tile(node, x0, y0, x1, y1);
                }
            }

            treemap.round = function(x) {
                return arguments.length ? (round = !!x, treemap) : round;
            };

            treemap.size = function(x) {
                return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
            };

            treemap.tile = function(x) {
                return arguments.length ? (tile = required(x), treemap) : tile;
            };

            treemap.padding = function(x) {
                return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
            };

            treemap.paddingInner = function(x) {
                return arguments.length ? (paddingInner = typeof x === "function" ? x : constant(+x), treemap) : paddingInner;
            };

            treemap.paddingOuter = function(x) {
                return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
            };

            treemap.paddingTop = function(x) {
                return arguments.length ? (paddingTop = typeof x === "function" ? x : constant(+x), treemap) : paddingTop;
            };

            treemap.paddingRight = function(x) {
                return arguments.length ? (paddingRight = typeof x === "function" ? x : constant(+x), treemap) : paddingRight;
            };

            treemap.paddingBottom = function(x) {
                return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant(+x), treemap) : paddingBottom;
            };

            treemap.paddingLeft = function(x) {
                return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant(+x), treemap) : paddingLeft;
            };

            return treemap;
        };

        var binary = function(parent, x0, y0, x1, y1) {
            var nodes = parent.children,
                i, n = nodes.length,
                sum, sums = new Array(n + 1);

            for (sums[0] = sum = i = 0; i < n; ++i) {
                sums[i + 1] = sum += nodes[i].value;
            }

            partition(0, n, parent.value, x0, y0, x1, y1);

            function partition(i, j, value, x0, y0, x1, y1) {
                if (i >= j - 1) {
                    var node = nodes[i];
                    node.x0 = x0, node.y0 = y0;
                    node.x1 = x1, node.y1 = y1;
                    return;
                }

                var valueOffset = sums[i],
                    valueTarget = (value / 2) + valueOffset,
                    k = i + 1,
                    hi = j - 1;

                while (k < hi) {
                    var mid = k + hi >>> 1;
                    if (sums[mid] < valueTarget) k = mid + 1;
                    else hi = mid;
                }

                if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

                var valueLeft = sums[k] - valueOffset,
                    valueRight = value - valueLeft;

                if ((x1 - x0) > (y1 - y0)) {
                    var xk = (x0 * valueRight + x1 * valueLeft) / value;
                    partition(i, k, valueLeft, x0, y0, xk, y1);
                    partition(k, j, valueRight, xk, y0, x1, y1);
                } else {
                    var yk = (y0 * valueRight + y1 * valueLeft) / value;
                    partition(i, k, valueLeft, x0, y0, x1, yk);
                    partition(k, j, valueRight, x0, yk, x1, y1);
                }
            }
        };

        var sliceDice = function(parent, x0, y0, x1, y1) {
            (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
        };

        var resquarify = ((function custom(ratio) {

            function resquarify(parent, x0, y0, x1, y1) {
                if ((rows = parent._squarify) && (rows.ratio === ratio)) {
                    var rows,
                        row,
                        nodes,
                        i,
                        j = -1,
                        n,
                        m = rows.length,
                        value = parent.value;

                    while (++j < m) {
                        row = rows[j], nodes = row.children;
                        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
                        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
                        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
                        value -= row.value;
                    }
                } else {
                    parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
                    rows.ratio = ratio;
                }
            }

            resquarify.ratio = function(x) {
                return custom((x = +x) > 1 ? x : 1);
            };

            return resquarify;
        }))(phi);

        exports.cluster = cluster;
        exports.hierarchy = hierarchy;
        exports.pack = index;
        exports.packSiblings = siblings;
        exports.packEnclose = enclose;
        exports.partition = partition;
        exports.stratify = stratify;
        exports.tree = tree;
        exports.treemap = index$1;
        exports.treemapBinary = binary;
        exports.treemapDice = treemapDice;
        exports.treemapSlice = treemapSlice;
        exports.treemapSliceDice = sliceDice;
        exports.treemapSquarify = squarify;
        exports.treemapResquarify = resquarify;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],53:[function(require,module,exports){
// https://d3js.org/d3-interpolate/ Version 1.1.6. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-color')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-color'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3));
    }(this, (function (exports,d3Color) { 'use strict';

        function basis(t1, v0, v1, v2, v3) {
            var t2 = t1 * t1, t3 = t2 * t1;
            return ((1 - 3 * t1 + 3 * t2 - t3) * v0
                + (4 - 6 * t2 + 3 * t3) * v1
                + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
                + t3 * v3) / 6;
        }

        var basis$1 = function(values) {
            var n = values.length - 1;
            return function(t) {
                var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
                    v1 = values[i],
                    v2 = values[i + 1],
                    v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
                    v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
                return basis((t - i / n) * n, v0, v1, v2, v3);
            };
        };

        var basisClosed = function(values) {
            var n = values.length;
            return function(t) {
                var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
                    v0 = values[(i + n - 1) % n],
                    v1 = values[i % n],
                    v2 = values[(i + 1) % n],
                    v3 = values[(i + 2) % n];
                return basis((t - i / n) * n, v0, v1, v2, v3);
            };
        };

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        function linear(a, d) {
            return function(t) {
                return a + t * d;
            };
        }

        function exponential(a, b, y) {
            return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
                return Math.pow(a + t * b, y);
            };
        }

        function hue(a, b) {
            var d = b - a;
            return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
        }

        function gamma(y) {
            return (y = +y) === 1 ? nogamma : function(a, b) {
                return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
            };
        }

        function nogamma(a, b) {
            var d = b - a;
            return d ? linear(a, d) : constant(isNaN(a) ? b : a);
        }

        var rgb$1 = ((function rgbGamma(y) {
            var color$$1 = gamma(y);

            function rgb$$1(start, end) {
                var r = color$$1((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r),
                    g = color$$1(start.g, end.g),
                    b = color$$1(start.b, end.b),
                    opacity = nogamma(start.opacity, end.opacity);
                return function(t) {
                    start.r = r(t);
                    start.g = g(t);
                    start.b = b(t);
                    start.opacity = opacity(t);
                    return start + "";
                };
            }

            rgb$$1.gamma = rgbGamma;

            return rgb$$1;
        }))(1);

        function rgbSpline(spline) {
            return function(colors) {
                var n = colors.length,
                    r = new Array(n),
                    g = new Array(n),
                    b = new Array(n),
                    i, color$$1;
                for (i = 0; i < n; ++i) {
                    color$$1 = d3Color.rgb(colors[i]);
                    r[i] = color$$1.r || 0;
                    g[i] = color$$1.g || 0;
                    b[i] = color$$1.b || 0;
                }
                r = spline(r);
                g = spline(g);
                b = spline(b);
                color$$1.opacity = 1;
                return function(t) {
                    color$$1.r = r(t);
                    color$$1.g = g(t);
                    color$$1.b = b(t);
                    return color$$1 + "";
                };
            };
        }

        var rgbBasis = rgbSpline(basis$1);
        var rgbBasisClosed = rgbSpline(basisClosed);

        var array = function(a, b) {
            var nb = b ? b.length : 0,
                na = a ? Math.min(nb, a.length) : 0,
                x = new Array(na),
                c = new Array(nb),
                i;

            for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
            for (; i < nb; ++i) c[i] = b[i];

            return function(t) {
                for (i = 0; i < na; ++i) c[i] = x[i](t);
                return c;
            };
        };

        var date = function(a, b) {
            var d = new Date;
            return a = +a, b -= a, function(t) {
                return d.setTime(a + b * t), d;
            };
        };

        var number = function(a, b) {
            return a = +a, b -= a, function(t) {
                return a + b * t;
            };
        };

        var object = function(a, b) {
            var i = {},
                c = {},
                k;

            if (a === null || typeof a !== "object") a = {};
            if (b === null || typeof b !== "object") b = {};

            for (k in b) {
                if (k in a) {
                    i[k] = value(a[k], b[k]);
                } else {
                    c[k] = b[k];
                }
            }

            return function(t) {
                for (k in i) c[k] = i[k](t);
                return c;
            };
        };

        var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
        var reB = new RegExp(reA.source, "g");

        function zero(b) {
            return function() {
                return b;
            };
        }

        function one(b) {
            return function(t) {
                return b(t) + "";
            };
        }

        var string = function(a, b) {
            var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
                am, // current match in a
                bm, // current match in b
                bs, // string preceding current number in b, if any
                i = -1, // index in s
                s = [], // string constants and placeholders
                q = []; // number interpolators

            // Coerce inputs to strings.
            a = a + "", b = b + "";

            // Interpolate pairs of numbers in a & b.
            while ((am = reA.exec(a))
            && (bm = reB.exec(b))) {
                if ((bs = bm.index) > bi) { // a string precedes the next number in b
                    bs = b.slice(bi, bs);
                    if (s[i]) s[i] += bs; // coalesce with previous string
                    else s[++i] = bs;
                }
                if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
                    if (s[i]) s[i] += bm; // coalesce with previous string
                    else s[++i] = bm;
                } else { // interpolate non-matching numbers
                    s[++i] = null;
                    q.push({i: i, x: number(am, bm)});
                }
                bi = reB.lastIndex;
            }

            // Add remains of b.
            if (bi < b.length) {
                bs = b.slice(bi);
                if (s[i]) s[i] += bs; // coalesce with previous string
                else s[++i] = bs;
            }

            // Special optimization for only a single match.
            // Otherwise, interpolate each of the numbers and rejoin the string.
            return s.length < 2 ? (q[0]
                ? one(q[0].x)
                : zero(b))
                : (b = q.length, function(t) {
                    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
                    return s.join("");
                });
        };

        var value = function(a, b) {
            var t = typeof b, c;
            return b == null || t === "boolean" ? constant(b)
                : (t === "number" ? number
                    : t === "string" ? ((c = d3Color.color(b)) ? (b = c, rgb$1) : string)
                        : b instanceof d3Color.color ? rgb$1
                            : b instanceof Date ? date
                                : Array.isArray(b) ? array
                                    : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
                                        : number)(a, b);
        };

        var round = function(a, b) {
            return a = +a, b -= a, function(t) {
                return Math.round(a + b * t);
            };
        };

        var degrees = 180 / Math.PI;

        var identity = {
            translateX: 0,
            translateY: 0,
            rotate: 0,
            skewX: 0,
            scaleX: 1,
            scaleY: 1
        };

        var decompose = function(a, b, c, d, e, f) {
            var scaleX, scaleY, skewX;
            if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
            if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
            if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
            if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
            return {
                translateX: e,
                translateY: f,
                rotate: Math.atan2(b, a) * degrees,
                skewX: Math.atan(skewX) * degrees,
                scaleX: scaleX,
                scaleY: scaleY
            };
        };

        var cssNode;
        var cssRoot;
        var cssView;
        var svgNode;

        function parseCss(value) {
            if (value === "none") return identity;
            if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
            cssNode.style.transform = value;
            value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
            cssRoot.removeChild(cssNode);
            value = value.slice(7, -1).split(",");
            return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
        }

        function parseSvg(value) {
            if (value == null) return identity;
            if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
            svgNode.setAttribute("transform", value);
            if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
            value = value.matrix;
            return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
        }

        function interpolateTransform(parse, pxComma, pxParen, degParen) {

            function pop(s) {
                return s.length ? s.pop() + " " : "";
            }

            function translate(xa, ya, xb, yb, s, q) {
                if (xa !== xb || ya !== yb) {
                    var i = s.push("translate(", null, pxComma, null, pxParen);
                    q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
                } else if (xb || yb) {
                    s.push("translate(" + xb + pxComma + yb + pxParen);
                }
            }

            function rotate(a, b, s, q) {
                if (a !== b) {
                    if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
                    q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b)});
                } else if (b) {
                    s.push(pop(s) + "rotate(" + b + degParen);
                }
            }

            function skewX(a, b, s, q) {
                if (a !== b) {
                    q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b)});
                } else if (b) {
                    s.push(pop(s) + "skewX(" + b + degParen);
                }
            }

            function scale(xa, ya, xb, yb, s, q) {
                if (xa !== xb || ya !== yb) {
                    var i = s.push(pop(s) + "scale(", null, ",", null, ")");
                    q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
                } else if (xb !== 1 || yb !== 1) {
                    s.push(pop(s) + "scale(" + xb + "," + yb + ")");
                }
            }

            return function(a, b) {
                var s = [], // string constants and placeholders
                    q = []; // number interpolators
                a = parse(a), b = parse(b);
                translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
                rotate(a.rotate, b.rotate, s, q);
                skewX(a.skewX, b.skewX, s, q);
                scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
                a = b = null; // gc
                return function(t) {
                    var i = -1, n = q.length, o;
                    while (++i < n) s[(o = q[i]).i] = o.x(t);
                    return s.join("");
                };
            };
        }

        var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
        var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

        var rho = Math.SQRT2;
        var rho2 = 2;
        var rho4 = 4;
        var epsilon2 = 1e-12;

        function cosh(x) {
            return ((x = Math.exp(x)) + 1 / x) / 2;
        }

        function sinh(x) {
            return ((x = Math.exp(x)) - 1 / x) / 2;
        }

        function tanh(x) {
            return ((x = Math.exp(2 * x)) - 1) / (x + 1);
        }

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
        var zoom = function(p0, p1) {
            var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
                ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
                dx = ux1 - ux0,
                dy = uy1 - uy0,
                d2 = dx * dx + dy * dy,
                i,
                S;

            // Special case for u0 ≅ u1.
            if (d2 < epsilon2) {
                S = Math.log(w1 / w0) / rho;
                i = function(t) {
                    return [
                        ux0 + t * dx,
                        uy0 + t * dy,
                        w0 * Math.exp(rho * t * S)
                    ];
                };
            }

            // General case.
            else {
                var d1 = Math.sqrt(d2),
                    b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
                    b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
                    r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
                    r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
                S = (r1 - r0) / rho;
                i = function(t) {
                    var s = t * S,
                        coshr0 = cosh(r0),
                        u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
                    return [
                        ux0 + u * dx,
                        uy0 + u * dy,
                        w0 * coshr0 / cosh(rho * s + r0)
                    ];
                };
            }

            i.duration = S * 1000;

            return i;
        };

        function hsl$1(hue$$1) {
            return function(start, end) {
                var h = hue$$1((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h),
                    s = nogamma(start.s, end.s),
                    l = nogamma(start.l, end.l),
                    opacity = nogamma(start.opacity, end.opacity);
                return function(t) {
                    start.h = h(t);
                    start.s = s(t);
                    start.l = l(t);
                    start.opacity = opacity(t);
                    return start + "";
                };
            }
        }

        var hsl$2 = hsl$1(hue);
        var hslLong = hsl$1(nogamma);

        function lab$1(start, end) {
            var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l),
                a = nogamma(start.a, end.a),
                b = nogamma(start.b, end.b),
                opacity = nogamma(start.opacity, end.opacity);
            return function(t) {
                start.l = l(t);
                start.a = a(t);
                start.b = b(t);
                start.opacity = opacity(t);
                return start + "";
            };
        }

        function hcl$1(hue$$1) {
            return function(start, end) {
                var h = hue$$1((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h),
                    c = nogamma(start.c, end.c),
                    l = nogamma(start.l, end.l),
                    opacity = nogamma(start.opacity, end.opacity);
                return function(t) {
                    start.h = h(t);
                    start.c = c(t);
                    start.l = l(t);
                    start.opacity = opacity(t);
                    return start + "";
                };
            }
        }

        var hcl$2 = hcl$1(hue);
        var hclLong = hcl$1(nogamma);

        function cubehelix$1(hue$$1) {
            return (function cubehelixGamma(y) {
                y = +y;

                function cubehelix$$1(start, end) {
                    var h = hue$$1((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h),
                        s = nogamma(start.s, end.s),
                        l = nogamma(start.l, end.l),
                        opacity = nogamma(start.opacity, end.opacity);
                    return function(t) {
                        start.h = h(t);
                        start.s = s(t);
                        start.l = l(Math.pow(t, y));
                        start.opacity = opacity(t);
                        return start + "";
                    };
                }

                cubehelix$$1.gamma = cubehelixGamma;

                return cubehelix$$1;
            })(1);
        }

        var cubehelix$2 = cubehelix$1(hue);
        var cubehelixLong = cubehelix$1(nogamma);

        var quantize = function(interpolator, n) {
            var samples = new Array(n);
            for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
            return samples;
        };

        exports.interpolate = value;
        exports.interpolateArray = array;
        exports.interpolateBasis = basis$1;
        exports.interpolateBasisClosed = basisClosed;
        exports.interpolateDate = date;
        exports.interpolateNumber = number;
        exports.interpolateObject = object;
        exports.interpolateRound = round;
        exports.interpolateString = string;
        exports.interpolateTransformCss = interpolateTransformCss;
        exports.interpolateTransformSvg = interpolateTransformSvg;
        exports.interpolateZoom = zoom;
        exports.interpolateRgb = rgb$1;
        exports.interpolateRgbBasis = rgbBasis;
        exports.interpolateRgbBasisClosed = rgbBasisClosed;
        exports.interpolateHsl = hsl$2;
        exports.interpolateHslLong = hslLong;
        exports.interpolateLab = lab$1;
        exports.interpolateHcl = hcl$2;
        exports.interpolateHclLong = hclLong;
        exports.interpolateCubehelix = cubehelix$2;
        exports.interpolateCubehelixLong = cubehelixLong;
        exports.quantize = quantize;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-color":44}],54:[function(require,module,exports){
// https://d3js.org/d3-path/ Version 1.0.5. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var pi = Math.PI;
        var tau = 2 * pi;
        var epsilon = 1e-6;
        var tauEpsilon = tau - epsilon;

        function Path() {
            this._x0 = this._y0 = // start of current subpath
                this._x1 = this._y1 = null; // end of current subpath
            this._ = "";
        }

        function path() {
            return new Path;
        }

        Path.prototype = path.prototype = {
            constructor: Path,
            moveTo: function(x, y) {
                this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
            },
            closePath: function() {
                if (this._x1 !== null) {
                    this._x1 = this._x0, this._y1 = this._y0;
                    this._ += "Z";
                }
            },
            lineTo: function(x, y) {
                this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
            },
            quadraticCurveTo: function(x1, y1, x, y) {
                this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
            },
            bezierCurveTo: function(x1, y1, x2, y2, x, y) {
                this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
            },
            arcTo: function(x1, y1, x2, y2, r) {
                x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
                var x0 = this._x1,
                    y0 = this._y1,
                    x21 = x2 - x1,
                    y21 = y2 - y1,
                    x01 = x0 - x1,
                    y01 = y0 - y1,
                    l01_2 = x01 * x01 + y01 * y01;

                // Is the radius negative? Error.
                if (r < 0) throw new Error("negative radius: " + r);

                // Is this path empty? Move to (x1,y1).
                if (this._x1 === null) {
                    this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
                }

                // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
                else if (!(l01_2 > epsilon)) {}

                // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
                // Equivalently, is (x1,y1) coincident with (x2,y2)?
                // Or, is the radius zero? Line to (x1,y1).
                else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
                    this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
                }

                // Otherwise, draw an arc!
                else {
                    var x20 = x2 - x0,
                        y20 = y2 - y0,
                        l21_2 = x21 * x21 + y21 * y21,
                        l20_2 = x20 * x20 + y20 * y20,
                        l21 = Math.sqrt(l21_2),
                        l01 = Math.sqrt(l01_2),
                        l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                        t01 = l / l01,
                        t21 = l / l21;

                    // If the start tangent is not coincident with (x0,y0), line to.
                    if (Math.abs(t01 - 1) > epsilon) {
                        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
                    }

                    this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
                }
            },
            arc: function(x, y, r, a0, a1, ccw) {
                x = +x, y = +y, r = +r;
                var dx = r * Math.cos(a0),
                    dy = r * Math.sin(a0),
                    x0 = x + dx,
                    y0 = y + dy,
                    cw = 1 ^ ccw,
                    da = ccw ? a0 - a1 : a1 - a0;

                // Is the radius negative? Error.
                if (r < 0) throw new Error("negative radius: " + r);

                // Is this path empty? Move to (x0,y0).
                if (this._x1 === null) {
                    this._ += "M" + x0 + "," + y0;
                }

                // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
                else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
                    this._ += "L" + x0 + "," + y0;
                }

                // Is this arc empty? We’re done.
                if (!r) return;

                // Does the angle go the wrong way? Flip the direction.
                if (da < 0) da = da % tau + tau;

                // Is this a complete circle? Draw two arcs to complete the circle.
                if (da > tauEpsilon) {
                    this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
                }

                // Is this arc non-empty? Draw an arc!
                else if (da > epsilon) {
                    this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
                }
            },
            rect: function(x, y, w, h) {
                this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
            },
            toString: function() {
                return this._;
            }
        };

        exports.path = path;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],55:[function(require,module,exports){
// https://d3js.org/d3-polygon/ Version 1.0.3. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var area = function(polygon) {
            var i = -1,
                n = polygon.length,
                a,
                b = polygon[n - 1],
                area = 0;

            while (++i < n) {
                a = b;
                b = polygon[i];
                area += a[1] * b[0] - a[0] * b[1];
            }

            return area / 2;
        };

        var centroid = function(polygon) {
            var i = -1,
                n = polygon.length,
                x = 0,
                y = 0,
                a,
                b = polygon[n - 1],
                c,
                k = 0;

            while (++i < n) {
                a = b;
                b = polygon[i];
                k += c = a[0] * b[1] - b[0] * a[1];
                x += (a[0] + b[0]) * c;
                y += (a[1] + b[1]) * c;
            }

            return k *= 3, [x / k, y / k];
        };

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
        var cross = function(a, b, c) {
            return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
        };

        function lexicographicOrder(a, b) {
            return a[0] - b[0] || a[1] - b[1];
        }

// Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.
        function computeUpperHullIndexes(points) {
            var n = points.length,
                indexes = [0, 1],
                size = 2;

            for (var i = 2; i < n; ++i) {
                while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
                indexes[size++] = i;
            }

            return indexes.slice(0, size); // remove popped points
        }

        var hull = function(points) {
            if ((n = points.length) < 3) return null;

            var i,
                n,
                sortedPoints = new Array(n),
                flippedPoints = new Array(n);

            for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
            sortedPoints.sort(lexicographicOrder);
            for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

            var upperIndexes = computeUpperHullIndexes(sortedPoints),
                lowerIndexes = computeUpperHullIndexes(flippedPoints);

            // Construct the hull polygon, removing possible duplicate endpoints.
            var skipLeft = lowerIndexes[0] === upperIndexes[0],
                skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
                hull = [];

            // Add upper hull in right-to-l order.
            // Then add lower hull in left-to-right order.
            for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
            for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

            return hull;
        };

        var contains = function(polygon, point) {
            var n = polygon.length,
                p = polygon[n - 1],
                x = point[0], y = point[1],
                x0 = p[0], y0 = p[1],
                x1, y1,
                inside = false;

            for (var i = 0; i < n; ++i) {
                p = polygon[i], x1 = p[0], y1 = p[1];
                if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
                x0 = x1, y0 = y1;
            }

            return inside;
        };

        var length = function(polygon) {
            var i = -1,
                n = polygon.length,
                b = polygon[n - 1],
                xa,
                ya,
                xb = b[0],
                yb = b[1],
                perimeter = 0;

            while (++i < n) {
                xa = xb;
                ya = yb;
                b = polygon[i];
                xb = b[0];
                yb = b[1];
                xa -= xb;
                ya -= yb;
                perimeter += Math.sqrt(xa * xa + ya * ya);
            }

            return perimeter;
        };

        exports.polygonArea = area;
        exports.polygonCentroid = centroid;
        exports.polygonHull = hull;
        exports.polygonContains = contains;
        exports.polygonLength = length;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],56:[function(require,module,exports){
// https://d3js.org/d3-quadtree/ Version 1.0.3. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var tree_add = function(d) {
            var x = +this._x.call(null, d),
                y = +this._y.call(null, d);
            return add(this.cover(x, y), x, y, d);
        };

        function add(tree, x, y, d) {
            if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

            var parent,
                node = tree._root,
                leaf = {data: d},
                x0 = tree._x0,
                y0 = tree._y0,
                x1 = tree._x1,
                y1 = tree._y1,
                xm,
                ym,
                xp,
                yp,
                right,
                bottom,
                i,
                j;

            // If the tree is empty, initialize the root as a leaf.
            if (!node) return tree._root = leaf, tree;

            // Find the existing leaf for the new point, or add it.
            while (node.length) {
                if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
                if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
                if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
            }

            // Is the new point is exactly coincident with the existing point?
            xp = +tree._x.call(null, node.data);
            yp = +tree._y.call(null, node.data);
            if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

            // Otherwise, split the leaf node until the old and new point are separated.
            do {
                parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
                if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
                if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
            } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
            return parent[j] = node, parent[i] = leaf, tree;
        }

        function addAll(data) {
            var d, i, n = data.length,
                x,
                y,
                xz = new Array(n),
                yz = new Array(n),
                x0 = Infinity,
                y0 = Infinity,
                x1 = -Infinity,
                y1 = -Infinity;

            // Compute the points and their extent.
            for (i = 0; i < n; ++i) {
                if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
                xz[i] = x;
                yz[i] = y;
                if (x < x0) x0 = x;
                if (x > x1) x1 = x;
                if (y < y0) y0 = y;
                if (y > y1) y1 = y;
            }

            // If there were no (valid) points, inherit the existing extent.
            if (x1 < x0) x0 = this._x0, x1 = this._x1;
            if (y1 < y0) y0 = this._y0, y1 = this._y1;

            // Expand the tree to cover the new points.
            this.cover(x0, y0).cover(x1, y1);

            // Add the new points.
            for (i = 0; i < n; ++i) {
                add(this, xz[i], yz[i], data[i]);
            }

            return this;
        }

        var tree_cover = function(x, y) {
            if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

            var x0 = this._x0,
                y0 = this._y0,
                x1 = this._x1,
                y1 = this._y1;

            // If the quadtree has no extent, initialize them.
            // Integer extent are necessary so that if we later double the extent,
            // the existing quadrant boundaries don’t change due to floating point error!
            if (isNaN(x0)) {
                x1 = (x0 = Math.floor(x)) + 1;
                y1 = (y0 = Math.floor(y)) + 1;
            }

            // Otherwise, double repeatedly to cover.
            else if (x0 > x || x > x1 || y0 > y || y > y1) {
                var z = x1 - x0,
                    node = this._root,
                    parent,
                    i;

                switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
                    case 0: {
                        do parent = new Array(4), parent[i] = node, node = parent;
                        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
                        break;
                    }
                    case 1: {
                        do parent = new Array(4), parent[i] = node, node = parent;
                        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
                        break;
                    }
                    case 2: {
                        do parent = new Array(4), parent[i] = node, node = parent;
                        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
                        break;
                    }
                    case 3: {
                        do parent = new Array(4), parent[i] = node, node = parent;
                        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
                        break;
                    }
                }

                if (this._root && this._root.length) this._root = node;
            }

            // If the quadtree covers the point already, just return.
            else return this;

            this._x0 = x0;
            this._y0 = y0;
            this._x1 = x1;
            this._y1 = y1;
            return this;
        };

        var tree_data = function() {
            var data = [];
            this.visit(function(node) {
                if (!node.length) do data.push(node.data); while (node = node.next)
            });
            return data;
        };

        var tree_extent = function(_) {
            return arguments.length
                ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
                : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
        };

        var Quad = function(node, x0, y0, x1, y1) {
            this.node = node;
            this.x0 = x0;
            this.y0 = y0;
            this.x1 = x1;
            this.y1 = y1;
        };

        var tree_find = function(x, y, radius) {
            var data,
                x0 = this._x0,
                y0 = this._y0,
                x1,
                y1,
                x2,
                y2,
                x3 = this._x1,
                y3 = this._y1,
                quads = [],
                node = this._root,
                q,
                i;

            if (node) quads.push(new Quad(node, x0, y0, x3, y3));
            if (radius == null) radius = Infinity;
            else {
                x0 = x - radius, y0 = y - radius;
                x3 = x + radius, y3 = y + radius;
                radius *= radius;
            }

            while (q = quads.pop()) {

                // Stop searching if this quadrant can’t contain a closer node.
                if (!(node = q.node)
                    || (x1 = q.x0) > x3
                    || (y1 = q.y0) > y3
                    || (x2 = q.x1) < x0
                    || (y2 = q.y1) < y0) continue;

                // Bisect the current quadrant.
                if (node.length) {
                    var xm = (x1 + x2) / 2,
                        ym = (y1 + y2) / 2;

                    quads.push(
                        new Quad(node[3], xm, ym, x2, y2),
                        new Quad(node[2], x1, ym, xm, y2),
                        new Quad(node[1], xm, y1, x2, ym),
                        new Quad(node[0], x1, y1, xm, ym)
                    );

                    // Visit the closest quadrant first.
                    if (i = (y >= ym) << 1 | (x >= xm)) {
                        q = quads[quads.length - 1];
                        quads[quads.length - 1] = quads[quads.length - 1 - i];
                        quads[quads.length - 1 - i] = q;
                    }
                }

                // Visit this point. (Visiting coincident points isn’t necessary!)
                else {
                    var dx = x - +this._x.call(null, node.data),
                        dy = y - +this._y.call(null, node.data),
                        d2 = dx * dx + dy * dy;
                    if (d2 < radius) {
                        var d = Math.sqrt(radius = d2);
                        x0 = x - d, y0 = y - d;
                        x3 = x + d, y3 = y + d;
                        data = node.data;
                    }
                }
            }

            return data;
        };

        var tree_remove = function(d) {
            if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

            var parent,
                node = this._root,
                retainer,
                previous,
                next,
                x0 = this._x0,
                y0 = this._y0,
                x1 = this._x1,
                y1 = this._y1,
                x,
                y,
                xm,
                ym,
                right,
                bottom,
                i,
                j;

            // If the tree is empty, initialize the root as a leaf.
            if (!node) return this;

            // Find the leaf node for the point.
            // While descending, also retain the deepest parent with a non-removed sibling.
            if (node.length) while (true) {
                if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
                if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
                if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
                if (!node.length) break;
                if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
            }

            // Find the point to remove.
            while (node.data !== d) if (!(previous = node, node = node.next)) return this;
            if (next = node.next) delete node.next;

            // If there are multiple coincident points, remove just the point.
            if (previous) return (next ? previous.next = next : delete previous.next), this;

            // If this is the root point, remove it.
            if (!parent) return this._root = next, this;

            // Remove this leaf.
            next ? parent[i] = next : delete parent[i];

            // If the parent now contains exactly one leaf, collapse superfluous parents.
            if ((node = parent[0] || parent[1] || parent[2] || parent[3])
                && node === (parent[3] || parent[2] || parent[1] || parent[0])
                && !node.length) {
                if (retainer) retainer[j] = node;
                else this._root = node;
            }

            return this;
        };

        function removeAll(data) {
            for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
            return this;
        }

        var tree_root = function() {
            return this._root;
        };

        var tree_size = function() {
            var size = 0;
            this.visit(function(node) {
                if (!node.length) do ++size; while (node = node.next)
            });
            return size;
        };

        var tree_visit = function(callback) {
            var quads = [], q, node = this._root, child, x0, y0, x1, y1;
            if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
            while (q = quads.pop()) {
                if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
                    var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
                    if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
                    if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
                    if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
                    if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
                }
            }
            return this;
        };

        var tree_visitAfter = function(callback) {
            var quads = [], next = [], q;
            if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
            while (q = quads.pop()) {
                var node = q.node;
                if (node.length) {
                    var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
                    if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
                    if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
                    if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
                    if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
                }
                next.push(q);
            }
            while (q = next.pop()) {
                callback(q.node, q.x0, q.y0, q.x1, q.y1);
            }
            return this;
        };

        function defaultX(d) {
            return d[0];
        }

        var tree_x = function(_) {
            return arguments.length ? (this._x = _, this) : this._x;
        };

        function defaultY(d) {
            return d[1];
        }

        var tree_y = function(_) {
            return arguments.length ? (this._y = _, this) : this._y;
        };

        function quadtree(nodes, x, y) {
            var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
            return nodes == null ? tree : tree.addAll(nodes);
        }

        function Quadtree(x, y, x0, y0, x1, y1) {
            this._x = x;
            this._y = y;
            this._x0 = x0;
            this._y0 = y0;
            this._x1 = x1;
            this._y1 = y1;
            this._root = undefined;
        }

        function leaf_copy(leaf) {
            var copy = {data: leaf.data}, next = copy;
            while (leaf = leaf.next) next = next.next = {data: leaf.data};
            return copy;
        }

        var treeProto = quadtree.prototype = Quadtree.prototype;

        treeProto.copy = function() {
            var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
                node = this._root,
                nodes,
                child;

            if (!node) return copy;

            if (!node.length) return copy._root = leaf_copy(node), copy;

            nodes = [{source: node, target: copy._root = new Array(4)}];
            while (node = nodes.pop()) {
                for (var i = 0; i < 4; ++i) {
                    if (child = node.source[i]) {
                        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
                        else node.target[i] = leaf_copy(child);
                    }
                }
            }

            return copy;
        };

        treeProto.add = tree_add;
        treeProto.addAll = addAll;
        treeProto.cover = tree_cover;
        treeProto.data = tree_data;
        treeProto.extent = tree_extent;
        treeProto.find = tree_find;
        treeProto.remove = tree_remove;
        treeProto.removeAll = removeAll;
        treeProto.root = tree_root;
        treeProto.size = tree_size;
        treeProto.visit = tree_visit;
        treeProto.visitAfter = tree_visitAfter;
        treeProto.x = tree_x;
        treeProto.y = tree_y;

        exports.quadtree = quadtree;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],57:[function(require,module,exports){
// https://d3js.org/d3-queue/ Version 3.0.7. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var slice = [].slice;

        var noabort = {};

        function Queue(size) {
            this._size = size;
            this._call =
                this._error = null;
            this._tasks = [];
            this._data = [];
            this._waiting =
                this._active =
                    this._ended =
                        this._start = 0; // inside a synchronous task callback?
        }

        Queue.prototype = queue.prototype = {
            constructor: Queue,
            defer: function(callback) {
                if (typeof callback !== "function") throw new Error("invalid callback");
                if (this._call) throw new Error("defer after await");
                if (this._error != null) return this;
                var t = slice.call(arguments, 1);
                t.push(callback);
                ++this._waiting, this._tasks.push(t);
                poke(this);
                return this;
            },
            abort: function() {
                if (this._error == null) abort(this, new Error("abort"));
                return this;
            },
            await: function(callback) {
                if (typeof callback !== "function") throw new Error("invalid callback");
                if (this._call) throw new Error("multiple await");
                this._call = function(error, results) { callback.apply(null, [error].concat(results)); };
                maybeNotify(this);
                return this;
            },
            awaitAll: function(callback) {
                if (typeof callback !== "function") throw new Error("invalid callback");
                if (this._call) throw new Error("multiple await");
                this._call = callback;
                maybeNotify(this);
                return this;
            }
        };

        function poke(q) {
            if (!q._start) {
                try { start(q); } // let the current task complete
                catch (e) {
                    if (q._tasks[q._ended + q._active - 1]) abort(q, e); // task errored synchronously
                    else if (!q._data) throw e; // await callback errored synchronously
                }
            }
        }

        function start(q) {
            while (q._start = q._waiting && q._active < q._size) {
                var i = q._ended + q._active,
                    t = q._tasks[i],
                    j = t.length - 1,
                    c = t[j];
                t[j] = end(q, i);
                --q._waiting, ++q._active;
                t = c.apply(null, t);
                if (!q._tasks[i]) continue; // task finished synchronously
                q._tasks[i] = t || noabort;
            }
        }

        function end(q, i) {
            return function(e, r) {
                if (!q._tasks[i]) return; // ignore multiple callbacks
                --q._active, ++q._ended;
                q._tasks[i] = null;
                if (q._error != null) return; // ignore secondary errors
                if (e != null) {
                    abort(q, e);
                } else {
                    q._data[i] = r;
                    if (q._waiting) poke(q);
                    else maybeNotify(q);
                }
            };
        }

        function abort(q, e) {
            var i = q._tasks.length, t;
            q._error = e; // ignore active callbacks
            q._data = undefined; // allow gc
            q._waiting = NaN; // prevent starting

            while (--i >= 0) {
                if (t = q._tasks[i]) {
                    q._tasks[i] = null;
                    if (t.abort) {
                        try { t.abort(); }
                        catch (e) { /* ignore */ }
                    }
                }
            }

            q._active = NaN; // allow notification
            maybeNotify(q);
        }

        function maybeNotify(q) {
            if (!q._active && q._call) {
                var d = q._data;
                q._data = undefined; // allow gc
                q._call(q._error, d);
            }
        }

        function queue(concurrency) {
            if (concurrency == null) concurrency = Infinity;
            else if (!((concurrency = +concurrency) >= 1)) throw new Error("invalid concurrency");
            return new Queue(concurrency);
        }

        exports.queue = queue;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],58:[function(require,module,exports){
// https://d3js.org/d3-random/ Version 1.1.0. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var defaultSource = function() {
            return Math.random();
        };

        var uniform = ((function sourceRandomUniform(source) {
            function randomUniform(min, max) {
                min = min == null ? 0 : +min;
                max = max == null ? 1 : +max;
                if (arguments.length === 1) max = min, min = 0;
                else max -= min;
                return function() {
                    return source() * max + min;
                };
            }

            randomUniform.source = sourceRandomUniform;

            return randomUniform;
        }))(defaultSource);

        var normal = ((function sourceRandomNormal(source) {
            function randomNormal(mu, sigma) {
                var x, r;
                mu = mu == null ? 0 : +mu;
                sigma = sigma == null ? 1 : +sigma;
                return function() {
                    var y;

                    // If available, use the second previously-generated uniform random.
                    if (x != null) y = x, x = null;

                    // Otherwise, generate a new x and y.
                    else do {
                        x = source() * 2 - 1;
                        y = source() * 2 - 1;
                        r = x * x + y * y;
                    } while (!r || r > 1);

                    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
                };
            }

            randomNormal.source = sourceRandomNormal;

            return randomNormal;
        }))(defaultSource);

        var logNormal = ((function sourceRandomLogNormal(source) {
            function randomLogNormal() {
                var randomNormal = normal.source(source).apply(this, arguments);
                return function() {
                    return Math.exp(randomNormal());
                };
            }

            randomLogNormal.source = sourceRandomLogNormal;

            return randomLogNormal;
        }))(defaultSource);

        var irwinHall = ((function sourceRandomIrwinHall(source) {
            function randomIrwinHall(n) {
                return function() {
                    for (var sum = 0, i = 0; i < n; ++i) sum += source();
                    return sum;
                };
            }

            randomIrwinHall.source = sourceRandomIrwinHall;

            return randomIrwinHall;
        }))(defaultSource);

        var bates = ((function sourceRandomBates(source) {
            function randomBates(n) {
                var randomIrwinHall = irwinHall.source(source)(n);
                return function() {
                    return randomIrwinHall() / n;
                };
            }

            randomBates.source = sourceRandomBates;

            return randomBates;
        }))(defaultSource);

        var exponential = ((function sourceRandomExponential(source) {
            function randomExponential(lambda) {
                return function() {
                    return -Math.log(1 - source()) / lambda;
                };
            }

            randomExponential.source = sourceRandomExponential;

            return randomExponential;
        }))(defaultSource);

        exports.randomUniform = uniform;
        exports.randomNormal = normal;
        exports.randomLogNormal = logNormal;
        exports.randomBates = bates;
        exports.randomIrwinHall = irwinHall;
        exports.randomExponential = exponential;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],59:[function(require,module,exports){
    'use strict';

    var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;

    Object.defineProperty(exports, '__esModule', { value: true });

    var d3Collection = require('d3-collection');
    var d3Dispatch = require('d3-dispatch');
    var d3Dsv = require('d3-dsv');

    var request = function(url, callback) {
        var request,
            event = d3Dispatch.dispatch("beforesend", "progress", "load", "error"),
            mimeType,
            headers = d3Collection.map(),
            xhr = new XMLHttpRequest,
            user = null,
            password = null,
            response,
            responseType,
            timeout = 0;

        // If IE does not support CORS, use XDomainRequest.
        if (typeof XDomainRequest !== "undefined"
            && !("withCredentials" in xhr)
            && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;

        "onload" in xhr
            ? xhr.onload = xhr.onerror = xhr.ontimeout = respond
            : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };

        function respond(o) {
            var status = xhr.status, result;
            if (!status && hasResponse(xhr)
                || status >= 200 && status < 300
                || status === 304) {
                if (response) {
                    try {
                        result = response.call(request, xhr);
                    } catch (e) {
                        event.call("error", request, e);
                        return;
                    }
                } else {
                    result = xhr;
                }
                event.call("load", request, result);
            } else {
                event.call("error", request, o);
            }
        }

        xhr.onprogress = function(e) {
            event.call("progress", request, e);
        };

        request = {
            header: function(name, value) {
                name = (name + "").toLowerCase();
                if (arguments.length < 2) return headers.get(name);
                if (value == null) headers.remove(name);
                else headers.set(name, value + "");
                return request;
            },

            // If mimeType is non-null and no Accept header is set, a default is used.
            mimeType: function(value) {
                if (!arguments.length) return mimeType;
                mimeType = value == null ? null : value + "";
                return request;
            },

            // Specifies what type the response value should take;
            // for instance, arraybuffer, blob, document, or text.
            responseType: function(value) {
                if (!arguments.length) return responseType;
                responseType = value;
                return request;
            },

            timeout: function(value) {
                if (!arguments.length) return timeout;
                timeout = +value;
                return request;
            },

            user: function(value) {
                return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
            },

            password: function(value) {
                return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
            },

            // Specify how to convert the response content to a specific type;
            // changes the callback value on "load" events.
            response: function(value) {
                response = value;
                return request;
            },

            // Alias for send("GET", …).
            get: function(data, callback) {
                return request.send("GET", data, callback);
            },

            // Alias for send("POST", …).
            post: function(data, callback) {
                return request.send("POST", data, callback);
            },

            // If callback is non-null, it will be used for error and load events.
            send: function(method, data, callback) {
                xhr.open(method, url, true, user, password);
                if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
                if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });
                if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
                if (responseType != null) xhr.responseType = responseType;
                if (timeout > 0) xhr.timeout = timeout;
                if (callback == null && typeof data === "function") callback = data, data = null;
                if (callback != null && callback.length === 1) callback = fixCallback(callback);
                if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });
                event.call("beforesend", request, xhr);
                xhr.send(data == null ? null : data);
                return request;
            },

            abort: function() {
                xhr.abort();
                return request;
            },

            on: function() {
                var value = event.on.apply(event, arguments);
                return value === event ? request : value;
            }
        };

        if (callback != null) {
            if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
            return request.get(callback);
        }

        return request;
    };

    function fixCallback(callback) {
        return function(error, xhr) {
            callback(error == null ? xhr : null);
        };
    }

    function hasResponse(xhr) {
        var type = xhr.responseType;
        return type && type !== "text"
            ? xhr.response // null on error
            : xhr.responseText; // "" on error
    }

    var type = function(defaultMimeType, response) {
        return function(url, callback) {
            var r = request(url).mimeType(defaultMimeType).response(response);
            if (callback != null) {
                if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
                return r.get(callback);
            }
            return r;
        };
    };

    var html = type("text/html", function(xhr) {
        return document.createRange().createContextualFragment(xhr.responseText);
    });

    var json = type("application/json", function(xhr) {
        return JSON.parse(xhr.responseText);
    });

    var text = type("text/plain", function(xhr) {
        return xhr.responseText;
    });

    var xml = type("application/xml", function(xhr) {
        var xml = xhr.responseXML;
        if (!xml) throw new Error("parse error");
        return xml;
    });

    var dsv = function(defaultMimeType, parse) {
        return function(url, row, callback) {
            if (arguments.length < 3) callback = row, row = null;
            var r = request(url).mimeType(defaultMimeType);
            r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };
            r.row(row);
            return callback ? r.get(callback) : r;
        };
    };

    function responseOf(parse, row) {
        return function(request$$1) {
            return parse(request$$1.responseText, row);
        };
    }

    var csv = dsv("text/csv", d3Dsv.csvParse);

    var tsv = dsv("text/tab-separated-values", d3Dsv.tsvParse);

    exports.request = request;
    exports.html = html;
    exports.json = json;
    exports.text = text;
    exports.xml = xml;
    exports.csv = csv;
    exports.tsv = tsv;

},{"d3-collection":43,"d3-dispatch":45,"d3-dsv":47,"xmlhttprequest":148}],60:[function(require,module,exports){
// https://d3js.org/d3-scale/ Version 1.0.7. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-collection'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format'), require('d3-color')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-collection', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format', 'd3-color'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));
    }(this, (function (exports,d3Array,d3Collection,d3Interpolate,d3Format,d3Time,d3TimeFormat,d3Color) { 'use strict';

        var array = Array.prototype;

        var map$1 = array.map;
        var slice = array.slice;

        var implicit = {name: "implicit"};

        function ordinal(range$$1) {
            var index = d3Collection.map(),
                domain = [],
                unknown = implicit;

            range$$1 = range$$1 == null ? [] : slice.call(range$$1);

            function scale(d) {
                var key = d + "", i = index.get(key);
                if (!i) {
                    if (unknown !== implicit) return unknown;
                    index.set(key, i = domain.push(d));
                }
                return range$$1[(i - 1) % range$$1.length];
            }

            scale.domain = function(_) {
                if (!arguments.length) return domain.slice();
                domain = [], index = d3Collection.map();
                var i = -1, n = _.length, d, key;
                while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
                return scale;
            };

            scale.range = function(_) {
                return arguments.length ? (range$$1 = slice.call(_), scale) : range$$1.slice();
            };

            scale.unknown = function(_) {
                return arguments.length ? (unknown = _, scale) : unknown;
            };

            scale.copy = function() {
                return ordinal()
                    .domain(domain)
                    .range(range$$1)
                    .unknown(unknown);
            };

            return scale;
        }

        function band() {
            var scale = ordinal().unknown(undefined),
                domain = scale.domain,
                ordinalRange = scale.range,
                range$$1 = [0, 1],
                step,
                bandwidth,
                round = false,
                paddingInner = 0,
                paddingOuter = 0,
                align = 0.5;

            delete scale.unknown;

            function rescale() {
                var n = domain().length,
                    reverse = range$$1[1] < range$$1[0],
                    start = range$$1[reverse - 0],
                    stop = range$$1[1 - reverse];
                step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
                if (round) step = Math.floor(step);
                start += (stop - start - step * (n - paddingInner)) * align;
                bandwidth = step * (1 - paddingInner);
                if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
                var values = d3Array.range(n).map(function(i) { return start + step * i; });
                return ordinalRange(reverse ? values.reverse() : values);
            }

            scale.domain = function(_) {
                return arguments.length ? (domain(_), rescale()) : domain();
            };

            scale.range = function(_) {
                return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();
            };

            scale.rangeRound = function(_) {
                return range$$1 = [+_[0], +_[1]], round = true, rescale();
            };

            scale.bandwidth = function() {
                return bandwidth;
            };

            scale.step = function() {
                return step;
            };

            scale.round = function(_) {
                return arguments.length ? (round = !!_, rescale()) : round;
            };

            scale.padding = function(_) {
                return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
            };

            scale.paddingInner = function(_) {
                return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
            };

            scale.paddingOuter = function(_) {
                return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
            };

            scale.align = function(_) {
                return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
            };

            scale.copy = function() {
                return band()
                    .domain(domain())
                    .range(range$$1)
                    .round(round)
                    .paddingInner(paddingInner)
                    .paddingOuter(paddingOuter)
                    .align(align);
            };

            return rescale();
        }

        function pointish(scale) {
            var copy = scale.copy;

            scale.padding = scale.paddingOuter;
            delete scale.paddingInner;
            delete scale.paddingOuter;

            scale.copy = function() {
                return pointish(copy());
            };

            return scale;
        }

        function point() {
            return pointish(band().paddingInner(1));
        }

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        var number = function(x) {
            return +x;
        };

        var unit = [0, 1];

        function deinterpolateLinear(a, b) {
            return (b -= (a = +a))
                ? function(x) { return (x - a) / b; }
                : constant(b);
        }

        function deinterpolateClamp(deinterpolate) {
            return function(a, b) {
                var d = deinterpolate(a = +a, b = +b);
                return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
            };
        }

        function reinterpolateClamp(reinterpolate) {
            return function(a, b) {
                var r = reinterpolate(a = +a, b = +b);
                return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
            };
        }

        function bimap(domain, range$$1, deinterpolate, reinterpolate) {
            var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
            if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
            else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
            return function(x) { return r0(d0(x)); };
        }

        function polymap(domain, range$$1, deinterpolate, reinterpolate) {
            var j = Math.min(domain.length, range$$1.length) - 1,
                d = new Array(j),
                r = new Array(j),
                i = -1;

            // Reverse descending domains.
            if (domain[j] < domain[0]) {
                domain = domain.slice().reverse();
                range$$1 = range$$1.slice().reverse();
            }

            while (++i < j) {
                d[i] = deinterpolate(domain[i], domain[i + 1]);
                r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
            }

            return function(x) {
                var i = d3Array.bisect(domain, x, 1, j) - 1;
                return r[i](d[i](x));
            };
        }

        function copy(source, target) {
            return target
                .domain(source.domain())
                .range(source.range())
                .interpolate(source.interpolate())
                .clamp(source.clamp());
        }

// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
        function continuous(deinterpolate, reinterpolate) {
            var domain = unit,
                range$$1 = unit,
                interpolate$$1 = d3Interpolate.interpolate,
                clamp = false,
                piecewise,
                output,
                input;

            function rescale() {
                piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
                output = input = null;
                return scale;
            }

            function scale(x) {
                return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
            }

            scale.invert = function(y) {
                return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
            };

            scale.domain = function(_) {
                return arguments.length ? (domain = map$1.call(_, number), rescale()) : domain.slice();
            };

            scale.range = function(_) {
                return arguments.length ? (range$$1 = slice.call(_), rescale()) : range$$1.slice();
            };

            scale.rangeRound = function(_) {
                return range$$1 = slice.call(_), interpolate$$1 = d3Interpolate.interpolateRound, rescale();
            };

            scale.clamp = function(_) {
                return arguments.length ? (clamp = !!_, rescale()) : clamp;
            };

            scale.interpolate = function(_) {
                return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
            };

            return rescale();
        }

        var tickFormat = function(domain, count, specifier) {
            var start = domain[0],
                stop = domain[domain.length - 1],
                step = d3Array.tickStep(start, stop, count == null ? 10 : count),
                precision;
            specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
            switch (specifier.type) {
                case "s": {
                    var value = Math.max(Math.abs(start), Math.abs(stop));
                    if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;
                    return d3Format.formatPrefix(specifier, value);
                }
                case "":
                case "e":
                case "g":
                case "p":
                case "r": {
                    if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
                    break;
                }
                case "f":
                case "%": {
                    if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
                    break;
                }
            }
            return d3Format.format(specifier);
        };

        function linearish(scale) {
            var domain = scale.domain;

            scale.ticks = function(count) {
                var d = domain();
                return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
            };

            scale.tickFormat = function(count, specifier) {
                return tickFormat(domain(), count, specifier);
            };

            scale.nice = function(count) {
                if (count == null) count = 10;

                var d = domain(),
                    i0 = 0,
                    i1 = d.length - 1,
                    start = d[i0],
                    stop = d[i1],
                    step;

                if (stop < start) {
                    step = start, start = stop, stop = step;
                    step = i0, i0 = i1, i1 = step;
                }

                step = d3Array.tickIncrement(start, stop, count);

                if (step > 0) {
                    start = Math.floor(start / step) * step;
                    stop = Math.ceil(stop / step) * step;
                    step = d3Array.tickIncrement(start, stop, count);
                } else if (step < 0) {
                    start = Math.ceil(start * step) / step;
                    stop = Math.floor(stop * step) / step;
                    step = d3Array.tickIncrement(start, stop, count);
                }

                if (step > 0) {
                    d[i0] = Math.floor(start / step) * step;
                    d[i1] = Math.ceil(stop / step) * step;
                    domain(d);
                } else if (step < 0) {
                    d[i0] = Math.ceil(start * step) / step;
                    d[i1] = Math.floor(stop * step) / step;
                    domain(d);
                }

                return scale;
            };

            return scale;
        }

        function linear() {
            var scale = continuous(deinterpolateLinear, d3Interpolate.interpolateNumber);

            scale.copy = function() {
                return copy(scale, linear());
            };

            return linearish(scale);
        }

        function identity() {
            var domain = [0, 1];

            function scale(x) {
                return +x;
            }

            scale.invert = scale;

            scale.domain = scale.range = function(_) {
                return arguments.length ? (domain = map$1.call(_, number), scale) : domain.slice();
            };

            scale.copy = function() {
                return identity().domain(domain);
            };

            return linearish(scale);
        }

        var nice = function(domain, interval) {
            domain = domain.slice();

            var i0 = 0,
                i1 = domain.length - 1,
                x0 = domain[i0],
                x1 = domain[i1],
                t;

            if (x1 < x0) {
                t = i0, i0 = i1, i1 = t;
                t = x0, x0 = x1, x1 = t;
            }

            domain[i0] = interval.floor(x0);
            domain[i1] = interval.ceil(x1);
            return domain;
        };

        function deinterpolate(a, b) {
            return (b = Math.log(b / a))
                ? function(x) { return Math.log(x / a) / b; }
                : constant(b);
        }

        function reinterpolate(a, b) {
            return a < 0
                ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
                : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
        }

        function pow10(x) {
            return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
        }

        function powp(base) {
            return base === 10 ? pow10
                : base === Math.E ? Math.exp
                    : function(x) { return Math.pow(base, x); };
        }

        function logp(base) {
            return base === Math.E ? Math.log
                : base === 10 && Math.log10
                || base === 2 && Math.log2
                || (base = Math.log(base), function(x) { return Math.log(x) / base; });
        }

        function reflect(f) {
            return function(x) {
                return -f(-x);
            };
        }

        function log() {
            var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),
                domain = scale.domain,
                base = 10,
                logs = logp(10),
                pows = powp(10);

            function rescale() {
                logs = logp(base), pows = powp(base);
                if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
                return scale;
            }

            scale.base = function(_) {
                return arguments.length ? (base = +_, rescale()) : base;
            };

            scale.domain = function(_) {
                return arguments.length ? (domain(_), rescale()) : domain();
            };

            scale.ticks = function(count) {
                var d = domain(),
                    u = d[0],
                    v = d[d.length - 1],
                    r;

                if (r = v < u) i = u, u = v, v = i;

                var i = logs(u),
                    j = logs(v),
                    p,
                    k,
                    t,
                    n = count == null ? 10 : +count,
                    z = [];

                if (!(base % 1) && j - i < n) {
                    i = Math.round(i) - 1, j = Math.round(j) + 1;
                    if (u > 0) for (; i < j; ++i) {
                        for (k = 1, p = pows(i); k < base; ++k) {
                            t = p * k;
                            if (t < u) continue;
                            if (t > v) break;
                            z.push(t);
                        }
                    } else for (; i < j; ++i) {
                        for (k = base - 1, p = pows(i); k >= 1; --k) {
                            t = p * k;
                            if (t < u) continue;
                            if (t > v) break;
                            z.push(t);
                        }
                    }
                } else {
                    z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
                }

                return r ? z.reverse() : z;
            };

            scale.tickFormat = function(count, specifier) {
                if (specifier == null) specifier = base === 10 ? ".0e" : ",";
                if (typeof specifier !== "function") specifier = d3Format.format(specifier);
                if (count === Infinity) return specifier;
                if (count == null) count = 10;
                var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
                return function(d) {
                    var i = d / pows(Math.round(logs(d)));
                    if (i * base < base - 0.5) i *= base;
                    return i <= k ? specifier(d) : "";
                };
            };

            scale.nice = function() {
                return domain(nice(domain(), {
                    floor: function(x) { return pows(Math.floor(logs(x))); },
                    ceil: function(x) { return pows(Math.ceil(logs(x))); }
                }));
            };

            scale.copy = function() {
                return copy(scale, log().base(base));
            };

            return scale;
        }

        function raise(x, exponent) {
            return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
        }

        function pow() {
            var exponent = 1,
                scale = continuous(deinterpolate, reinterpolate),
                domain = scale.domain;

            function deinterpolate(a, b) {
                return (b = raise(b, exponent) - (a = raise(a, exponent)))
                    ? function(x) { return (raise(x, exponent) - a) / b; }
                    : constant(b);
            }

            function reinterpolate(a, b) {
                b = raise(b, exponent) - (a = raise(a, exponent));
                return function(t) { return raise(a + b * t, 1 / exponent); };
            }

            scale.exponent = function(_) {
                return arguments.length ? (exponent = +_, domain(domain())) : exponent;
            };

            scale.copy = function() {
                return copy(scale, pow().exponent(exponent));
            };

            return linearish(scale);
        }

        function sqrt() {
            return pow().exponent(0.5);
        }

        function quantile$1() {
            var domain = [],
                range$$1 = [],
                thresholds = [];

            function rescale() {
                var i = 0, n = Math.max(1, range$$1.length);
                thresholds = new Array(n - 1);
                while (++i < n) thresholds[i - 1] = d3Array.quantile(domain, i / n);
                return scale;
            }

            function scale(x) {
                if (!isNaN(x = +x)) return range$$1[d3Array.bisect(thresholds, x)];
            }

            scale.invertExtent = function(y) {
                var i = range$$1.indexOf(y);
                return i < 0 ? [NaN, NaN] : [
                    i > 0 ? thresholds[i - 1] : domain[0],
                    i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
                ];
            };

            scale.domain = function(_) {
                if (!arguments.length) return domain.slice();
                domain = [];
                for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
                domain.sort(d3Array.ascending);
                return rescale();
            };

            scale.range = function(_) {
                return arguments.length ? (range$$1 = slice.call(_), rescale()) : range$$1.slice();
            };

            scale.quantiles = function() {
                return thresholds.slice();
            };

            scale.copy = function() {
                return quantile$1()
                    .domain(domain)
                    .range(range$$1);
            };

            return scale;
        }

        function quantize() {
            var x0 = 0,
                x1 = 1,
                n = 1,
                domain = [0.5],
                range$$1 = [0, 1];

            function scale(x) {
                if (x <= x) return range$$1[d3Array.bisect(domain, x, 0, n)];
            }

            function rescale() {
                var i = -1;
                domain = new Array(n);
                while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
                return scale;
            }

            scale.domain = function(_) {
                return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
            };

            scale.range = function(_) {
                return arguments.length ? (n = (range$$1 = slice.call(_)).length - 1, rescale()) : range$$1.slice();
            };

            scale.invertExtent = function(y) {
                var i = range$$1.indexOf(y);
                return i < 0 ? [NaN, NaN]
                    : i < 1 ? [x0, domain[0]]
                        : i >= n ? [domain[n - 1], x1]
                            : [domain[i - 1], domain[i]];
            };

            scale.copy = function() {
                return quantize()
                    .domain([x0, x1])
                    .range(range$$1);
            };

            return linearish(scale);
        }

        function threshold() {
            var domain = [0.5],
                range$$1 = [0, 1],
                n = 1;

            function scale(x) {
                if (x <= x) return range$$1[d3Array.bisect(domain, x, 0, n)];
            }

            scale.domain = function(_) {
                return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
            };

            scale.range = function(_) {
                return arguments.length ? (range$$1 = slice.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
            };

            scale.invertExtent = function(y) {
                var i = range$$1.indexOf(y);
                return [domain[i - 1], domain[i]];
            };

            scale.copy = function() {
                return threshold()
                    .domain(domain)
                    .range(range$$1);
            };

            return scale;
        }

        var durationSecond = 1000;
        var durationMinute = durationSecond * 60;
        var durationHour = durationMinute * 60;
        var durationDay = durationHour * 24;
        var durationWeek = durationDay * 7;
        var durationMonth = durationDay * 30;
        var durationYear = durationDay * 365;

        function date(t) {
            return new Date(t);
        }

        function number$1(t) {
            return t instanceof Date ? +t : +new Date(+t);
        }

        function calendar(year, month, week, day, hour, minute, second, millisecond, format$$1) {
            var scale = continuous(deinterpolateLinear, d3Interpolate.interpolateNumber),
                invert = scale.invert,
                domain = scale.domain;

            var formatMillisecond = format$$1(".%L"),
                formatSecond = format$$1(":%S"),
                formatMinute = format$$1("%I:%M"),
                formatHour = format$$1("%I %p"),
                formatDay = format$$1("%a %d"),
                formatWeek = format$$1("%b %d"),
                formatMonth = format$$1("%B"),
                formatYear = format$$1("%Y");

            var tickIntervals = [
                [second,  1,      durationSecond],
                [second,  5,  5 * durationSecond],
                [second, 15, 15 * durationSecond],
                [second, 30, 30 * durationSecond],
                [minute,  1,      durationMinute],
                [minute,  5,  5 * durationMinute],
                [minute, 15, 15 * durationMinute],
                [minute, 30, 30 * durationMinute],
                [  hour,  1,      durationHour  ],
                [  hour,  3,  3 * durationHour  ],
                [  hour,  6,  6 * durationHour  ],
                [  hour, 12, 12 * durationHour  ],
                [   day,  1,      durationDay   ],
                [   day,  2,  2 * durationDay   ],
                [  week,  1,      durationWeek  ],
                [ month,  1,      durationMonth ],
                [ month,  3,  3 * durationMonth ],
                [  year,  1,      durationYear  ]
            ];

            function tickFormat(date) {
                return (second(date) < date ? formatMillisecond
                    : minute(date) < date ? formatSecond
                        : hour(date) < date ? formatMinute
                            : day(date) < date ? formatHour
                                : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
                                    : year(date) < date ? formatMonth
                                        : formatYear)(date);
            }

            function tickInterval(interval, start, stop, step) {
                if (interval == null) interval = 10;

                // If a desired tick count is specified, pick a reasonable tick interval
                // based on the extent of the domain and a rough estimate of tick size.
                // Otherwise, assume interval is already a time interval and use it.
                if (typeof interval === "number") {
                    var target = Math.abs(stop - start) / interval,
                        i = d3Array.bisector(function(i) { return i[2]; }).right(tickIntervals, target);
                    if (i === tickIntervals.length) {
                        step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);
                        interval = year;
                    } else if (i) {
                        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
                        step = i[1];
                        interval = i[0];
                    } else {
                        step = Math.max(d3Array.tickStep(start, stop, interval), 1);
                        interval = millisecond;
                    }
                }

                return step == null ? interval : interval.every(step);
            }

            scale.invert = function(y) {
                return new Date(invert(y));
            };

            scale.domain = function(_) {
                return arguments.length ? domain(map$1.call(_, number$1)) : domain().map(date);
            };

            scale.ticks = function(interval, step) {
                var d = domain(),
                    t0 = d[0],
                    t1 = d[d.length - 1],
                    r = t1 < t0,
                    t;
                if (r) t = t0, t0 = t1, t1 = t;
                t = tickInterval(interval, t0, t1, step);
                t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
                return r ? t.reverse() : t;
            };

            scale.tickFormat = function(count, specifier) {
                return specifier == null ? tickFormat : format$$1(specifier);
            };

            scale.nice = function(interval, step) {
                var d = domain();
                return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
                    ? domain(nice(d, interval))
                    : scale;
            };

            scale.copy = function() {
                return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format$$1));
            };

            return scale;
        }

        var time = function() {
            return calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
        };

        var utcTime = function() {
            return calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
        };

        var colors = function(s) {
            return s.match(/.{6}/g).map(function(x) {
                return "#" + x;
            });
        };

        var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

        var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

        var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

        var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

        var cubehelix$1 = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(300, 0.5, 0.0), d3Color.cubehelix(-240, 0.5, 1.0));

        var warm = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(-100, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));

        var cool = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(260, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));

        var rainbow = d3Color.cubehelix();

        var rainbow$1 = function(t) {
            if (t < 0 || t > 1) t -= Math.floor(t);
            var ts = Math.abs(t - 0.5);
            rainbow.h = 360 * t - 100;
            rainbow.s = 1.5 - 1.5 * ts;
            rainbow.l = 0.8 - 0.9 * ts;
            return rainbow + "";
        };

        function ramp(range$$1) {
            var n = range$$1.length;
            return function(t) {
                return range$$1[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
            };
        }

        var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

        var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

        var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

        var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

        function sequential(interpolator) {
            var x0 = 0,
                x1 = 1,
                clamp = false;

            function scale(x) {
                var t = (x - x0) / (x1 - x0);
                return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
            }

            scale.domain = function(_) {
                return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
            };

            scale.clamp = function(_) {
                return arguments.length ? (clamp = !!_, scale) : clamp;
            };

            scale.interpolator = function(_) {
                return arguments.length ? (interpolator = _, scale) : interpolator;
            };

            scale.copy = function() {
                return sequential(interpolator).domain([x0, x1]).clamp(clamp);
            };

            return linearish(scale);
        }

        exports.scaleBand = band;
        exports.scalePoint = point;
        exports.scaleIdentity = identity;
        exports.scaleLinear = linear;
        exports.scaleLog = log;
        exports.scaleOrdinal = ordinal;
        exports.scaleImplicit = implicit;
        exports.scalePow = pow;
        exports.scaleSqrt = sqrt;
        exports.scaleQuantile = quantile$1;
        exports.scaleQuantize = quantize;
        exports.scaleThreshold = threshold;
        exports.scaleTime = time;
        exports.scaleUtc = utcTime;
        exports.schemeCategory10 = category10;
        exports.schemeCategory20b = category20b;
        exports.schemeCategory20c = category20c;
        exports.schemeCategory20 = category20;
        exports.interpolateCubehelixDefault = cubehelix$1;
        exports.interpolateRainbow = rainbow$1;
        exports.interpolateWarm = warm;
        exports.interpolateCool = cool;
        exports.interpolateViridis = viridis;
        exports.interpolateMagma = magma;
        exports.interpolateInferno = inferno;
        exports.interpolatePlasma = plasma;
        exports.scaleSequential = sequential;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-array":39,"d3-collection":43,"d3-color":44,"d3-format":50,"d3-interpolate":53,"d3-time":64,"d3-time-format":63}],61:[function(require,module,exports){
// https://d3js.org/d3-selection/ Version 1.2.0. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var xhtml = "http://www.w3.org/1999/xhtml";

        var namespaces = {
            svg: "http://www.w3.org/2000/svg",
            xhtml: xhtml,
            xlink: "http://www.w3.org/1999/xlink",
            xml: "http://www.w3.org/XML/1998/namespace",
            xmlns: "http://www.w3.org/2000/xmlns/"
        };

        var namespace = function(name) {
            var prefix = name += "", i = prefix.indexOf(":");
            if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
            return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
        };

        function creatorInherit(name) {
            return function() {
                var document = this.ownerDocument,
                    uri = this.namespaceURI;
                return uri === xhtml && document.documentElement.namespaceURI === xhtml
                    ? document.createElement(name)
                    : document.createElementNS(uri, name);
            };
        }

        function creatorFixed(fullname) {
            return function() {
                return this.ownerDocument.createElementNS(fullname.space, fullname.local);
            };
        }

        var creator = function(name) {
            var fullname = namespace(name);
            return (fullname.local
                ? creatorFixed
                : creatorInherit)(fullname);
        };

        var nextId = 0;

        function local() {
            return new Local;
        }

        function Local() {
            this._ = "@" + (++nextId).toString(36);
        }

        Local.prototype = local.prototype = {
            constructor: Local,
            get: function(node) {
                var id = this._;
                while (!(id in node)) if (!(node = node.parentNode)) return;
                return node[id];
            },
            set: function(node, value) {
                return node[this._] = value;
            },
            remove: function(node) {
                return this._ in node && delete node[this._];
            },
            toString: function() {
                return this._;
            }
        };

        var matcher = function(selector) {
            return function() {
                return this.matches(selector);
            };
        };

        if (typeof document !== "undefined") {
            var element = document.documentElement;
            if (!element.matches) {
                var vendorMatches = element.webkitMatchesSelector
                    || element.msMatchesSelector
                    || element.mozMatchesSelector
                    || element.oMatchesSelector;
                matcher = function(selector) {
                    return function() {
                        return vendorMatches.call(this, selector);
                    };
                };
            }
        }

        var matcher$1 = matcher;

        var filterEvents = {};

        exports.event = null;

        if (typeof document !== "undefined") {
            var element$1 = document.documentElement;
            if (!("onmouseenter" in element$1)) {
                filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
            }
        }

        function filterContextListener(listener, index, group) {
            listener = contextListener(listener, index, group);
            return function(event) {
                var related = event.relatedTarget;
                if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
                    listener.call(this, event);
                }
            };
        }

        function contextListener(listener, index, group) {
            return function(event1) {
                var event0 = exports.event; // Events can be reentrant (e.g., focus).
                exports.event = event1;
                try {
                    listener.call(this, this.__data__, index, group);
                } finally {
                    exports.event = event0;
                }
            };
        }

        function parseTypenames(typenames) {
            return typenames.trim().split(/^|\s+/).map(function(t) {
                var name = "", i = t.indexOf(".");
                if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
                return {type: t, name: name};
            });
        }

        function onRemove(typename) {
            return function() {
                var on = this.__on;
                if (!on) return;
                for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
                    if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
                        this.removeEventListener(o.type, o.listener, o.capture);
                    } else {
                        on[++i] = o;
                    }
                }
                if (++i) on.length = i;
                else delete this.__on;
            };
        }

        function onAdd(typename, value, capture) {
            var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
            return function(d, i, group) {
                var on = this.__on, o, listener = wrap(value, i, group);
                if (on) for (var j = 0, m = on.length; j < m; ++j) {
                    if ((o = on[j]).type === typename.type && o.name === typename.name) {
                        this.removeEventListener(o.type, o.listener, o.capture);
                        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
                        o.value = value;
                        return;
                    }
                }
                this.addEventListener(typename.type, listener, capture);
                o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
                if (!on) this.__on = [o];
                else on.push(o);
            };
        }

        var selection_on = function(typename, value, capture) {
            var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

            if (arguments.length < 2) {
                var on = this.node().__on;
                if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
                    for (i = 0, o = on[j]; i < n; ++i) {
                        if ((t = typenames[i]).type === o.type && t.name === o.name) {
                            return o.value;
                        }
                    }
                }
                return;
            }

            on = value ? onAdd : onRemove;
            if (capture == null) capture = false;
            for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
            return this;
        };

        function customEvent(event1, listener, that, args) {
            var event0 = exports.event;
            event1.sourceEvent = exports.event;
            exports.event = event1;
            try {
                return listener.apply(that, args);
            } finally {
                exports.event = event0;
            }
        }

        var sourceEvent = function() {
            var current = exports.event, source;
            while (source = current.sourceEvent) current = source;
            return current;
        };

        var point = function(node, event) {
            var svg = node.ownerSVGElement || node;

            if (svg.createSVGPoint) {
                var point = svg.createSVGPoint();
                point.x = event.clientX, point.y = event.clientY;
                point = point.matrixTransform(node.getScreenCTM().inverse());
                return [point.x, point.y];
            }

            var rect = node.getBoundingClientRect();
            return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
        };

        var mouse = function(node) {
            var event = sourceEvent();
            if (event.changedTouches) event = event.changedTouches[0];
            return point(node, event);
        };

        function none() {}

        var selector = function(selector) {
            return selector == null ? none : function() {
                return this.querySelector(selector);
            };
        };

        var selection_select = function(select) {
            if (typeof select !== "function") select = selector(select);

            for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
                for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
                    if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                        if ("__data__" in node) subnode.__data__ = node.__data__;
                        subgroup[i] = subnode;
                    }
                }
            }

            return new Selection(subgroups, this._parents);
        };

        function empty() {
            return [];
        }

        var selectorAll = function(selector) {
            return selector == null ? empty : function() {
                return this.querySelectorAll(selector);
            };
        };

        var selection_selectAll = function(select) {
            if (typeof select !== "function") select = selectorAll(select);

            for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
                for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                    if (node = group[i]) {
                        subgroups.push(select.call(node, node.__data__, i, group));
                        parents.push(node);
                    }
                }
            }

            return new Selection(subgroups, parents);
        };

        var selection_filter = function(match) {
            if (typeof match !== "function") match = matcher$1(match);

            for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
                for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
                    if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                        subgroup.push(node);
                    }
                }
            }

            return new Selection(subgroups, this._parents);
        };

        var sparse = function(update) {
            return new Array(update.length);
        };

        var selection_enter = function() {
            return new Selection(this._enter || this._groups.map(sparse), this._parents);
        };

        function EnterNode(parent, datum) {
            this.ownerDocument = parent.ownerDocument;
            this.namespaceURI = parent.namespaceURI;
            this._next = null;
            this._parent = parent;
            this.__data__ = datum;
        }

        EnterNode.prototype = {
            constructor: EnterNode,
            appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
            insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
            querySelector: function(selector) { return this._parent.querySelector(selector); },
            querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
        };

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        var keyPrefix = "$"; // Protect against keys like “__proto__”.

        function bindIndex(parent, group, enter, update, exit, data) {
            var i = 0,
                node,
                groupLength = group.length,
                dataLength = data.length;

            // Put any non-null nodes that fit into update.
            // Put any null nodes into enter.
            // Put any remaining data into enter.
            for (; i < dataLength; ++i) {
                if (node = group[i]) {
                    node.__data__ = data[i];
                    update[i] = node;
                } else {
                    enter[i] = new EnterNode(parent, data[i]);
                }
            }

            // Put any non-null nodes that don’t fit into exit.
            for (; i < groupLength; ++i) {
                if (node = group[i]) {
                    exit[i] = node;
                }
            }
        }

        function bindKey(parent, group, enter, update, exit, data, key) {
            var i,
                node,
                nodeByKeyValue = {},
                groupLength = group.length,
                dataLength = data.length,
                keyValues = new Array(groupLength),
                keyValue;

            // Compute the key for each node.
            // If multiple nodes have the same key, the duplicates are added to exit.
            for (i = 0; i < groupLength; ++i) {
                if (node = group[i]) {
                    keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
                    if (keyValue in nodeByKeyValue) {
                        exit[i] = node;
                    } else {
                        nodeByKeyValue[keyValue] = node;
                    }
                }
            }

            // Compute the key for each datum.
            // If there a node associated with this key, join and add it to update.
            // If there is not (or the key is a duplicate), add it to enter.
            for (i = 0; i < dataLength; ++i) {
                keyValue = keyPrefix + key.call(parent, data[i], i, data);
                if (node = nodeByKeyValue[keyValue]) {
                    update[i] = node;
                    node.__data__ = data[i];
                    nodeByKeyValue[keyValue] = null;
                } else {
                    enter[i] = new EnterNode(parent, data[i]);
                }
            }

            // Add any remaining nodes that were not bound to data to exit.
            for (i = 0; i < groupLength; ++i) {
                if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
                    exit[i] = node;
                }
            }
        }

        var selection_data = function(value, key) {
            if (!value) {
                data = new Array(this.size()), j = -1;
                this.each(function(d) { data[++j] = d; });
                return data;
            }

            var bind = key ? bindKey : bindIndex,
                parents = this._parents,
                groups = this._groups;

            if (typeof value !== "function") value = constant(value);

            for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
                var parent = parents[j],
                    group = groups[j],
                    groupLength = group.length,
                    data = value.call(parent, parent && parent.__data__, j, parents),
                    dataLength = data.length,
                    enterGroup = enter[j] = new Array(dataLength),
                    updateGroup = update[j] = new Array(dataLength),
                    exitGroup = exit[j] = new Array(groupLength);

                bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

                // Now connect the enter nodes to their following update node, such that
                // appendChild can insert the materialized enter node before this node,
                // rather than at the end of the parent node.
                for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
                    if (previous = enterGroup[i0]) {
                        if (i0 >= i1) i1 = i0 + 1;
                        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
                        previous._next = next || null;
                    }
                }
            }

            update = new Selection(update, parents);
            update._enter = enter;
            update._exit = exit;
            return update;
        };

        var selection_exit = function() {
            return new Selection(this._exit || this._groups.map(sparse), this._parents);
        };

        var selection_merge = function(selection) {

            for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
                for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
                    if (node = group0[i] || group1[i]) {
                        merge[i] = node;
                    }
                }
            }

            for (; j < m0; ++j) {
                merges[j] = groups0[j];
            }

            return new Selection(merges, this._parents);
        };

        var selection_order = function() {

            for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
                for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
                    if (node = group[i]) {
                        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
                        next = node;
                    }
                }
            }

            return this;
        };

        var selection_sort = function(compare) {
            if (!compare) compare = ascending;

            function compareNode(a, b) {
                return a && b ? compare(a.__data__, b.__data__) : !a - !b;
            }

            for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
                for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
                    if (node = group[i]) {
                        sortgroup[i] = node;
                    }
                }
                sortgroup.sort(compareNode);
            }

            return new Selection(sortgroups, this._parents).order();
        };

        function ascending(a, b) {
            return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
        }

        var selection_call = function() {
            var callback = arguments[0];
            arguments[0] = this;
            callback.apply(null, arguments);
            return this;
        };

        var selection_nodes = function() {
            var nodes = new Array(this.size()), i = -1;
            this.each(function() { nodes[++i] = this; });
            return nodes;
        };

        var selection_node = function() {

            for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
                for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
                    var node = group[i];
                    if (node) return node;
                }
            }

            return null;
        };

        var selection_size = function() {
            var size = 0;
            this.each(function() { ++size; });
            return size;
        };

        var selection_empty = function() {
            return !this.node();
        };

        var selection_each = function(callback) {

            for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
                for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
                    if (node = group[i]) callback.call(node, node.__data__, i, group);
                }
            }

            return this;
        };

        function attrRemove(name) {
            return function() {
                this.removeAttribute(name);
            };
        }

        function attrRemoveNS(fullname) {
            return function() {
                this.removeAttributeNS(fullname.space, fullname.local);
            };
        }

        function attrConstant(name, value) {
            return function() {
                this.setAttribute(name, value);
            };
        }

        function attrConstantNS(fullname, value) {
            return function() {
                this.setAttributeNS(fullname.space, fullname.local, value);
            };
        }

        function attrFunction(name, value) {
            return function() {
                var v = value.apply(this, arguments);
                if (v == null) this.removeAttribute(name);
                else this.setAttribute(name, v);
            };
        }

        function attrFunctionNS(fullname, value) {
            return function() {
                var v = value.apply(this, arguments);
                if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
                else this.setAttributeNS(fullname.space, fullname.local, v);
            };
        }

        var selection_attr = function(name, value) {
            var fullname = namespace(name);

            if (arguments.length < 2) {
                var node = this.node();
                return fullname.local
                    ? node.getAttributeNS(fullname.space, fullname.local)
                    : node.getAttribute(fullname);
            }

            return this.each((value == null
                ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
                    ? (fullname.local ? attrFunctionNS : attrFunction)
                    : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
        };

        var defaultView = function(node) {
            return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
                || (node.document && node) // node is a Window
                || node.defaultView; // node is a Document
        };

        function styleRemove(name) {
            return function() {
                this.style.removeProperty(name);
            };
        }

        function styleConstant(name, value, priority) {
            return function() {
                this.style.setProperty(name, value, priority);
            };
        }

        function styleFunction(name, value, priority) {
            return function() {
                var v = value.apply(this, arguments);
                if (v == null) this.style.removeProperty(name);
                else this.style.setProperty(name, v, priority);
            };
        }

        var selection_style = function(name, value, priority) {
            return arguments.length > 1
                ? this.each((value == null
                    ? styleRemove : typeof value === "function"
                        ? styleFunction
                        : styleConstant)(name, value, priority == null ? "" : priority))
                : styleValue(this.node(), name);
        };

        function styleValue(node, name) {
            return node.style.getPropertyValue(name)
                || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
        }

        function propertyRemove(name) {
            return function() {
                delete this[name];
            };
        }

        function propertyConstant(name, value) {
            return function() {
                this[name] = value;
            };
        }

        function propertyFunction(name, value) {
            return function() {
                var v = value.apply(this, arguments);
                if (v == null) delete this[name];
                else this[name] = v;
            };
        }

        var selection_property = function(name, value) {
            return arguments.length > 1
                ? this.each((value == null
                    ? propertyRemove : typeof value === "function"
                        ? propertyFunction
                        : propertyConstant)(name, value))
                : this.node()[name];
        };

        function classArray(string) {
            return string.trim().split(/^|\s+/);
        }

        function classList(node) {
            return node.classList || new ClassList(node);
        }

        function ClassList(node) {
            this._node = node;
            this._names = classArray(node.getAttribute("class") || "");
        }

        ClassList.prototype = {
            add: function(name) {
                var i = this._names.indexOf(name);
                if (i < 0) {
                    this._names.push(name);
                    this._node.setAttribute("class", this._names.join(" "));
                }
            },
            remove: function(name) {
                var i = this._names.indexOf(name);
                if (i >= 0) {
                    this._names.splice(i, 1);
                    this._node.setAttribute("class", this._names.join(" "));
                }
            },
            contains: function(name) {
                return this._names.indexOf(name) >= 0;
            }
        };

        function classedAdd(node, names) {
            var list = classList(node), i = -1, n = names.length;
            while (++i < n) list.add(names[i]);
        }

        function classedRemove(node, names) {
            var list = classList(node), i = -1, n = names.length;
            while (++i < n) list.remove(names[i]);
        }

        function classedTrue(names) {
            return function() {
                classedAdd(this, names);
            };
        }

        function classedFalse(names) {
            return function() {
                classedRemove(this, names);
            };
        }

        function classedFunction(names, value) {
            return function() {
                (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
            };
        }

        var selection_classed = function(name, value) {
            var names = classArray(name + "");

            if (arguments.length < 2) {
                var list = classList(this.node()), i = -1, n = names.length;
                while (++i < n) if (!list.contains(names[i])) return false;
                return true;
            }

            return this.each((typeof value === "function"
                ? classedFunction : value
                    ? classedTrue
                    : classedFalse)(names, value));
        };

        function textRemove() {
            this.textContent = "";
        }

        function textConstant(value) {
            return function() {
                this.textContent = value;
            };
        }

        function textFunction(value) {
            return function() {
                var v = value.apply(this, arguments);
                this.textContent = v == null ? "" : v;
            };
        }

        var selection_text = function(value) {
            return arguments.length
                ? this.each(value == null
                    ? textRemove : (typeof value === "function"
                        ? textFunction
                        : textConstant)(value))
                : this.node().textContent;
        };

        function htmlRemove() {
            this.innerHTML = "";
        }

        function htmlConstant(value) {
            return function() {
                this.innerHTML = value;
            };
        }

        function htmlFunction(value) {
            return function() {
                var v = value.apply(this, arguments);
                this.innerHTML = v == null ? "" : v;
            };
        }

        var selection_html = function(value) {
            return arguments.length
                ? this.each(value == null
                    ? htmlRemove : (typeof value === "function"
                        ? htmlFunction
                        : htmlConstant)(value))
                : this.node().innerHTML;
        };

        function raise() {
            if (this.nextSibling) this.parentNode.appendChild(this);
        }

        var selection_raise = function() {
            return this.each(raise);
        };

        function lower() {
            if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
        }

        var selection_lower = function() {
            return this.each(lower);
        };

        var selection_append = function(name) {
            var create = typeof name === "function" ? name : creator(name);
            return this.select(function() {
                return this.appendChild(create.apply(this, arguments));
            });
        };

        function constantNull() {
            return null;
        }

        var selection_insert = function(name, before) {
            var create = typeof name === "function" ? name : creator(name),
                select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
            return this.select(function() {
                return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
            });
        };

        function remove() {
            var parent = this.parentNode;
            if (parent) parent.removeChild(this);
        }

        var selection_remove = function() {
            return this.each(remove);
        };

        var selection_datum = function(value) {
            return arguments.length
                ? this.property("__data__", value)
                : this.node().__data__;
        };

        function dispatchEvent(node, type, params) {
            var window = defaultView(node),
                event = window.CustomEvent;

            if (typeof event === "function") {
                event = new event(type, params);
            } else {
                event = window.document.createEvent("Event");
                if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
                else event.initEvent(type, false, false);
            }

            node.dispatchEvent(event);
        }

        function dispatchConstant(type, params) {
            return function() {
                return dispatchEvent(this, type, params);
            };
        }

        function dispatchFunction(type, params) {
            return function() {
                return dispatchEvent(this, type, params.apply(this, arguments));
            };
        }

        var selection_dispatch = function(type, params) {
            return this.each((typeof params === "function"
                ? dispatchFunction
                : dispatchConstant)(type, params));
        };

        var root = [null];

        function Selection(groups, parents) {
            this._groups = groups;
            this._parents = parents;
        }

        function selection() {
            return new Selection([[document.documentElement]], root);
        }

        Selection.prototype = selection.prototype = {
            constructor: Selection,
            select: selection_select,
            selectAll: selection_selectAll,
            filter: selection_filter,
            data: selection_data,
            enter: selection_enter,
            exit: selection_exit,
            merge: selection_merge,
            order: selection_order,
            sort: selection_sort,
            call: selection_call,
            nodes: selection_nodes,
            node: selection_node,
            size: selection_size,
            empty: selection_empty,
            each: selection_each,
            attr: selection_attr,
            style: selection_style,
            property: selection_property,
            classed: selection_classed,
            text: selection_text,
            html: selection_html,
            raise: selection_raise,
            lower: selection_lower,
            append: selection_append,
            insert: selection_insert,
            remove: selection_remove,
            datum: selection_datum,
            on: selection_on,
            dispatch: selection_dispatch
        };

        var select = function(selector) {
            return typeof selector === "string"
                ? new Selection([[document.querySelector(selector)]], [document.documentElement])
                : new Selection([[selector]], root);
        };

        var selectAll = function(selector) {
            return typeof selector === "string"
                ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
                : new Selection([selector == null ? [] : selector], root);
        };

        var touch = function(node, touches, identifier) {
            if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

            for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
                if ((touch = touches[i]).identifier === identifier) {
                    return point(node, touch);
                }
            }

            return null;
        };

        var touches = function(node, touches) {
            if (touches == null) touches = sourceEvent().touches;

            for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
                points[i] = point(node, touches[i]);
            }

            return points;
        };

        exports.creator = creator;
        exports.local = local;
        exports.matcher = matcher$1;
        exports.mouse = mouse;
        exports.namespace = namespace;
        exports.namespaces = namespaces;
        exports.clientPoint = point;
        exports.select = select;
        exports.selectAll = selectAll;
        exports.selection = selection;
        exports.selector = selector;
        exports.selectorAll = selectorAll;
        exports.style = styleValue;
        exports.touch = touch;
        exports.touches = touches;
        exports.window = defaultView;
        exports.customEvent = customEvent;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],62:[function(require,module,exports){
// https://d3js.org/d3-shape/ Version 1.2.0. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-path')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-path'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3));
    }(this, (function (exports,d3Path) { 'use strict';

        var constant = function(x) {
            return function constant() {
                return x;
            };
        };

        var abs = Math.abs;
        var atan2 = Math.atan2;
        var cos = Math.cos;
        var max = Math.max;
        var min = Math.min;
        var sin = Math.sin;
        var sqrt = Math.sqrt;

        var epsilon = 1e-12;
        var pi = Math.PI;
        var halfPi = pi / 2;
        var tau = 2 * pi;

        function acos(x) {
            return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
        }

        function asin(x) {
            return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
        }

        function arcInnerRadius(d) {
            return d.innerRadius;
        }

        function arcOuterRadius(d) {
            return d.outerRadius;
        }

        function arcStartAngle(d) {
            return d.startAngle;
        }

        function arcEndAngle(d) {
            return d.endAngle;
        }

        function arcPadAngle(d) {
            return d && d.padAngle; // Note: optional!
        }

        function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
            var x10 = x1 - x0, y10 = y1 - y0,
                x32 = x3 - x2, y32 = y3 - y2,
                t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
            return [x0 + t * x10, y0 + t * y10];
        }

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
        function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
            var x01 = x0 - x1,
                y01 = y0 - y1,
                lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
                ox = lo * y01,
                oy = -lo * x01,
                x11 = x0 + ox,
                y11 = y0 + oy,
                x10 = x1 + ox,
                y10 = y1 + oy,
                x00 = (x11 + x10) / 2,
                y00 = (y11 + y10) / 2,
                dx = x10 - x11,
                dy = y10 - y11,
                d2 = dx * dx + dy * dy,
                r = r1 - rc,
                D = x11 * y10 - x10 * y11,
                d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
                cx0 = (D * dy - dx * d) / d2,
                cy0 = (-D * dx - dy * d) / d2,
                cx1 = (D * dy + dx * d) / d2,
                cy1 = (-D * dx + dy * d) / d2,
                dx0 = cx0 - x00,
                dy0 = cy0 - y00,
                dx1 = cx1 - x00,
                dy1 = cy1 - y00;

            // Pick the closer of the two intersection points.
            // TODO Is there a faster way to determine which intersection to use?
            if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

            return {
                cx: cx0,
                cy: cy0,
                x01: -ox,
                y01: -oy,
                x11: cx0 * (r1 / r - 1),
                y11: cy0 * (r1 / r - 1)
            };
        }

        var arc = function() {
            var innerRadius = arcInnerRadius,
                outerRadius = arcOuterRadius,
                cornerRadius = constant(0),
                padRadius = null,
                startAngle = arcStartAngle,
                endAngle = arcEndAngle,
                padAngle = arcPadAngle,
                context = null;

            function arc() {
                var buffer,
                    r,
                    r0 = +innerRadius.apply(this, arguments),
                    r1 = +outerRadius.apply(this, arguments),
                    a0 = startAngle.apply(this, arguments) - halfPi,
                    a1 = endAngle.apply(this, arguments) - halfPi,
                    da = abs(a1 - a0),
                    cw = a1 > a0;

                if (!context) context = buffer = d3Path.path();

                // Ensure that the outer radius is always larger than the inner radius.
                if (r1 < r0) r = r1, r1 = r0, r0 = r;

                // Is it a point?
                if (!(r1 > epsilon)) context.moveTo(0, 0);

                // Or is it a circle or annulus?
                else if (da > tau - epsilon) {
                    context.moveTo(r1 * cos(a0), r1 * sin(a0));
                    context.arc(0, 0, r1, a0, a1, !cw);
                    if (r0 > epsilon) {
                        context.moveTo(r0 * cos(a1), r0 * sin(a1));
                        context.arc(0, 0, r0, a1, a0, cw);
                    }
                }

                // Or is it a circular or annular sector?
                else {
                    var a01 = a0,
                        a11 = a1,
                        a00 = a0,
                        a10 = a1,
                        da0 = da,
                        da1 = da,
                        ap = padAngle.apply(this, arguments) / 2,
                        rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
                        rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
                        rc0 = rc,
                        rc1 = rc,
                        t0,
                        t1;

                    // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
                    if (rp > epsilon) {
                        var p0 = asin(rp / r0 * sin(ap)),
                            p1 = asin(rp / r1 * sin(ap));
                        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
                        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
                        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
                        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
                    }

                    var x01 = r1 * cos(a01),
                        y01 = r1 * sin(a01),
                        x10 = r0 * cos(a10),
                        y10 = r0 * sin(a10);

                    // Apply rounded corners?
                    if (rc > epsilon) {
                        var x11 = r1 * cos(a11),
                            y11 = r1 * sin(a11),
                            x00 = r0 * cos(a00),
                            y00 = r0 * sin(a00);

                        // Restrict the corner radius according to the sector angle.
                        if (da < pi) {
                            var oc = da0 > epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
                                ax = x01 - oc[0],
                                ay = y01 - oc[1],
                                bx = x11 - oc[0],
                                by = y11 - oc[1],
                                kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                                lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                            rc0 = min(rc, (r0 - lc) / (kc - 1));
                            rc1 = min(rc, (r1 - lc) / (kc + 1));
                        }
                    }

                    // Is the sector collapsed to a line?
                    if (!(da1 > epsilon)) context.moveTo(x01, y01);

                    // Does the sector’s outer ring have rounded corners?
                    else if (rc1 > epsilon) {
                        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

                        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

                        // Have the corners merged?
                        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

                        // Otherwise, draw the two corners and the ring.
                        else {
                            context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                            context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                            context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                        }
                    }

                    // Or is the outer ring just a circular arc?
                    else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

                    // Is there no inner ring, and it’s a circular sector?
                    // Or perhaps it’s an annular sector collapsed due to padding?
                    if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

                    // Does the sector’s inner ring (or point) have rounded corners?
                    else if (rc0 > epsilon) {
                        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

                        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

                        // Have the corners merged?
                        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

                        // Otherwise, draw the two corners and the ring.
                        else {
                            context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                            context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                            context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                        }
                    }

                    // Or is the inner ring just a circular arc?
                    else context.arc(0, 0, r0, a10, a00, cw);
                }

                context.closePath();

                if (buffer) return context = null, buffer + "" || null;
            }

            arc.centroid = function() {
                var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
                    a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
                return [cos(a) * r, sin(a) * r];
            };

            arc.innerRadius = function(_) {
                return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
            };

            arc.outerRadius = function(_) {
                return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
            };

            arc.cornerRadius = function(_) {
                return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
            };

            arc.padRadius = function(_) {
                return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
            };

            arc.startAngle = function(_) {
                return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
            };

            arc.endAngle = function(_) {
                return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
            };

            arc.padAngle = function(_) {
                return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
            };

            arc.context = function(_) {
                return arguments.length ? ((context = _ == null ? null : _), arc) : context;
            };

            return arc;
        };

        function Linear(context) {
            this._context = context;
        }

        Linear.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._point = 0;
            },
            lineEnd: function() {
                if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
                this._line = 1 - this._line;
            },
            point: function(x, y) {
                x = +x, y = +y;
                switch (this._point) {
                    case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
                    case 1: this._point = 2; // proceed
                    default: this._context.lineTo(x, y); break;
                }
            }
        };

        var curveLinear = function(context) {
            return new Linear(context);
        };

        function x(p) {
            return p[0];
        }

        function y(p) {
            return p[1];
        }

        var line = function() {
            var x$$1 = x,
                y$$1 = y,
                defined = constant(true),
                context = null,
                curve = curveLinear,
                output = null;

            function line(data) {
                var i,
                    n = data.length,
                    d,
                    defined0 = false,
                    buffer;

                if (context == null) output = curve(buffer = d3Path.path());

                for (i = 0; i <= n; ++i) {
                    if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                        if (defined0 = !defined0) output.lineStart();
                        else output.lineEnd();
                    }
                    if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
                }

                if (buffer) return output = null, buffer + "" || null;
            }

            line.x = function(_) {
                return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), line) : x$$1;
            };

            line.y = function(_) {
                return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), line) : y$$1;
            };

            line.defined = function(_) {
                return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
            };

            line.curve = function(_) {
                return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
            };

            line.context = function(_) {
                return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
            };

            return line;
        };

        var area = function() {
            var x0 = x,
                x1 = null,
                y0 = constant(0),
                y1 = y,
                defined = constant(true),
                context = null,
                curve = curveLinear,
                output = null;

            function area(data) {
                var i,
                    j,
                    k,
                    n = data.length,
                    d,
                    defined0 = false,
                    buffer,
                    x0z = new Array(n),
                    y0z = new Array(n);

                if (context == null) output = curve(buffer = d3Path.path());

                for (i = 0; i <= n; ++i) {
                    if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                        if (defined0 = !defined0) {
                            j = i;
                            output.areaStart();
                            output.lineStart();
                        } else {
                            output.lineEnd();
                            output.lineStart();
                            for (k = i - 1; k >= j; --k) {
                                output.point(x0z[k], y0z[k]);
                            }
                            output.lineEnd();
                            output.areaEnd();
                        }
                    }
                    if (defined0) {
                        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
                    }
                }

                if (buffer) return output = null, buffer + "" || null;
            }

            function arealine() {
                return line().defined(defined).curve(curve).context(context);
            }

            area.x = function(_) {
                return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
            };

            area.x0 = function(_) {
                return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
            };

            area.x1 = function(_) {
                return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
            };

            area.y = function(_) {
                return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
            };

            area.y0 = function(_) {
                return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
            };

            area.y1 = function(_) {
                return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
            };

            area.lineX0 =
                area.lineY0 = function() {
                    return arealine().x(x0).y(y0);
                };

            area.lineY1 = function() {
                return arealine().x(x0).y(y1);
            };

            area.lineX1 = function() {
                return arealine().x(x1).y(y0);
            };

            area.defined = function(_) {
                return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
            };

            area.curve = function(_) {
                return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
            };

            area.context = function(_) {
                return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
            };

            return area;
        };

        var descending = function(a, b) {
            return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
        };

        var identity = function(d) {
            return d;
        };

        var pie = function() {
            var value = identity,
                sortValues = descending,
                sort = null,
                startAngle = constant(0),
                endAngle = constant(tau),
                padAngle = constant(0);

            function pie(data) {
                var i,
                    n = data.length,
                    j,
                    k,
                    sum = 0,
                    index = new Array(n),
                    arcs = new Array(n),
                    a0 = +startAngle.apply(this, arguments),
                    da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
                    a1,
                    p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
                    pa = p * (da < 0 ? -1 : 1),
                    v;

                for (i = 0; i < n; ++i) {
                    if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
                        sum += v;
                    }
                }

                // Optionally sort the arcs by previously-computed values or by data.
                if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
                else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

                // Compute the arcs! They are stored in the original data's order.
                for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
                    j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
                        data: data[j],
                        index: i,
                        value: v,
                        startAngle: a0,
                        endAngle: a1,
                        padAngle: p
                    };
                }

                return arcs;
            }

            pie.value = function(_) {
                return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
            };

            pie.sortValues = function(_) {
                return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
            };

            pie.sort = function(_) {
                return arguments.length ? (sort = _, sortValues = null, pie) : sort;
            };

            pie.startAngle = function(_) {
                return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
            };

            pie.endAngle = function(_) {
                return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
            };

            pie.padAngle = function(_) {
                return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
            };

            return pie;
        };

        var curveRadialLinear = curveRadial(curveLinear);

        function Radial(curve) {
            this._curve = curve;
        }

        Radial.prototype = {
            areaStart: function() {
                this._curve.areaStart();
            },
            areaEnd: function() {
                this._curve.areaEnd();
            },
            lineStart: function() {
                this._curve.lineStart();
            },
            lineEnd: function() {
                this._curve.lineEnd();
            },
            point: function(a, r) {
                this._curve.point(r * Math.sin(a), r * -Math.cos(a));
            }
        };

        function curveRadial(curve) {

            function radial(context) {
                return new Radial(curve(context));
            }

            radial._curve = curve;

            return radial;
        }

        function lineRadial(l) {
            var c = l.curve;

            l.angle = l.x, delete l.x;
            l.radius = l.y, delete l.y;

            l.curve = function(_) {
                return arguments.length ? c(curveRadial(_)) : c()._curve;
            };

            return l;
        }

        var lineRadial$1 = function() {
            return lineRadial(line().curve(curveRadialLinear));
        };

        var areaRadial = function() {
            var a = area().curve(curveRadialLinear),
                c = a.curve,
                x0 = a.lineX0,
                x1 = a.lineX1,
                y0 = a.lineY0,
                y1 = a.lineY1;

            a.angle = a.x, delete a.x;
            a.startAngle = a.x0, delete a.x0;
            a.endAngle = a.x1, delete a.x1;
            a.radius = a.y, delete a.y;
            a.innerRadius = a.y0, delete a.y0;
            a.outerRadius = a.y1, delete a.y1;
            a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
            a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
            a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
            a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

            a.curve = function(_) {
                return arguments.length ? c(curveRadial(_)) : c()._curve;
            };

            return a;
        };

        var pointRadial = function(x, y) {
            return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
        };

        var slice = Array.prototype.slice;

        function linkSource(d) {
            return d.source;
        }

        function linkTarget(d) {
            return d.target;
        }

        function link(curve) {
            var source = linkSource,
                target = linkTarget,
                x$$1 = x,
                y$$1 = y,
                context = null;

            function link() {
                var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
                if (!context) context = buffer = d3Path.path();
                curve(context, +x$$1.apply(this, (argv[0] = s, argv)), +y$$1.apply(this, argv), +x$$1.apply(this, (argv[0] = t, argv)), +y$$1.apply(this, argv));
                if (buffer) return context = null, buffer + "" || null;
            }

            link.source = function(_) {
                return arguments.length ? (source = _, link) : source;
            };

            link.target = function(_) {
                return arguments.length ? (target = _, link) : target;
            };

            link.x = function(_) {
                return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), link) : x$$1;
            };

            link.y = function(_) {
                return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), link) : y$$1;
            };

            link.context = function(_) {
                return arguments.length ? ((context = _ == null ? null : _), link) : context;
            };

            return link;
        }

        function curveHorizontal(context, x0, y0, x1, y1) {
            context.moveTo(x0, y0);
            context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
        }

        function curveVertical(context, x0, y0, x1, y1) {
            context.moveTo(x0, y0);
            context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
        }

        function curveRadial$1(context, x0, y0, x1, y1) {
            var p0 = pointRadial(x0, y0),
                p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
                p2 = pointRadial(x1, y0),
                p3 = pointRadial(x1, y1);
            context.moveTo(p0[0], p0[1]);
            context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
        }

        function linkHorizontal() {
            return link(curveHorizontal);
        }

        function linkVertical() {
            return link(curveVertical);
        }

        function linkRadial() {
            var l = link(curveRadial$1);
            l.angle = l.x, delete l.x;
            l.radius = l.y, delete l.y;
            return l;
        }

        var circle = {
            draw: function(context, size) {
                var r = Math.sqrt(size / pi);
                context.moveTo(r, 0);
                context.arc(0, 0, r, 0, tau);
            }
        };

        var cross = {
            draw: function(context, size) {
                var r = Math.sqrt(size / 5) / 2;
                context.moveTo(-3 * r, -r);
                context.lineTo(-r, -r);
                context.lineTo(-r, -3 * r);
                context.lineTo(r, -3 * r);
                context.lineTo(r, -r);
                context.lineTo(3 * r, -r);
                context.lineTo(3 * r, r);
                context.lineTo(r, r);
                context.lineTo(r, 3 * r);
                context.lineTo(-r, 3 * r);
                context.lineTo(-r, r);
                context.lineTo(-3 * r, r);
                context.closePath();
            }
        };

        var tan30 = Math.sqrt(1 / 3);
        var tan30_2 = tan30 * 2;

        var diamond = {
            draw: function(context, size) {
                var y = Math.sqrt(size / tan30_2),
                    x = y * tan30;
                context.moveTo(0, -y);
                context.lineTo(x, 0);
                context.lineTo(0, y);
                context.lineTo(-x, 0);
                context.closePath();
            }
        };

        var ka = 0.89081309152928522810;
        var kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10);
        var kx = Math.sin(tau / 10) * kr;
        var ky = -Math.cos(tau / 10) * kr;

        var star = {
            draw: function(context, size) {
                var r = Math.sqrt(size * ka),
                    x = kx * r,
                    y = ky * r;
                context.moveTo(0, -r);
                context.lineTo(x, y);
                for (var i = 1; i < 5; ++i) {
                    var a = tau * i / 5,
                        c = Math.cos(a),
                        s = Math.sin(a);
                    context.lineTo(s * r, -c * r);
                    context.lineTo(c * x - s * y, s * x + c * y);
                }
                context.closePath();
            }
        };

        var square = {
            draw: function(context, size) {
                var w = Math.sqrt(size),
                    x = -w / 2;
                context.rect(x, x, w, w);
            }
        };

        var sqrt3 = Math.sqrt(3);

        var triangle = {
            draw: function(context, size) {
                var y = -Math.sqrt(size / (sqrt3 * 3));
                context.moveTo(0, y * 2);
                context.lineTo(-sqrt3 * y, -y);
                context.lineTo(sqrt3 * y, -y);
                context.closePath();
            }
        };

        var c = -0.5;
        var s = Math.sqrt(3) / 2;
        var k = 1 / Math.sqrt(12);
        var a = (k / 2 + 1) * 3;

        var wye = {
            draw: function(context, size) {
                var r = Math.sqrt(size / a),
                    x0 = r / 2,
                    y0 = r * k,
                    x1 = x0,
                    y1 = r * k + r,
                    x2 = -x1,
                    y2 = y1;
                context.moveTo(x0, y0);
                context.lineTo(x1, y1);
                context.lineTo(x2, y2);
                context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
                context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
                context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
                context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
                context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
                context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
                context.closePath();
            }
        };

        var symbols = [
            circle,
            cross,
            diamond,
            square,
            star,
            triangle,
            wye
        ];

        var symbol = function() {
            var type = constant(circle),
                size = constant(64),
                context = null;

            function symbol() {
                var buffer;
                if (!context) context = buffer = d3Path.path();
                type.apply(this, arguments).draw(context, +size.apply(this, arguments));
                if (buffer) return context = null, buffer + "" || null;
            }

            symbol.type = function(_) {
                return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
            };

            symbol.size = function(_) {
                return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
            };

            symbol.context = function(_) {
                return arguments.length ? (context = _ == null ? null : _, symbol) : context;
            };

            return symbol;
        };

        var noop = function() {};

        function point(that, x, y) {
            that._context.bezierCurveTo(
                (2 * that._x0 + that._x1) / 3,
                (2 * that._y0 + that._y1) / 3,
                (that._x0 + 2 * that._x1) / 3,
                (that._y0 + 2 * that._y1) / 3,
                (that._x0 + 4 * that._x1 + x) / 6,
                (that._y0 + 4 * that._y1 + y) / 6
            );
        }

        function Basis(context) {
            this._context = context;
        }

        Basis.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._x0 = this._x1 =
                    this._y0 = this._y1 = NaN;
                this._point = 0;
            },
            lineEnd: function() {
                switch (this._point) {
                    case 3: point(this, this._x1, this._y1); // proceed
                    case 2: this._context.lineTo(this._x1, this._y1); break;
                }
                if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
                this._line = 1 - this._line;
            },
            point: function(x, y) {
                x = +x, y = +y;
                switch (this._point) {
                    case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
                    case 1: this._point = 2; break;
                    case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
                    default: point(this, x, y); break;
                }
                this._x0 = this._x1, this._x1 = x;
                this._y0 = this._y1, this._y1 = y;
            }
        };

        var basis = function(context) {
            return new Basis(context);
        };

        function BasisClosed(context) {
            this._context = context;
        }

        BasisClosed.prototype = {
            areaStart: noop,
            areaEnd: noop,
            lineStart: function() {
                this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
                    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
                this._point = 0;
            },
            lineEnd: function() {
                switch (this._point) {
                    case 1: {
                        this._context.moveTo(this._x2, this._y2);
                        this._context.closePath();
                        break;
                    }
                    case 2: {
                        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                        this._context.closePath();
                        break;
                    }
                    case 3: {
                        this.point(this._x2, this._y2);
                        this.point(this._x3, this._y3);
                        this.point(this._x4, this._y4);
                        break;
                    }
                }
            },
            point: function(x, y) {
                x = +x, y = +y;
                switch (this._point) {
                    case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
                    case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
                    case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
                    default: point(this, x, y); break;
                }
                this._x0 = this._x1, this._x1 = x;
                this._y0 = this._y1, this._y1 = y;
            }
        };

        var basisClosed = function(context) {
            return new BasisClosed(context);
        };

        function BasisOpen(context) {
            this._context = context;
        }

        BasisOpen.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._x0 = this._x1 =
                    this._y0 = this._y1 = NaN;
                this._point = 0;
            },
            lineEnd: function() {
                if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
                this._line = 1 - this._line;
            },
            point: function(x, y) {
                x = +x, y = +y;
                switch (this._point) {
                    case 0: this._point = 1; break;
                    case 1: this._point = 2; break;
                    case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
                    case 3: this._point = 4; // proceed
                    default: point(this, x, y); break;
                }
                this._x0 = this._x1, this._x1 = x;
                this._y0 = this._y1, this._y1 = y;
            }
        };

        var basisOpen = function(context) {
            return new BasisOpen(context);
        };

        function Bundle(context, beta) {
            this._basis = new Basis(context);
            this._beta = beta;
        }

        Bundle.prototype = {
            lineStart: function() {
                this._x = [];
                this._y = [];
                this._basis.lineStart();
            },
            lineEnd: function() {
                var x = this._x,
                    y = this._y,
                    j = x.length - 1;

                if (j > 0) {
                    var x0 = x[0],
                        y0 = y[0],
                        dx = x[j] - x0,
                        dy = y[j] - y0,
                        i = -1,
                        t;

                    while (++i <= j) {
                        t = i / j;
                        this._basis.point(
                            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
                            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
                        );
                    }
                }

                this._x = this._y = null;
                this._basis.lineEnd();
            },
            point: function(x, y) {
                this._x.push(+x);
                this._y.push(+y);
            }
        };

        var bundle = ((function custom(beta) {

            function bundle(context) {
                return beta === 1 ? new Basis(context) : new Bundle(context, beta);
            }

            bundle.beta = function(beta) {
                return custom(+beta);
            };

            return bundle;
        }))(0.85);

        function point$1(that, x, y) {
            that._context.bezierCurveTo(
                that._x1 + that._k * (that._x2 - that._x0),
                that._y1 + that._k * (that._y2 - that._y0),
                that._x2 + that._k * (that._x1 - x),
                that._y2 + that._k * (that._y1 - y),
                that._x2,
                that._y2
            );
        }

        function Cardinal(context, tension) {
            this._context = context;
            this._k = (1 - tension) / 6;
        }

        Cardinal.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._x0 = this._x1 = this._x2 =
                    this._y0 = this._y1 = this._y2 = NaN;
                this._point = 0;
            },
            lineEnd: function() {
                switch (this._point) {
                    case 2: this._context.lineTo(this._x2, this._y2); break;
                    case 3: point$1(this, this._x1, this._y1); break;
                }
                if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
                this._line = 1 - this._line;
            },
            point: function(x, y) {
                x = +x, y = +y;
                switch (this._point) {
                    case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
                    case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
                    case 2: this._point = 3; // proceed
                    default: point$1(this, x, y); break;
                }
                this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
                this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
            }
        };

        var cardinal = ((function custom(tension) {

            function cardinal(context) {
                return new Cardinal(context, tension);
            }

            cardinal.tension = function(tension) {
                return custom(+tension);
            };

            return cardinal;
        }))(0);

        function CardinalClosed(context, tension) {
            this._context = context;
            this._k = (1 - tension) / 6;
        }

        CardinalClosed.prototype = {
            areaStart: noop,
            areaEnd: noop,
            lineStart: function() {
                this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
                    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
                this._point = 0;
            },
            lineEnd: function() {
                switch (this._point) {
                    case 1: {
                        this._context.moveTo(this._x3, this._y3);
                        this._context.closePath();
                        break;
                    }
                    case 2: {
                        this._context.lineTo(this._x3, this._y3);
                        this._context.closePath();
                        break;
                    }
                    case 3: {
                        this.point(this._x3, this._y3);
                        this.point(this._x4, this._y4);
                        this.point(this._x5, this._y5);
                        break;
                    }
                }
            },
            point: function(x, y) {
                x = +x, y = +y;
                switch (this._point) {
                    case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
                    case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
                    case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
                    default: point$1(this, x, y); break;
                }
                this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
                this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
            }
        };

        var cardinalClosed = ((function custom(tension) {

            function cardinal(context) {
                return new CardinalClosed(context, tension);
            }

            cardinal.tension = function(tension) {
                return custom(+tension);
            };

            return cardinal;
        }))(0);

        function CardinalOpen(context, tension) {
            this._context = context;
            this._k = (1 - tension) / 6;
        }

        CardinalOpen.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._x0 = this._x1 = this._x2 =
                    this._y0 = this._y1 = this._y2 = NaN;
                this._point = 0;
            },
            lineEnd: function() {
                if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
                this._line = 1 - this._line;
            },
            point: function(x, y) {
                x = +x, y = +y;
                switch (this._point) {
                    case 0: this._point = 1; break;
                    case 1: this._point = 2; break;
                    case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
                    case 3: this._point = 4; // proceed
                    default: point$1(this, x, y); break;
                }
                this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
                this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
            }
        };

        var cardinalOpen = ((function custom(tension) {

            function cardinal(context) {
                return new CardinalOpen(context, tension);
            }

            cardinal.tension = function(tension) {
                return custom(+tension);
            };

            return cardinal;
        }))(0);

        function point$2(that, x, y) {
            var x1 = that._x1,
                y1 = that._y1,
                x2 = that._x2,
                y2 = that._y2;

            if (that._l01_a > epsilon) {
                var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
                    n = 3 * that._l01_a * (that._l01_a + that._l12_a);
                x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
                y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
            }

            if (that._l23_a > epsilon) {
                var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
                    m = 3 * that._l23_a * (that._l23_a + that._l12_a);
                x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
                y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
            }

            that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
        }

        function CatmullRom(context, alpha) {
            this._context = context;
            this._alpha = alpha;
        }

        CatmullRom.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._x0 = this._x1 = this._x2 =
                    this._y0 = this._y1 = this._y2 = NaN;
                this._l01_a = this._l12_a = this._l23_a =
                    this._l01_2a = this._l12_2a = this._l23_2a =
                        this._point = 0;
            },
            lineEnd: function() {
                switch (this._point) {
                    case 2: this._context.lineTo(this._x2, this._y2); break;
                    case 3: this.point(this._x2, this._y2); break;
                }
                if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
                this._line = 1 - this._line;
            },
            point: function(x, y) {
                x = +x, y = +y;

                if (this._point) {
                    var x23 = this._x2 - x,
                        y23 = this._y2 - y;
                    this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
                }

                switch (this._point) {
                    case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
                    case 1: this._point = 2; break;
                    case 2: this._point = 3; // proceed
                    default: point$2(this, x, y); break;
                }

                this._l01_a = this._l12_a, this._l12_a = this._l23_a;
                this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
                this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
                this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
            }
        };

        var catmullRom = ((function custom(alpha) {

            function catmullRom(context) {
                return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
            }

            catmullRom.alpha = function(alpha) {
                return custom(+alpha);
            };

            return catmullRom;
        }))(0.5);

        function CatmullRomClosed(context, alpha) {
            this._context = context;
            this._alpha = alpha;
        }

        CatmullRomClosed.prototype = {
            areaStart: noop,
            areaEnd: noop,
            lineStart: function() {
                this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
                    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
                this._l01_a = this._l12_a = this._l23_a =
                    this._l01_2a = this._l12_2a = this._l23_2a =
                        this._point = 0;
            },
            lineEnd: function() {
                switch (this._point) {
                    case 1: {
                        this._context.moveTo(this._x3, this._y3);
                        this._context.closePath();
                        break;
                    }
                    case 2: {
                        this._context.lineTo(this._x3, this._y3);
                        this._context.closePath();
                        break;
                    }
                    case 3: {
                        this.point(this._x3, this._y3);
                        this.point(this._x4, this._y4);
                        this.point(this._x5, this._y5);
                        break;
                    }
                }
            },
            point: function(x, y) {
                x = +x, y = +y;

                if (this._point) {
                    var x23 = this._x2 - x,
                        y23 = this._y2 - y;
                    this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
                }

                switch (this._point) {
                    case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
                    case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
                    case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
                    default: point$2(this, x, y); break;
                }

                this._l01_a = this._l12_a, this._l12_a = this._l23_a;
                this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
                this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
                this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
            }
        };

        var catmullRomClosed = ((function custom(alpha) {

            function catmullRom(context) {
                return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
            }

            catmullRom.alpha = function(alpha) {
                return custom(+alpha);
            };

            return catmullRom;
        }))(0.5);

        function CatmullRomOpen(context, alpha) {
            this._context = context;
            this._alpha = alpha;
        }

        CatmullRomOpen.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._x0 = this._x1 = this._x2 =
                    this._y0 = this._y1 = this._y2 = NaN;
                this._l01_a = this._l12_a = this._l23_a =
                    this._l01_2a = this._l12_2a = this._l23_2a =
                        this._point = 0;
            },
            lineEnd: function() {
                if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
                this._line = 1 - this._line;
            },
            point: function(x, y) {
                x = +x, y = +y;

                if (this._point) {
                    var x23 = this._x2 - x,
                        y23 = this._y2 - y;
                    this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
                }

                switch (this._point) {
                    case 0: this._point = 1; break;
                    case 1: this._point = 2; break;
                    case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
                    case 3: this._point = 4; // proceed
                    default: point$2(this, x, y); break;
                }

                this._l01_a = this._l12_a, this._l12_a = this._l23_a;
                this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
                this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
                this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
            }
        };

        var catmullRomOpen = ((function custom(alpha) {

            function catmullRom(context) {
                return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
            }

            catmullRom.alpha = function(alpha) {
                return custom(+alpha);
            };

            return catmullRom;
        }))(0.5);

        function LinearClosed(context) {
            this._context = context;
        }

        LinearClosed.prototype = {
            areaStart: noop,
            areaEnd: noop,
            lineStart: function() {
                this._point = 0;
            },
            lineEnd: function() {
                if (this._point) this._context.closePath();
            },
            point: function(x, y) {
                x = +x, y = +y;
                if (this._point) this._context.lineTo(x, y);
                else this._point = 1, this._context.moveTo(x, y);
            }
        };

        var linearClosed = function(context) {
            return new LinearClosed(context);
        };

        function sign(x) {
            return x < 0 ? -1 : 1;
        }

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
        function slope3(that, x2, y2) {
            var h0 = that._x1 - that._x0,
                h1 = x2 - that._x1,
                s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
                s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
                p = (s0 * h1 + s1 * h0) / (h0 + h1);
            return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
        }

// Calculate a one-sided slope.
        function slope2(that, t) {
            var h = that._x1 - that._x0;
            return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
        }

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
        function point$3(that, t0, t1) {
            var x0 = that._x0,
                y0 = that._y0,
                x1 = that._x1,
                y1 = that._y1,
                dx = (x1 - x0) / 3;
            that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
        }

        function MonotoneX(context) {
            this._context = context;
        }

        MonotoneX.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._x0 = this._x1 =
                    this._y0 = this._y1 =
                        this._t0 = NaN;
                this._point = 0;
            },
            lineEnd: function() {
                switch (this._point) {
                    case 2: this._context.lineTo(this._x1, this._y1); break;
                    case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
                }
                if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
                this._line = 1 - this._line;
            },
            point: function(x, y) {
                var t1 = NaN;

                x = +x, y = +y;
                if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
                switch (this._point) {
                    case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
                    case 1: this._point = 2; break;
                    case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
                    default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
                }

                this._x0 = this._x1, this._x1 = x;
                this._y0 = this._y1, this._y1 = y;
                this._t0 = t1;
            }
        };

        function MonotoneY(context) {
            this._context = new ReflectContext(context);
        }

        (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
            MonotoneX.prototype.point.call(this, y, x);
        };

        function ReflectContext(context) {
            this._context = context;
        }

        ReflectContext.prototype = {
            moveTo: function(x, y) { this._context.moveTo(y, x); },
            closePath: function() { this._context.closePath(); },
            lineTo: function(x, y) { this._context.lineTo(y, x); },
            bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
        };

        function monotoneX(context) {
            return new MonotoneX(context);
        }

        function monotoneY(context) {
            return new MonotoneY(context);
        }

        function Natural(context) {
            this._context = context;
        }

        Natural.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._x = [];
                this._y = [];
            },
            lineEnd: function() {
                var x = this._x,
                    y = this._y,
                    n = x.length;

                if (n) {
                    this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
                    if (n === 2) {
                        this._context.lineTo(x[1], y[1]);
                    } else {
                        var px = controlPoints(x),
                            py = controlPoints(y);
                        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
                            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
                        }
                    }
                }

                if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
                this._line = 1 - this._line;
                this._x = this._y = null;
            },
            point: function(x, y) {
                this._x.push(+x);
                this._y.push(+y);
            }
        };

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
        function controlPoints(x) {
            var i,
                n = x.length - 1,
                m,
                a = new Array(n),
                b = new Array(n),
                r = new Array(n);
            a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
            for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
            a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
            for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
            a[n - 1] = r[n - 1] / b[n - 1];
            for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
            b[n - 1] = (x[n] + a[n - 1]) / 2;
            for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
            return [a, b];
        }

        var natural = function(context) {
            return new Natural(context);
        };

        function Step(context, t) {
            this._context = context;
            this._t = t;
        }

        Step.prototype = {
            areaStart: function() {
                this._line = 0;
            },
            areaEnd: function() {
                this._line = NaN;
            },
            lineStart: function() {
                this._x = this._y = NaN;
                this._point = 0;
            },
            lineEnd: function() {
                if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
                if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
                if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
            },
            point: function(x, y) {
                x = +x, y = +y;
                switch (this._point) {
                    case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
                    case 1: this._point = 2; // proceed
                    default: {
                        if (this._t <= 0) {
                            this._context.lineTo(this._x, y);
                            this._context.lineTo(x, y);
                        } else {
                            var x1 = this._x * (1 - this._t) + x * this._t;
                            this._context.lineTo(x1, this._y);
                            this._context.lineTo(x1, y);
                        }
                        break;
                    }
                }
                this._x = x, this._y = y;
            }
        };

        var step = function(context) {
            return new Step(context, 0.5);
        };

        function stepBefore(context) {
            return new Step(context, 0);
        }

        function stepAfter(context) {
            return new Step(context, 1);
        }

        var none = function(series, order) {
            if (!((n = series.length) > 1)) return;
            for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
                s0 = s1, s1 = series[order[i]];
                for (j = 0; j < m; ++j) {
                    s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
                }
            }
        };

        var none$1 = function(series) {
            var n = series.length, o = new Array(n);
            while (--n >= 0) o[n] = n;
            return o;
        };

        function stackValue(d, key) {
            return d[key];
        }

        var stack = function() {
            var keys = constant([]),
                order = none$1,
                offset = none,
                value = stackValue;

            function stack(data) {
                var kz = keys.apply(this, arguments),
                    i,
                    m = data.length,
                    n = kz.length,
                    sz = new Array(n),
                    oz;

                for (i = 0; i < n; ++i) {
                    for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
                        si[j] = sij = [0, +value(data[j], ki, j, data)];
                        sij.data = data[j];
                    }
                    si.key = ki;
                }

                for (i = 0, oz = order(sz); i < n; ++i) {
                    sz[oz[i]].index = i;
                }

                offset(sz, oz);
                return sz;
            }

            stack.keys = function(_) {
                return arguments.length ? (keys = typeof _ === "function" ? _ : constant(slice.call(_)), stack) : keys;
            };

            stack.value = function(_) {
                return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
            };

            stack.order = function(_) {
                return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant(slice.call(_)), stack) : order;
            };

            stack.offset = function(_) {
                return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
            };

            return stack;
        };

        var expand = function(series, order) {
            if (!((n = series.length) > 0)) return;
            for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
                for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
                if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
            }
            none(series, order);
        };

        var diverging = function(series, order) {
            if (!((n = series.length) > 1)) return;
            for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
                for (yp = yn = 0, i = 0; i < n; ++i) {
                    if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
                        d[0] = yp, d[1] = yp += dy;
                    } else if (dy < 0) {
                        d[1] = yn, d[0] = yn += dy;
                    } else {
                        d[0] = yp;
                    }
                }
            }
        };

        var silhouette = function(series, order) {
            if (!((n = series.length) > 0)) return;
            for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
                for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
                s0[j][1] += s0[j][0] = -y / 2;
            }
            none(series, order);
        };

        var wiggle = function(series, order) {
            if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
            for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
                for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
                    var si = series[order[i]],
                        sij0 = si[j][1] || 0,
                        sij1 = si[j - 1][1] || 0,
                        s3 = (sij0 - sij1) / 2;
                    for (var k = 0; k < i; ++k) {
                        var sk = series[order[k]],
                            skj0 = sk[j][1] || 0,
                            skj1 = sk[j - 1][1] || 0;
                        s3 += skj0 - skj1;
                    }
                    s1 += sij0, s2 += s3 * sij0;
                }
                s0[j - 1][1] += s0[j - 1][0] = y;
                if (s1) y -= s2 / s1;
            }
            s0[j - 1][1] += s0[j - 1][0] = y;
            none(series, order);
        };

        var ascending = function(series) {
            var sums = series.map(sum);
            return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });
        };

        function sum(series) {
            var s = 0, i = -1, n = series.length, v;
            while (++i < n) if (v = +series[i][1]) s += v;
            return s;
        }

        var descending$1 = function(series) {
            return ascending(series).reverse();
        };

        var insideOut = function(series) {
            var n = series.length,
                i,
                j,
                sums = series.map(sum),
                order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),
                top = 0,
                bottom = 0,
                tops = [],
                bottoms = [];

            for (i = 0; i < n; ++i) {
                j = order[i];
                if (top < bottom) {
                    top += sums[j];
                    tops.push(j);
                } else {
                    bottom += sums[j];
                    bottoms.push(j);
                }
            }

            return bottoms.reverse().concat(tops);
        };

        var reverse = function(series) {
            return none$1(series).reverse();
        };

        exports.arc = arc;
        exports.area = area;
        exports.line = line;
        exports.pie = pie;
        exports.areaRadial = areaRadial;
        exports.radialArea = areaRadial;
        exports.lineRadial = lineRadial$1;
        exports.radialLine = lineRadial$1;
        exports.pointRadial = pointRadial;
        exports.linkHorizontal = linkHorizontal;
        exports.linkVertical = linkVertical;
        exports.linkRadial = linkRadial;
        exports.symbol = symbol;
        exports.symbols = symbols;
        exports.symbolCircle = circle;
        exports.symbolCross = cross;
        exports.symbolDiamond = diamond;
        exports.symbolSquare = square;
        exports.symbolStar = star;
        exports.symbolTriangle = triangle;
        exports.symbolWye = wye;
        exports.curveBasisClosed = basisClosed;
        exports.curveBasisOpen = basisOpen;
        exports.curveBasis = basis;
        exports.curveBundle = bundle;
        exports.curveCardinalClosed = cardinalClosed;
        exports.curveCardinalOpen = cardinalOpen;
        exports.curveCardinal = cardinal;
        exports.curveCatmullRomClosed = catmullRomClosed;
        exports.curveCatmullRomOpen = catmullRomOpen;
        exports.curveCatmullRom = catmullRom;
        exports.curveLinearClosed = linearClosed;
        exports.curveLinear = curveLinear;
        exports.curveMonotoneX = monotoneX;
        exports.curveMonotoneY = monotoneY;
        exports.curveNatural = natural;
        exports.curveStep = step;
        exports.curveStepAfter = stepAfter;
        exports.curveStepBefore = stepBefore;
        exports.stack = stack;
        exports.stackOffsetExpand = expand;
        exports.stackOffsetDiverging = diverging;
        exports.stackOffsetNone = none;
        exports.stackOffsetSilhouette = silhouette;
        exports.stackOffsetWiggle = wiggle;
        exports.stackOrderAscending = ascending;
        exports.stackOrderDescending = descending$1;
        exports.stackOrderInsideOut = insideOut;
        exports.stackOrderNone = none$1;
        exports.stackOrderReverse = reverse;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-path":54}],63:[function(require,module,exports){
// https://d3js.org/d3-time-format/ Version 2.1.1. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-time')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-time'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3));
    }(this, (function (exports,d3Time) { 'use strict';

        function localDate(d) {
            if (0 <= d.y && d.y < 100) {
                var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
                date.setFullYear(d.y);
                return date;
            }
            return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
        }

        function utcDate(d) {
            if (0 <= d.y && d.y < 100) {
                var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
                date.setUTCFullYear(d.y);
                return date;
            }
            return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
        }

        function newYear(y) {
            return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
        }

        function formatLocale(locale) {
            var locale_dateTime = locale.dateTime,
                locale_date = locale.date,
                locale_time = locale.time,
                locale_periods = locale.periods,
                locale_weekdays = locale.days,
                locale_shortWeekdays = locale.shortDays,
                locale_months = locale.months,
                locale_shortMonths = locale.shortMonths;

            var periodRe = formatRe(locale_periods),
                periodLookup = formatLookup(locale_periods),
                weekdayRe = formatRe(locale_weekdays),
                weekdayLookup = formatLookup(locale_weekdays),
                shortWeekdayRe = formatRe(locale_shortWeekdays),
                shortWeekdayLookup = formatLookup(locale_shortWeekdays),
                monthRe = formatRe(locale_months),
                monthLookup = formatLookup(locale_months),
                shortMonthRe = formatRe(locale_shortMonths),
                shortMonthLookup = formatLookup(locale_shortMonths);

            var formats = {
                "a": formatShortWeekday,
                "A": formatWeekday,
                "b": formatShortMonth,
                "B": formatMonth,
                "c": null,
                "d": formatDayOfMonth,
                "e": formatDayOfMonth,
                "f": formatMicroseconds,
                "H": formatHour24,
                "I": formatHour12,
                "j": formatDayOfYear,
                "L": formatMilliseconds,
                "m": formatMonthNumber,
                "M": formatMinutes,
                "p": formatPeriod,
                "Q": formatUnixTimestamp,
                "s": formatUnixTimestampSeconds,
                "S": formatSeconds,
                "u": formatWeekdayNumberMonday,
                "U": formatWeekNumberSunday,
                "V": formatWeekNumberISO,
                "w": formatWeekdayNumberSunday,
                "W": formatWeekNumberMonday,
                "x": null,
                "X": null,
                "y": formatYear,
                "Y": formatFullYear,
                "Z": formatZone,
                "%": formatLiteralPercent
            };

            var utcFormats = {
                "a": formatUTCShortWeekday,
                "A": formatUTCWeekday,
                "b": formatUTCShortMonth,
                "B": formatUTCMonth,
                "c": null,
                "d": formatUTCDayOfMonth,
                "e": formatUTCDayOfMonth,
                "f": formatUTCMicroseconds,
                "H": formatUTCHour24,
                "I": formatUTCHour12,
                "j": formatUTCDayOfYear,
                "L": formatUTCMilliseconds,
                "m": formatUTCMonthNumber,
                "M": formatUTCMinutes,
                "p": formatUTCPeriod,
                "Q": formatUnixTimestamp,
                "s": formatUnixTimestampSeconds,
                "S": formatUTCSeconds,
                "u": formatUTCWeekdayNumberMonday,
                "U": formatUTCWeekNumberSunday,
                "V": formatUTCWeekNumberISO,
                "w": formatUTCWeekdayNumberSunday,
                "W": formatUTCWeekNumberMonday,
                "x": null,
                "X": null,
                "y": formatUTCYear,
                "Y": formatUTCFullYear,
                "Z": formatUTCZone,
                "%": formatLiteralPercent
            };

            var parses = {
                "a": parseShortWeekday,
                "A": parseWeekday,
                "b": parseShortMonth,
                "B": parseMonth,
                "c": parseLocaleDateTime,
                "d": parseDayOfMonth,
                "e": parseDayOfMonth,
                "f": parseMicroseconds,
                "H": parseHour24,
                "I": parseHour24,
                "j": parseDayOfYear,
                "L": parseMilliseconds,
                "m": parseMonthNumber,
                "M": parseMinutes,
                "p": parsePeriod,
                "Q": parseUnixTimestamp,
                "s": parseUnixTimestampSeconds,
                "S": parseSeconds,
                "u": parseWeekdayNumberMonday,
                "U": parseWeekNumberSunday,
                "V": parseWeekNumberISO,
                "w": parseWeekdayNumberSunday,
                "W": parseWeekNumberMonday,
                "x": parseLocaleDate,
                "X": parseLocaleTime,
                "y": parseYear,
                "Y": parseFullYear,
                "Z": parseZone,
                "%": parseLiteralPercent
            };

            // These recursive directive definitions must be deferred.
            formats.x = newFormat(locale_date, formats);
            formats.X = newFormat(locale_time, formats);
            formats.c = newFormat(locale_dateTime, formats);
            utcFormats.x = newFormat(locale_date, utcFormats);
            utcFormats.X = newFormat(locale_time, utcFormats);
            utcFormats.c = newFormat(locale_dateTime, utcFormats);

            function newFormat(specifier, formats) {
                return function(date) {
                    var string = [],
                        i = -1,
                        j = 0,
                        n = specifier.length,
                        c,
                        pad,
                        format;

                    if (!(date instanceof Date)) date = new Date(+date);

                    while (++i < n) {
                        if (specifier.charCodeAt(i) === 37) {
                            string.push(specifier.slice(j, i));
                            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
                            else pad = c === "e" ? " " : "0";
                            if (format = formats[c]) c = format(date, pad);
                            string.push(c);
                            j = i + 1;
                        }
                    }

                    string.push(specifier.slice(j, i));
                    return string.join("");
                };
            }

            function newParse(specifier, newDate) {
                return function(string) {
                    var d = newYear(1900),
                        i = parseSpecifier(d, specifier, string += "", 0),
                        week, day;
                    if (i != string.length) return null;

                    // If a UNIX timestamp is specified, return it.
                    if ("Q" in d) return new Date(d.Q);

                    // The am-pm flag is 0 for AM, and 1 for PM.
                    if ("p" in d) d.H = d.H % 12 + d.p * 12;

                    // Convert day-of-week and week-of-year to day-of-year.
                    if ("V" in d) {
                        if (d.V < 1 || d.V > 53) return null;
                        if (!("w" in d)) d.w = 1;
                        if ("Z" in d) {
                            week = utcDate(newYear(d.y)), day = week.getUTCDay();
                            week = day > 4 || day === 0 ? d3Time.utcMonday.ceil(week) : d3Time.utcMonday(week);
                            week = d3Time.utcDay.offset(week, (d.V - 1) * 7);
                            d.y = week.getUTCFullYear();
                            d.m = week.getUTCMonth();
                            d.d = week.getUTCDate() + (d.w + 6) % 7;
                        } else {
                            week = newDate(newYear(d.y)), day = week.getDay();
                            week = day > 4 || day === 0 ? d3Time.timeMonday.ceil(week) : d3Time.timeMonday(week);
                            week = d3Time.timeDay.offset(week, (d.V - 1) * 7);
                            d.y = week.getFullYear();
                            d.m = week.getMonth();
                            d.d = week.getDate() + (d.w + 6) % 7;
                        }
                    } else if ("W" in d || "U" in d) {
                        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
                        day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
                        d.m = 0;
                        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
                    }

                    // If a time zone is specified, all fields are interpreted as UTC and then
                    // offset according to the specified time zone.
                    if ("Z" in d) {
                        d.H += d.Z / 100 | 0;
                        d.M += d.Z % 100;
                        return utcDate(d);
                    }

                    // Otherwise, all fields are in local time.
                    return newDate(d);
                };
            }

            function parseSpecifier(d, specifier, string, j) {
                var i = 0,
                    n = specifier.length,
                    m = string.length,
                    c,
                    parse;

                while (i < n) {
                    if (j >= m) return -1;
                    c = specifier.charCodeAt(i++);
                    if (c === 37) {
                        c = specifier.charAt(i++);
                        parse = parses[c in pads ? specifier.charAt(i++) : c];
                        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
                    } else if (c != string.charCodeAt(j++)) {
                        return -1;
                    }
                }

                return j;
            }

            function parsePeriod(d, string, i) {
                var n = periodRe.exec(string.slice(i));
                return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
            }

            function parseShortWeekday(d, string, i) {
                var n = shortWeekdayRe.exec(string.slice(i));
                return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
            }

            function parseWeekday(d, string, i) {
                var n = weekdayRe.exec(string.slice(i));
                return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
            }

            function parseShortMonth(d, string, i) {
                var n = shortMonthRe.exec(string.slice(i));
                return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
            }

            function parseMonth(d, string, i) {
                var n = monthRe.exec(string.slice(i));
                return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
            }

            function parseLocaleDateTime(d, string, i) {
                return parseSpecifier(d, locale_dateTime, string, i);
            }

            function parseLocaleDate(d, string, i) {
                return parseSpecifier(d, locale_date, string, i);
            }

            function parseLocaleTime(d, string, i) {
                return parseSpecifier(d, locale_time, string, i);
            }

            function formatShortWeekday(d) {
                return locale_shortWeekdays[d.getDay()];
            }

            function formatWeekday(d) {
                return locale_weekdays[d.getDay()];
            }

            function formatShortMonth(d) {
                return locale_shortMonths[d.getMonth()];
            }

            function formatMonth(d) {
                return locale_months[d.getMonth()];
            }

            function formatPeriod(d) {
                return locale_periods[+(d.getHours() >= 12)];
            }

            function formatUTCShortWeekday(d) {
                return locale_shortWeekdays[d.getUTCDay()];
            }

            function formatUTCWeekday(d) {
                return locale_weekdays[d.getUTCDay()];
            }

            function formatUTCShortMonth(d) {
                return locale_shortMonths[d.getUTCMonth()];
            }

            function formatUTCMonth(d) {
                return locale_months[d.getUTCMonth()];
            }

            function formatUTCPeriod(d) {
                return locale_periods[+(d.getUTCHours() >= 12)];
            }

            return {
                format: function(specifier) {
                    var f = newFormat(specifier += "", formats);
                    f.toString = function() { return specifier; };
                    return f;
                },
                parse: function(specifier) {
                    var p = newParse(specifier += "", localDate);
                    p.toString = function() { return specifier; };
                    return p;
                },
                utcFormat: function(specifier) {
                    var f = newFormat(specifier += "", utcFormats);
                    f.toString = function() { return specifier; };
                    return f;
                },
                utcParse: function(specifier) {
                    var p = newParse(specifier, utcDate);
                    p.toString = function() { return specifier; };
                    return p;
                }
            };
        }

        var pads = {"-": "", "_": " ", "0": "0"};
        var numberRe = /^\s*\d+/;
        var percentRe = /^%/;
        var requoteRe = /[\\^$*+?|[\]().{}]/g;

        function pad(value, fill, width) {
            var sign = value < 0 ? "-" : "",
                string = (sign ? -value : value) + "",
                length = string.length;
            return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
        }

        function requote(s) {
            return s.replace(requoteRe, "\\$&");
        }

        function formatRe(names) {
            return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
        }

        function formatLookup(names) {
            var map = {}, i = -1, n = names.length;
            while (++i < n) map[names[i].toLowerCase()] = i;
            return map;
        }

        function parseWeekdayNumberSunday(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 1));
            return n ? (d.w = +n[0], i + n[0].length) : -1;
        }

        function parseWeekdayNumberMonday(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 1));
            return n ? (d.u = +n[0], i + n[0].length) : -1;
        }

        function parseWeekNumberSunday(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 2));
            return n ? (d.U = +n[0], i + n[0].length) : -1;
        }

        function parseWeekNumberISO(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 2));
            return n ? (d.V = +n[0], i + n[0].length) : -1;
        }

        function parseWeekNumberMonday(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 2));
            return n ? (d.W = +n[0], i + n[0].length) : -1;
        }

        function parseFullYear(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 4));
            return n ? (d.y = +n[0], i + n[0].length) : -1;
        }

        function parseYear(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 2));
            return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
        }

        function parseZone(d, string, i) {
            var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
            return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
        }

        function parseMonthNumber(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 2));
            return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
        }

        function parseDayOfMonth(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 2));
            return n ? (d.d = +n[0], i + n[0].length) : -1;
        }

        function parseDayOfYear(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 3));
            return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
        }

        function parseHour24(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 2));
            return n ? (d.H = +n[0], i + n[0].length) : -1;
        }

        function parseMinutes(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 2));
            return n ? (d.M = +n[0], i + n[0].length) : -1;
        }

        function parseSeconds(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 2));
            return n ? (d.S = +n[0], i + n[0].length) : -1;
        }

        function parseMilliseconds(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 3));
            return n ? (d.L = +n[0], i + n[0].length) : -1;
        }

        function parseMicroseconds(d, string, i) {
            var n = numberRe.exec(string.slice(i, i + 6));
            return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
        }

        function parseLiteralPercent(d, string, i) {
            var n = percentRe.exec(string.slice(i, i + 1));
            return n ? i + n[0].length : -1;
        }

        function parseUnixTimestamp(d, string, i) {
            var n = numberRe.exec(string.slice(i));
            return n ? (d.Q = +n[0], i + n[0].length) : -1;
        }

        function parseUnixTimestampSeconds(d, string, i) {
            var n = numberRe.exec(string.slice(i));
            return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;
        }

        function formatDayOfMonth(d, p) {
            return pad(d.getDate(), p, 2);
        }

        function formatHour24(d, p) {
            return pad(d.getHours(), p, 2);
        }

        function formatHour12(d, p) {
            return pad(d.getHours() % 12 || 12, p, 2);
        }

        function formatDayOfYear(d, p) {
            return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
        }

        function formatMilliseconds(d, p) {
            return pad(d.getMilliseconds(), p, 3);
        }

        function formatMicroseconds(d, p) {
            return formatMilliseconds(d, p) + "000";
        }

        function formatMonthNumber(d, p) {
            return pad(d.getMonth() + 1, p, 2);
        }

        function formatMinutes(d, p) {
            return pad(d.getMinutes(), p, 2);
        }

        function formatSeconds(d, p) {
            return pad(d.getSeconds(), p, 2);
        }

        function formatWeekdayNumberMonday(d) {
            var day = d.getDay();
            return day === 0 ? 7 : day;
        }

        function formatWeekNumberSunday(d, p) {
            return pad(d3Time.timeSunday.count(d3Time.timeYear(d), d), p, 2);
        }

        function formatWeekNumberISO(d, p) {
            var day = d.getDay();
            d = (day >= 4 || day === 0) ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
            return pad(d3Time.timeThursday.count(d3Time.timeYear(d), d) + (d3Time.timeYear(d).getDay() === 4), p, 2);
        }

        function formatWeekdayNumberSunday(d) {
            return d.getDay();
        }

        function formatWeekNumberMonday(d, p) {
            return pad(d3Time.timeMonday.count(d3Time.timeYear(d), d), p, 2);
        }

        function formatYear(d, p) {
            return pad(d.getFullYear() % 100, p, 2);
        }

        function formatFullYear(d, p) {
            return pad(d.getFullYear() % 10000, p, 4);
        }

        function formatZone(d) {
            var z = d.getTimezoneOffset();
            return (z > 0 ? "-" : (z *= -1, "+"))
                + pad(z / 60 | 0, "0", 2)
                + pad(z % 60, "0", 2);
        }

        function formatUTCDayOfMonth(d, p) {
            return pad(d.getUTCDate(), p, 2);
        }

        function formatUTCHour24(d, p) {
            return pad(d.getUTCHours(), p, 2);
        }

        function formatUTCHour12(d, p) {
            return pad(d.getUTCHours() % 12 || 12, p, 2);
        }

        function formatUTCDayOfYear(d, p) {
            return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
        }

        function formatUTCMilliseconds(d, p) {
            return pad(d.getUTCMilliseconds(), p, 3);
        }

        function formatUTCMicroseconds(d, p) {
            return formatUTCMilliseconds(d, p) + "000";
        }

        function formatUTCMonthNumber(d, p) {
            return pad(d.getUTCMonth() + 1, p, 2);
        }

        function formatUTCMinutes(d, p) {
            return pad(d.getUTCMinutes(), p, 2);
        }

        function formatUTCSeconds(d, p) {
            return pad(d.getUTCSeconds(), p, 2);
        }

        function formatUTCWeekdayNumberMonday(d) {
            var dow = d.getUTCDay();
            return dow === 0 ? 7 : dow;
        }

        function formatUTCWeekNumberSunday(d, p) {
            return pad(d3Time.utcSunday.count(d3Time.utcYear(d), d), p, 2);
        }

        function formatUTCWeekNumberISO(d, p) {
            var day = d.getUTCDay();
            d = (day >= 4 || day === 0) ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
            return pad(d3Time.utcThursday.count(d3Time.utcYear(d), d) + (d3Time.utcYear(d).getUTCDay() === 4), p, 2);
        }

        function formatUTCWeekdayNumberSunday(d) {
            return d.getUTCDay();
        }

        function formatUTCWeekNumberMonday(d, p) {
            return pad(d3Time.utcMonday.count(d3Time.utcYear(d), d), p, 2);
        }

        function formatUTCYear(d, p) {
            return pad(d.getUTCFullYear() % 100, p, 2);
        }

        function formatUTCFullYear(d, p) {
            return pad(d.getUTCFullYear() % 10000, p, 4);
        }

        function formatUTCZone() {
            return "+0000";
        }

        function formatLiteralPercent() {
            return "%";
        }

        function formatUnixTimestamp(d) {
            return +d;
        }

        function formatUnixTimestampSeconds(d) {
            return Math.floor(+d / 1000);
        }

        var locale;





        defaultLocale({
            dateTime: "%x, %X",
            date: "%-m/%-d/%Y",
            time: "%-I:%M:%S %p",
            periods: ["AM", "PM"],
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        });

        function defaultLocale(definition) {
            locale = formatLocale(definition);
            exports.timeFormat = locale.format;
            exports.timeParse = locale.parse;
            exports.utcFormat = locale.utcFormat;
            exports.utcParse = locale.utcParse;
            return locale;
        }

        var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

        function formatIsoNative(date) {
            return date.toISOString();
        }

        var formatIso = Date.prototype.toISOString
            ? formatIsoNative
            : exports.utcFormat(isoSpecifier);

        function parseIsoNative(string) {
            var date = new Date(string);
            return isNaN(date) ? null : date;
        }

        var parseIso = +new Date("2000-01-01T00:00:00.000Z")
            ? parseIsoNative
            : exports.utcParse(isoSpecifier);

        exports.timeFormatDefaultLocale = defaultLocale;
        exports.timeFormatLocale = formatLocale;
        exports.isoFormat = formatIso;
        exports.isoParse = parseIso;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-time":64}],64:[function(require,module,exports){
// https://d3js.org/d3-time/ Version 1.0.8. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var t0 = new Date;
        var t1 = new Date;

        function newInterval(floori, offseti, count, field) {

            function interval(date) {
                return floori(date = new Date(+date)), date;
            }

            interval.floor = interval;

            interval.ceil = function(date) {
                return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
            };

            interval.round = function(date) {
                var d0 = interval(date),
                    d1 = interval.ceil(date);
                return date - d0 < d1 - date ? d0 : d1;
            };

            interval.offset = function(date, step) {
                return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
            };

            interval.range = function(start, stop, step) {
                var range = [], previous;
                start = interval.ceil(start);
                step = step == null ? 1 : Math.floor(step);
                if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
                do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
                while (previous < start && start < stop);
                return range;
            };

            interval.filter = function(test) {
                return newInterval(function(date) {
                    if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
                }, function(date, step) {
                    if (date >= date) {
                        if (step < 0) while (++step <= 0) {
                            while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
                        } else while (--step >= 0) {
                            while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
                        }
                    }
                });
            };

            if (count) {
                interval.count = function(start, end) {
                    t0.setTime(+start), t1.setTime(+end);
                    floori(t0), floori(t1);
                    return Math.floor(count(t0, t1));
                };

                interval.every = function(step) {
                    step = Math.floor(step);
                    return !isFinite(step) || !(step > 0) ? null
                        : !(step > 1) ? interval
                            : interval.filter(field
                                ? function(d) { return field(d) % step === 0; }
                                : function(d) { return interval.count(0, d) % step === 0; });
                };
            }

            return interval;
        }

        var millisecond = newInterval(function() {
            // noop
        }, function(date, step) {
            date.setTime(+date + step);
        }, function(start, end) {
            return end - start;
        });

// An optimized implementation for this simple case.
        millisecond.every = function(k) {
            k = Math.floor(k);
            if (!isFinite(k) || !(k > 0)) return null;
            if (!(k > 1)) return millisecond;
            return newInterval(function(date) {
                date.setTime(Math.floor(date / k) * k);
            }, function(date, step) {
                date.setTime(+date + step * k);
            }, function(start, end) {
                return (end - start) / k;
            });
        };

        var milliseconds = millisecond.range;

        var durationSecond = 1e3;
        var durationMinute = 6e4;
        var durationHour = 36e5;
        var durationDay = 864e5;
        var durationWeek = 6048e5;

        var second = newInterval(function(date) {
            date.setTime(Math.floor(date / durationSecond) * durationSecond);
        }, function(date, step) {
            date.setTime(+date + step * durationSecond);
        }, function(start, end) {
            return (end - start) / durationSecond;
        }, function(date) {
            return date.getUTCSeconds();
        });

        var seconds = second.range;

        var minute = newInterval(function(date) {
            date.setTime(Math.floor(date / durationMinute) * durationMinute);
        }, function(date, step) {
            date.setTime(+date + step * durationMinute);
        }, function(start, end) {
            return (end - start) / durationMinute;
        }, function(date) {
            return date.getMinutes();
        });

        var minutes = minute.range;

        var hour = newInterval(function(date) {
            var offset = date.getTimezoneOffset() * durationMinute % durationHour;
            if (offset < 0) offset += durationHour;
            date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
        }, function(date, step) {
            date.setTime(+date + step * durationHour);
        }, function(start, end) {
            return (end - start) / durationHour;
        }, function(date) {
            return date.getHours();
        });

        var hours = hour.range;

        var day = newInterval(function(date) {
            date.setHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setDate(date.getDate() + step);
        }, function(start, end) {
            return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
        }, function(date) {
            return date.getDate() - 1;
        });

        var days = day.range;

        function weekday(i) {
            return newInterval(function(date) {
                date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
                date.setHours(0, 0, 0, 0);
            }, function(date, step) {
                date.setDate(date.getDate() + step * 7);
            }, function(start, end) {
                return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
            });
        }

        var sunday = weekday(0);
        var monday = weekday(1);
        var tuesday = weekday(2);
        var wednesday = weekday(3);
        var thursday = weekday(4);
        var friday = weekday(5);
        var saturday = weekday(6);

        var sundays = sunday.range;
        var mondays = monday.range;
        var tuesdays = tuesday.range;
        var wednesdays = wednesday.range;
        var thursdays = thursday.range;
        var fridays = friday.range;
        var saturdays = saturday.range;

        var month = newInterval(function(date) {
            date.setDate(1);
            date.setHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setMonth(date.getMonth() + step);
        }, function(start, end) {
            return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
        }, function(date) {
            return date.getMonth();
        });

        var months = month.range;

        var year = newInterval(function(date) {
            date.setMonth(0, 1);
            date.setHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setFullYear(date.getFullYear() + step);
        }, function(start, end) {
            return end.getFullYear() - start.getFullYear();
        }, function(date) {
            return date.getFullYear();
        });

// An optimized implementation for this simple case.
        year.every = function(k) {
            return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
                date.setFullYear(Math.floor(date.getFullYear() / k) * k);
                date.setMonth(0, 1);
                date.setHours(0, 0, 0, 0);
            }, function(date, step) {
                date.setFullYear(date.getFullYear() + step * k);
            });
        };

        var years = year.range;

        var utcMinute = newInterval(function(date) {
            date.setUTCSeconds(0, 0);
        }, function(date, step) {
            date.setTime(+date + step * durationMinute);
        }, function(start, end) {
            return (end - start) / durationMinute;
        }, function(date) {
            return date.getUTCMinutes();
        });

        var utcMinutes = utcMinute.range;

        var utcHour = newInterval(function(date) {
            date.setUTCMinutes(0, 0, 0);
        }, function(date, step) {
            date.setTime(+date + step * durationHour);
        }, function(start, end) {
            return (end - start) / durationHour;
        }, function(date) {
            return date.getUTCHours();
        });

        var utcHours = utcHour.range;

        var utcDay = newInterval(function(date) {
            date.setUTCHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setUTCDate(date.getUTCDate() + step);
        }, function(start, end) {
            return (end - start) / durationDay;
        }, function(date) {
            return date.getUTCDate() - 1;
        });

        var utcDays = utcDay.range;

        function utcWeekday(i) {
            return newInterval(function(date) {
                date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
                date.setUTCHours(0, 0, 0, 0);
            }, function(date, step) {
                date.setUTCDate(date.getUTCDate() + step * 7);
            }, function(start, end) {
                return (end - start) / durationWeek;
            });
        }

        var utcSunday = utcWeekday(0);
        var utcMonday = utcWeekday(1);
        var utcTuesday = utcWeekday(2);
        var utcWednesday = utcWeekday(3);
        var utcThursday = utcWeekday(4);
        var utcFriday = utcWeekday(5);
        var utcSaturday = utcWeekday(6);

        var utcSundays = utcSunday.range;
        var utcMondays = utcMonday.range;
        var utcTuesdays = utcTuesday.range;
        var utcWednesdays = utcWednesday.range;
        var utcThursdays = utcThursday.range;
        var utcFridays = utcFriday.range;
        var utcSaturdays = utcSaturday.range;

        var utcMonth = newInterval(function(date) {
            date.setUTCDate(1);
            date.setUTCHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setUTCMonth(date.getUTCMonth() + step);
        }, function(start, end) {
            return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
        }, function(date) {
            return date.getUTCMonth();
        });

        var utcMonths = utcMonth.range;

        var utcYear = newInterval(function(date) {
            date.setUTCMonth(0, 1);
            date.setUTCHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setUTCFullYear(date.getUTCFullYear() + step);
        }, function(start, end) {
            return end.getUTCFullYear() - start.getUTCFullYear();
        }, function(date) {
            return date.getUTCFullYear();
        });

// An optimized implementation for this simple case.
        utcYear.every = function(k) {
            return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
                date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
                date.setUTCMonth(0, 1);
                date.setUTCHours(0, 0, 0, 0);
            }, function(date, step) {
                date.setUTCFullYear(date.getUTCFullYear() + step * k);
            });
        };

        var utcYears = utcYear.range;

        exports.timeInterval = newInterval;
        exports.timeMillisecond = millisecond;
        exports.timeMilliseconds = milliseconds;
        exports.utcMillisecond = millisecond;
        exports.utcMilliseconds = milliseconds;
        exports.timeSecond = second;
        exports.timeSeconds = seconds;
        exports.utcSecond = second;
        exports.utcSeconds = seconds;
        exports.timeMinute = minute;
        exports.timeMinutes = minutes;
        exports.timeHour = hour;
        exports.timeHours = hours;
        exports.timeDay = day;
        exports.timeDays = days;
        exports.timeWeek = sunday;
        exports.timeWeeks = sundays;
        exports.timeSunday = sunday;
        exports.timeSundays = sundays;
        exports.timeMonday = monday;
        exports.timeMondays = mondays;
        exports.timeTuesday = tuesday;
        exports.timeTuesdays = tuesdays;
        exports.timeWednesday = wednesday;
        exports.timeWednesdays = wednesdays;
        exports.timeThursday = thursday;
        exports.timeThursdays = thursdays;
        exports.timeFriday = friday;
        exports.timeFridays = fridays;
        exports.timeSaturday = saturday;
        exports.timeSaturdays = saturdays;
        exports.timeMonth = month;
        exports.timeMonths = months;
        exports.timeYear = year;
        exports.timeYears = years;
        exports.utcMinute = utcMinute;
        exports.utcMinutes = utcMinutes;
        exports.utcHour = utcHour;
        exports.utcHours = utcHours;
        exports.utcDay = utcDay;
        exports.utcDays = utcDays;
        exports.utcWeek = utcSunday;
        exports.utcWeeks = utcSundays;
        exports.utcSunday = utcSunday;
        exports.utcSundays = utcSundays;
        exports.utcMonday = utcMonday;
        exports.utcMondays = utcMondays;
        exports.utcTuesday = utcTuesday;
        exports.utcTuesdays = utcTuesdays;
        exports.utcWednesday = utcWednesday;
        exports.utcWednesdays = utcWednesdays;
        exports.utcThursday = utcThursday;
        exports.utcThursdays = utcThursdays;
        exports.utcFriday = utcFriday;
        exports.utcFridays = utcFridays;
        exports.utcSaturday = utcSaturday;
        exports.utcSaturdays = utcSaturdays;
        exports.utcMonth = utcMonth;
        exports.utcMonths = utcMonths;
        exports.utcYear = utcYear;
        exports.utcYears = utcYears;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],65:[function(require,module,exports){
// https://d3js.org/d3-timer/ Version 1.0.7. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var frame = 0;
        var timeout = 0;
        var interval = 0;
        var pokeDelay = 1000;
        var taskHead;
        var taskTail;
        var clockLast = 0;
        var clockNow = 0;
        var clockSkew = 0;
        var clock = typeof performance === "object" && performance.now ? performance : Date;
        var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

        function now() {
            return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
        }

        function clearNow() {
            clockNow = 0;
        }

        function Timer() {
            this._call =
                this._time =
                    this._next = null;
        }

        Timer.prototype = timer.prototype = {
            constructor: Timer,
            restart: function(callback, delay, time) {
                if (typeof callback !== "function") throw new TypeError("callback is not a function");
                time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
                if (!this._next && taskTail !== this) {
                    if (taskTail) taskTail._next = this;
                    else taskHead = this;
                    taskTail = this;
                }
                this._call = callback;
                this._time = time;
                sleep();
            },
            stop: function() {
                if (this._call) {
                    this._call = null;
                    this._time = Infinity;
                    sleep();
                }
            }
        };

        function timer(callback, delay, time) {
            var t = new Timer;
            t.restart(callback, delay, time);
            return t;
        }

        function timerFlush() {
            now(); // Get the current time, if not already set.
            ++frame; // Pretend we’ve set an alarm, if we haven’t already.
            var t = taskHead, e;
            while (t) {
                if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
                t = t._next;
            }
            --frame;
        }

        function wake() {
            clockNow = (clockLast = clock.now()) + clockSkew;
            frame = timeout = 0;
            try {
                timerFlush();
            } finally {
                frame = 0;
                nap();
                clockNow = 0;
            }
        }

        function poke() {
            var now = clock.now(), delay = now - clockLast;
            if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
        }

        function nap() {
            var t0, t1 = taskHead, t2, time = Infinity;
            while (t1) {
                if (t1._call) {
                    if (time > t1._time) time = t1._time;
                    t0 = t1, t1 = t1._next;
                } else {
                    t2 = t1._next, t1._next = null;
                    t1 = t0 ? t0._next = t2 : taskHead = t2;
                }
            }
            taskTail = t0;
            sleep(time);
        }

        function sleep(time) {
            if (frame) return; // Soonest alarm already set, or will be.
            if (timeout) timeout = clearTimeout(timeout);
            var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
            if (delay > 24) {
                if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
                if (interval) interval = clearInterval(interval);
            } else {
                if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
                frame = 1, setFrame(wake);
            }
        }

        var timeout$1 = function(callback, delay, time) {
            var t = new Timer;
            delay = delay == null ? 0 : +delay;
            t.restart(function(elapsed) {
                t.stop();
                callback(elapsed + delay);
            }, delay, time);
            return t;
        };

        var interval$1 = function(callback, delay, time) {
            var t = new Timer, total = delay;
            if (delay == null) return t.restart(callback, delay, time), t;
            delay = +delay, time = time == null ? now() : +time;
            t.restart(function tick(elapsed) {
                elapsed += total;
                t.restart(tick, total += delay, time);
                callback(elapsed);
            }, delay, time);
            return t;
        };

        exports.now = now;
        exports.timer = timer;
        exports.timerFlush = timerFlush;
        exports.timeout = timeout$1;
        exports.interval = interval$1;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],66:[function(require,module,exports){
// https://d3js.org/d3-transition/ Version 1.1.1. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-selection'), require('d3-dispatch'), require('d3-timer'), require('d3-interpolate'), require('d3-color'), require('d3-ease')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-selection', 'd3-dispatch', 'd3-timer', 'd3-interpolate', 'd3-color', 'd3-ease'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));
    }(this, (function (exports,d3Selection,d3Dispatch,d3Timer,d3Interpolate,d3Color,d3Ease) { 'use strict';

        var emptyOn = d3Dispatch.dispatch("start", "end", "interrupt");
        var emptyTween = [];

        var CREATED = 0;
        var SCHEDULED = 1;
        var STARTING = 2;
        var STARTED = 3;
        var RUNNING = 4;
        var ENDING = 5;
        var ENDED = 6;

        var schedule = function(node, name, id, index, group, timing) {
            var schedules = node.__transition;
            if (!schedules) node.__transition = {};
            else if (id in schedules) return;
            create(node, id, {
                name: name,
                index: index, // For context during callback.
                group: group, // For context during callback.
                on: emptyOn,
                tween: emptyTween,
                time: timing.time,
                delay: timing.delay,
                duration: timing.duration,
                ease: timing.ease,
                timer: null,
                state: CREATED
            });
        };

        function init(node, id) {
            var schedule = get(node, id);
            if (schedule.state > CREATED) throw new Error("too late; already scheduled");
            return schedule;
        }

        function set(node, id) {
            var schedule = get(node, id);
            if (schedule.state > STARTING) throw new Error("too late; already started");
            return schedule;
        }

        function get(node, id) {
            var schedule = node.__transition;
            if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
            return schedule;
        }

        function create(node, id, self) {
            var schedules = node.__transition,
                tween;

            // Initialize the self timer when the transition is created.
            // Note the actual delay is not known until the first callback!
            schedules[id] = self;
            self.timer = d3Timer.timer(schedule, 0, self.time);

            function schedule(elapsed) {
                self.state = SCHEDULED;
                self.timer.restart(start, self.delay, self.time);

                // If the elapsed delay is less than our first sleep, start immediately.
                if (self.delay <= elapsed) start(elapsed - self.delay);
            }

            function start(elapsed) {
                var i, j, n, o;

                // If the state is not SCHEDULED, then we previously errored on start.
                if (self.state !== SCHEDULED) return stop();

                for (i in schedules) {
                    o = schedules[i];
                    if (o.name !== self.name) continue;

                    // While this element already has a starting transition during this frame,
                    // defer starting an interrupting transition until that transition has a
                    // chance to tick (and possibly end); see d3/d3-transition#54!
                    if (o.state === STARTED) return d3Timer.timeout(start);

                    // Interrupt the active transition, if any.
                    // Dispatch the interrupt event.
                    if (o.state === RUNNING) {
                        o.state = ENDED;
                        o.timer.stop();
                        o.on.call("interrupt", node, node.__data__, o.index, o.group);
                        delete schedules[i];
                    }

                    // Cancel any pre-empted transitions. No interrupt event is dispatched
                    // because the cancelled transitions never started. Note that this also
                    // removes this transition from the pending list!
                    else if (+i < id) {
                        o.state = ENDED;
                        o.timer.stop();
                        delete schedules[i];
                    }
                }

                // Defer the first tick to end of the current frame; see d3/d3#1576.
                // Note the transition may be canceled after start and before the first tick!
                // Note this must be scheduled before the start event; see d3/d3-transition#16!
                // Assuming this is successful, subsequent callbacks go straight to tick.
                d3Timer.timeout(function() {
                    if (self.state === STARTED) {
                        self.state = RUNNING;
                        self.timer.restart(tick, self.delay, self.time);
                        tick(elapsed);
                    }
                });

                // Dispatch the start event.
                // Note this must be done before the tween are initialized.
                self.state = STARTING;
                self.on.call("start", node, node.__data__, self.index, self.group);
                if (self.state !== STARTING) return; // interrupted
                self.state = STARTED;

                // Initialize the tween, deleting null tween.
                tween = new Array(n = self.tween.length);
                for (i = 0, j = -1; i < n; ++i) {
                    if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
                        tween[++j] = o;
                    }
                }
                tween.length = j + 1;
            }

            function tick(elapsed) {
                var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
                    i = -1,
                    n = tween.length;

                while (++i < n) {
                    tween[i].call(null, t);
                }

                // Dispatch the end event.
                if (self.state === ENDING) {
                    self.on.call("end", node, node.__data__, self.index, self.group);
                    stop();
                }
            }

            function stop() {
                self.state = ENDED;
                self.timer.stop();
                delete schedules[id];
                for (var i in schedules) return; // eslint-disable-line no-unused-vars
                delete node.__transition;
            }
        }

        var interrupt = function(node, name) {
            var schedules = node.__transition,
                schedule,
                active,
                empty = true,
                i;

            if (!schedules) return;

            name = name == null ? null : name + "";

            for (i in schedules) {
                if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
                active = schedule.state > STARTING && schedule.state < ENDING;
                schedule.state = ENDED;
                schedule.timer.stop();
                if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
                delete schedules[i];
            }

            if (empty) delete node.__transition;
        };

        var selection_interrupt = function(name) {
            return this.each(function() {
                interrupt(this, name);
            });
        };

        function tweenRemove(id, name) {
            var tween0, tween1;
            return function() {
                var schedule = set(this, id),
                    tween = schedule.tween;

                // If this node shared tween with the previous node,
                // just assign the updated shared tween and we’re done!
                // Otherwise, copy-on-write.
                if (tween !== tween0) {
                    tween1 = tween0 = tween;
                    for (var i = 0, n = tween1.length; i < n; ++i) {
                        if (tween1[i].name === name) {
                            tween1 = tween1.slice();
                            tween1.splice(i, 1);
                            break;
                        }
                    }
                }

                schedule.tween = tween1;
            };
        }

        function tweenFunction(id, name, value) {
            var tween0, tween1;
            if (typeof value !== "function") throw new Error;
            return function() {
                var schedule = set(this, id),
                    tween = schedule.tween;

                // If this node shared tween with the previous node,
                // just assign the updated shared tween and we’re done!
                // Otherwise, copy-on-write.
                if (tween !== tween0) {
                    tween1 = (tween0 = tween).slice();
                    for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
                        if (tween1[i].name === name) {
                            tween1[i] = t;
                            break;
                        }
                    }
                    if (i === n) tween1.push(t);
                }

                schedule.tween = tween1;
            };
        }

        var transition_tween = function(name, value) {
            var id = this._id;

            name += "";

            if (arguments.length < 2) {
                var tween = get(this.node(), id).tween;
                for (var i = 0, n = tween.length, t; i < n; ++i) {
                    if ((t = tween[i]).name === name) {
                        return t.value;
                    }
                }
                return null;
            }

            return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
        };

        function tweenValue(transition, name, value) {
            var id = transition._id;

            transition.each(function() {
                var schedule = set(this, id);
                (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
            });

            return function(node) {
                return get(node, id).value[name];
            };
        }

        var interpolate = function(a, b) {
            var c;
            return (typeof b === "number" ? d3Interpolate.interpolateNumber
                : b instanceof d3Color.color ? d3Interpolate.interpolateRgb
                    : (c = d3Color.color(b)) ? (b = c, d3Interpolate.interpolateRgb)
                        : d3Interpolate.interpolateString)(a, b);
        };

        function attrRemove(name) {
            return function() {
                this.removeAttribute(name);
            };
        }

        function attrRemoveNS(fullname) {
            return function() {
                this.removeAttributeNS(fullname.space, fullname.local);
            };
        }

        function attrConstant(name, interpolate$$1, value1) {
            var value00,
                interpolate0;
            return function() {
                var value0 = this.getAttribute(name);
                return value0 === value1 ? null
                    : value0 === value00 ? interpolate0
                        : interpolate0 = interpolate$$1(value00 = value0, value1);
            };
        }

        function attrConstantNS(fullname, interpolate$$1, value1) {
            var value00,
                interpolate0;
            return function() {
                var value0 = this.getAttributeNS(fullname.space, fullname.local);
                return value0 === value1 ? null
                    : value0 === value00 ? interpolate0
                        : interpolate0 = interpolate$$1(value00 = value0, value1);
            };
        }

        function attrFunction(name, interpolate$$1, value) {
            var value00,
                value10,
                interpolate0;
            return function() {
                var value0, value1 = value(this);
                if (value1 == null) return void this.removeAttribute(name);
                value0 = this.getAttribute(name);
                return value0 === value1 ? null
                    : value0 === value00 && value1 === value10 ? interpolate0
                        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
            };
        }

        function attrFunctionNS(fullname, interpolate$$1, value) {
            var value00,
                value10,
                interpolate0;
            return function() {
                var value0, value1 = value(this);
                if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
                value0 = this.getAttributeNS(fullname.space, fullname.local);
                return value0 === value1 ? null
                    : value0 === value00 && value1 === value10 ? interpolate0
                        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
            };
        }

        var transition_attr = function(name, value) {
            var fullname = d3Selection.namespace(name), i = fullname === "transform" ? d3Interpolate.interpolateTransformSvg : interpolate;
            return this.attrTween(name, typeof value === "function"
                ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))
                : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
                    : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value + ""));
        };

        function attrTweenNS(fullname, value) {
            function tween() {
                var node = this, i = value.apply(node, arguments);
                return i && function(t) {
                        node.setAttributeNS(fullname.space, fullname.local, i(t));
                    };
            }
            tween._value = value;
            return tween;
        }

        function attrTween(name, value) {
            function tween() {
                var node = this, i = value.apply(node, arguments);
                return i && function(t) {
                        node.setAttribute(name, i(t));
                    };
            }
            tween._value = value;
            return tween;
        }

        var transition_attrTween = function(name, value) {
            var key = "attr." + name;
            if (arguments.length < 2) return (key = this.tween(key)) && key._value;
            if (value == null) return this.tween(key, null);
            if (typeof value !== "function") throw new Error;
            var fullname = d3Selection.namespace(name);
            return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
        };

        function delayFunction(id, value) {
            return function() {
                init(this, id).delay = +value.apply(this, arguments);
            };
        }

        function delayConstant(id, value) {
            return value = +value, function() {
                init(this, id).delay = value;
            };
        }

        var transition_delay = function(value) {
            var id = this._id;

            return arguments.length
                ? this.each((typeof value === "function"
                    ? delayFunction
                    : delayConstant)(id, value))
                : get(this.node(), id).delay;
        };

        function durationFunction(id, value) {
            return function() {
                set(this, id).duration = +value.apply(this, arguments);
            };
        }

        function durationConstant(id, value) {
            return value = +value, function() {
                set(this, id).duration = value;
            };
        }

        var transition_duration = function(value) {
            var id = this._id;

            return arguments.length
                ? this.each((typeof value === "function"
                    ? durationFunction
                    : durationConstant)(id, value))
                : get(this.node(), id).duration;
        };

        function easeConstant(id, value) {
            if (typeof value !== "function") throw new Error;
            return function() {
                set(this, id).ease = value;
            };
        }

        var transition_ease = function(value) {
            var id = this._id;

            return arguments.length
                ? this.each(easeConstant(id, value))
                : get(this.node(), id).ease;
        };

        var transition_filter = function(match) {
            if (typeof match !== "function") match = d3Selection.matcher(match);

            for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
                for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
                    if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                        subgroup.push(node);
                    }
                }
            }

            return new Transition(subgroups, this._parents, this._name, this._id);
        };

        var transition_merge = function(transition) {
            if (transition._id !== this._id) throw new Error;

            for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
                for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
                    if (node = group0[i] || group1[i]) {
                        merge[i] = node;
                    }
                }
            }

            for (; j < m0; ++j) {
                merges[j] = groups0[j];
            }

            return new Transition(merges, this._parents, this._name, this._id);
        };

        function start(name) {
            return (name + "").trim().split(/^|\s+/).every(function(t) {
                var i = t.indexOf(".");
                if (i >= 0) t = t.slice(0, i);
                return !t || t === "start";
            });
        }

        function onFunction(id, name, listener) {
            var on0, on1, sit = start(name) ? init : set;
            return function() {
                var schedule = sit(this, id),
                    on = schedule.on;

                // If this node shared a dispatch with the previous node,
                // just assign the updated shared dispatch and we’re done!
                // Otherwise, copy-on-write.
                if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

                schedule.on = on1;
            };
        }

        var transition_on = function(name, listener) {
            var id = this._id;

            return arguments.length < 2
                ? get(this.node(), id).on.on(name)
                : this.each(onFunction(id, name, listener));
        };

        function removeFunction(id) {
            return function() {
                var parent = this.parentNode;
                for (var i in this.__transition) if (+i !== id) return;
                if (parent) parent.removeChild(this);
            };
        }

        var transition_remove = function() {
            return this.on("end.remove", removeFunction(this._id));
        };

        var transition_select = function(select) {
            var name = this._name,
                id = this._id;

            if (typeof select !== "function") select = d3Selection.selector(select);

            for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
                for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
                    if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                        if ("__data__" in node) subnode.__data__ = node.__data__;
                        subgroup[i] = subnode;
                        schedule(subgroup[i], name, id, i, subgroup, get(node, id));
                    }
                }
            }

            return new Transition(subgroups, this._parents, name, id);
        };

        var transition_selectAll = function(select) {
            var name = this._name,
                id = this._id;

            if (typeof select !== "function") select = d3Selection.selectorAll(select);

            for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
                for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                    if (node = group[i]) {
                        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
                            if (child = children[k]) {
                                schedule(child, name, id, k, children, inherit);
                            }
                        }
                        subgroups.push(children);
                        parents.push(node);
                    }
                }
            }

            return new Transition(subgroups, parents, name, id);
        };

        var Selection = d3Selection.selection.prototype.constructor;

        var transition_selection = function() {
            return new Selection(this._groups, this._parents);
        };

        function styleRemove(name, interpolate$$1) {
            var value00,
                value10,
                interpolate0;
            return function() {
                var value0 = d3Selection.style(this, name),
                    value1 = (this.style.removeProperty(name), d3Selection.style(this, name));
                return value0 === value1 ? null
                    : value0 === value00 && value1 === value10 ? interpolate0
                        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
            };
        }

        function styleRemoveEnd(name) {
            return function() {
                this.style.removeProperty(name);
            };
        }

        function styleConstant(name, interpolate$$1, value1) {
            var value00,
                interpolate0;
            return function() {
                var value0 = d3Selection.style(this, name);
                return value0 === value1 ? null
                    : value0 === value00 ? interpolate0
                        : interpolate0 = interpolate$$1(value00 = value0, value1);
            };
        }

        function styleFunction(name, interpolate$$1, value) {
            var value00,
                value10,
                interpolate0;
            return function() {
                var value0 = d3Selection.style(this, name),
                    value1 = value(this);
                if (value1 == null) value1 = (this.style.removeProperty(name), d3Selection.style(this, name));
                return value0 === value1 ? null
                    : value0 === value00 && value1 === value10 ? interpolate0
                        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
            };
        }

        var transition_style = function(name, value, priority) {
            var i = (name += "") === "transform" ? d3Interpolate.interpolateTransformCss : interpolate;
            return value == null ? this
                .styleTween(name, styleRemove(name, i))
                .on("end.style." + name, styleRemoveEnd(name))
                : this.styleTween(name, typeof value === "function"
                    ? styleFunction(name, i, tweenValue(this, "style." + name, value))
                    : styleConstant(name, i, value + ""), priority);
        };

        function styleTween(name, value, priority) {
            function tween() {
                var node = this, i = value.apply(node, arguments);
                return i && function(t) {
                        node.style.setProperty(name, i(t), priority);
                    };
            }
            tween._value = value;
            return tween;
        }

        var transition_styleTween = function(name, value, priority) {
            var key = "style." + (name += "");
            if (arguments.length < 2) return (key = this.tween(key)) && key._value;
            if (value == null) return this.tween(key, null);
            if (typeof value !== "function") throw new Error;
            return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
        };

        function textConstant(value) {
            return function() {
                this.textContent = value;
            };
        }

        function textFunction(value) {
            return function() {
                var value1 = value(this);
                this.textContent = value1 == null ? "" : value1;
            };
        }

        var transition_text = function(value) {
            return this.tween("text", typeof value === "function"
                ? textFunction(tweenValue(this, "text", value))
                : textConstant(value == null ? "" : value + ""));
        };

        var transition_transition = function() {
            var name = this._name,
                id0 = this._id,
                id1 = newId();

            for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
                for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                    if (node = group[i]) {
                        var inherit = get(node, id0);
                        schedule(node, name, id1, i, group, {
                            time: inherit.time + inherit.delay + inherit.duration,
                            delay: 0,
                            duration: inherit.duration,
                            ease: inherit.ease
                        });
                    }
                }
            }

            return new Transition(groups, this._parents, name, id1);
        };

        var id = 0;

        function Transition(groups, parents, name, id) {
            this._groups = groups;
            this._parents = parents;
            this._name = name;
            this._id = id;
        }

        function transition(name) {
            return d3Selection.selection().transition(name);
        }

        function newId() {
            return ++id;
        }

        var selection_prototype = d3Selection.selection.prototype;

        Transition.prototype = transition.prototype = {
            constructor: Transition,
            select: transition_select,
            selectAll: transition_selectAll,
            filter: transition_filter,
            merge: transition_merge,
            selection: transition_selection,
            transition: transition_transition,
            call: selection_prototype.call,
            nodes: selection_prototype.nodes,
            node: selection_prototype.node,
            size: selection_prototype.size,
            empty: selection_prototype.empty,
            each: selection_prototype.each,
            on: transition_on,
            attr: transition_attr,
            attrTween: transition_attrTween,
            style: transition_style,
            styleTween: transition_styleTween,
            text: transition_text,
            remove: transition_remove,
            tween: transition_tween,
            delay: transition_delay,
            duration: transition_duration,
            ease: transition_ease
        };

        var defaultTiming = {
            time: null, // Set on use.
            delay: 0,
            duration: 250,
            ease: d3Ease.easeCubicInOut
        };

        function inherit(node, id) {
            var timing;
            while (!(timing = node.__transition) || !(timing = timing[id])) {
                if (!(node = node.parentNode)) {
                    return defaultTiming.time = d3Timer.now(), defaultTiming;
                }
            }
            return timing;
        }

        var selection_transition = function(name) {
            var id,
                timing;

            if (name instanceof Transition) {
                id = name._id, name = name._name;
            } else {
                id = newId(), (timing = defaultTiming).time = d3Timer.now(), name = name == null ? null : name + "";
            }

            for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
                for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                    if (node = group[i]) {
                        schedule(node, name, id, i, group, timing || inherit(node, id));
                    }
                }
            }

            return new Transition(groups, this._parents, name, id);
        };

        d3Selection.selection.prototype.interrupt = selection_interrupt;
        d3Selection.selection.prototype.transition = selection_transition;

        var root = [null];

        var active = function(node, name) {
            var schedules = node.__transition,
                schedule,
                i;

            if (schedules) {
                name = name == null ? null : name + "";
                for (i in schedules) {
                    if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
                        return new Transition([[node]], root, name, +i);
                    }
                }
            }

            return null;
        };

        exports.transition = transition;
        exports.active = active;
        exports.interrupt = interrupt;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-color":44,"d3-dispatch":45,"d3-ease":48,"d3-interpolate":53,"d3-selection":61,"d3-timer":65}],67:[function(require,module,exports){
// https://d3js.org/d3-voronoi/ Version 1.1.2. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (factory((global.d3 = global.d3 || {})));
    }(this, (function (exports) { 'use strict';

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        function x(d) {
            return d[0];
        }

        function y(d) {
            return d[1];
        }

        function RedBlackTree() {
            this._ = null; // root node
        }

        function RedBlackNode(node) {
            node.U = // parent node
                node.C = // color - true for red, false for black
                    node.L = // left node
                        node.R = // right node
                            node.P = // previous node
                                node.N = null; // next node
        }

        RedBlackTree.prototype = {
            constructor: RedBlackTree,

            insert: function(after, node) {
                var parent, grandpa, uncle;

                if (after) {
                    node.P = after;
                    node.N = after.N;
                    if (after.N) after.N.P = node;
                    after.N = node;
                    if (after.R) {
                        after = after.R;
                        while (after.L) after = after.L;
                        after.L = node;
                    } else {
                        after.R = node;
                    }
                    parent = after;
                } else if (this._) {
                    after = RedBlackFirst(this._);
                    node.P = null;
                    node.N = after;
                    after.P = after.L = node;
                    parent = after;
                } else {
                    node.P = node.N = null;
                    this._ = node;
                    parent = null;
                }
                node.L = node.R = null;
                node.U = parent;
                node.C = true;

                after = node;
                while (parent && parent.C) {
                    grandpa = parent.U;
                    if (parent === grandpa.L) {
                        uncle = grandpa.R;
                        if (uncle && uncle.C) {
                            parent.C = uncle.C = false;
                            grandpa.C = true;
                            after = grandpa;
                        } else {
                            if (after === parent.R) {
                                RedBlackRotateLeft(this, parent);
                                after = parent;
                                parent = after.U;
                            }
                            parent.C = false;
                            grandpa.C = true;
                            RedBlackRotateRight(this, grandpa);
                        }
                    } else {
                        uncle = grandpa.L;
                        if (uncle && uncle.C) {
                            parent.C = uncle.C = false;
                            grandpa.C = true;
                            after = grandpa;
                        } else {
                            if (after === parent.L) {
                                RedBlackRotateRight(this, parent);
                                after = parent;
                                parent = after.U;
                            }
                            parent.C = false;
                            grandpa.C = true;
                            RedBlackRotateLeft(this, grandpa);
                        }
                    }
                    parent = after.U;
                }
                this._.C = false;
            },

            remove: function(node) {
                if (node.N) node.N.P = node.P;
                if (node.P) node.P.N = node.N;
                node.N = node.P = null;

                var parent = node.U,
                    sibling,
                    left = node.L,
                    right = node.R,
                    next,
                    red;

                if (!left) next = right;
                else if (!right) next = left;
                else next = RedBlackFirst(right);

                if (parent) {
                    if (parent.L === node) parent.L = next;
                    else parent.R = next;
                } else {
                    this._ = next;
                }

                if (left && right) {
                    red = next.C;
                    next.C = node.C;
                    next.L = left;
                    left.U = next;
                    if (next !== right) {
                        parent = next.U;
                        next.U = node.U;
                        node = next.R;
                        parent.L = node;
                        next.R = right;
                        right.U = next;
                    } else {
                        next.U = parent;
                        parent = next;
                        node = next.R;
                    }
                } else {
                    red = node.C;
                    node = next;
                }

                if (node) node.U = parent;
                if (red) return;
                if (node && node.C) { node.C = false; return; }

                do {
                    if (node === this._) break;
                    if (node === parent.L) {
                        sibling = parent.R;
                        if (sibling.C) {
                            sibling.C = false;
                            parent.C = true;
                            RedBlackRotateLeft(this, parent);
                            sibling = parent.R;
                        }
                        if ((sibling.L && sibling.L.C)
                            || (sibling.R && sibling.R.C)) {
                            if (!sibling.R || !sibling.R.C) {
                                sibling.L.C = false;
                                sibling.C = true;
                                RedBlackRotateRight(this, sibling);
                                sibling = parent.R;
                            }
                            sibling.C = parent.C;
                            parent.C = sibling.R.C = false;
                            RedBlackRotateLeft(this, parent);
                            node = this._;
                            break;
                        }
                    } else {
                        sibling = parent.L;
                        if (sibling.C) {
                            sibling.C = false;
                            parent.C = true;
                            RedBlackRotateRight(this, parent);
                            sibling = parent.L;
                        }
                        if ((sibling.L && sibling.L.C)
                            || (sibling.R && sibling.R.C)) {
                            if (!sibling.L || !sibling.L.C) {
                                sibling.R.C = false;
                                sibling.C = true;
                                RedBlackRotateLeft(this, sibling);
                                sibling = parent.L;
                            }
                            sibling.C = parent.C;
                            parent.C = sibling.L.C = false;
                            RedBlackRotateRight(this, parent);
                            node = this._;
                            break;
                        }
                    }
                    sibling.C = true;
                    node = parent;
                    parent = parent.U;
                } while (!node.C);

                if (node) node.C = false;
            }
        };

        function RedBlackRotateLeft(tree, node) {
            var p = node,
                q = node.R,
                parent = p.U;

            if (parent) {
                if (parent.L === p) parent.L = q;
                else parent.R = q;
            } else {
                tree._ = q;
            }

            q.U = parent;
            p.U = q;
            p.R = q.L;
            if (p.R) p.R.U = p;
            q.L = p;
        }

        function RedBlackRotateRight(tree, node) {
            var p = node,
                q = node.L,
                parent = p.U;

            if (parent) {
                if (parent.L === p) parent.L = q;
                else parent.R = q;
            } else {
                tree._ = q;
            }

            q.U = parent;
            p.U = q;
            p.L = q.R;
            if (p.L) p.L.U = p;
            q.R = p;
        }

        function RedBlackFirst(node) {
            while (node.L) node = node.L;
            return node;
        }

        function createEdge(left, right, v0, v1) {
            var edge = [null, null],
                index = edges.push(edge) - 1;
            edge.left = left;
            edge.right = right;
            if (v0) setEdgeEnd(edge, left, right, v0);
            if (v1) setEdgeEnd(edge, right, left, v1);
            cells[left.index].halfedges.push(index);
            cells[right.index].halfedges.push(index);
            return edge;
        }

        function createBorderEdge(left, v0, v1) {
            var edge = [v0, v1];
            edge.left = left;
            return edge;
        }

        function setEdgeEnd(edge, left, right, vertex) {
            if (!edge[0] && !edge[1]) {
                edge[0] = vertex;
                edge.left = left;
                edge.right = right;
            } else if (edge.left === right) {
                edge[1] = vertex;
            } else {
                edge[0] = vertex;
            }
        }

// Liang–Barsky line clipping.
        function clipEdge(edge, x0, y0, x1, y1) {
            var a = edge[0],
                b = edge[1],
                ax = a[0],
                ay = a[1],
                bx = b[0],
                by = b[1],
                t0 = 0,
                t1 = 1,
                dx = bx - ax,
                dy = by - ay,
                r;

            r = x0 - ax;
            if (!dx && r > 0) return;
            r /= dx;
            if (dx < 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            } else if (dx > 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            }

            r = x1 - ax;
            if (!dx && r < 0) return;
            r /= dx;
            if (dx < 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            } else if (dx > 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            }

            r = y0 - ay;
            if (!dy && r > 0) return;
            r /= dy;
            if (dy < 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            } else if (dy > 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            }

            r = y1 - ay;
            if (!dy && r < 0) return;
            r /= dy;
            if (dy < 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
            } else if (dy > 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
            }

            if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

            if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
            if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
            return true;
        }

        function connectEdge(edge, x0, y0, x1, y1) {
            var v1 = edge[1];
            if (v1) return true;

            var v0 = edge[0],
                left = edge.left,
                right = edge.right,
                lx = left[0],
                ly = left[1],
                rx = right[0],
                ry = right[1],
                fx = (lx + rx) / 2,
                fy = (ly + ry) / 2,
                fm,
                fb;

            if (ry === ly) {
                if (fx < x0 || fx >= x1) return;
                if (lx > rx) {
                    if (!v0) v0 = [fx, y0];
                    else if (v0[1] >= y1) return;
                    v1 = [fx, y1];
                } else {
                    if (!v0) v0 = [fx, y1];
                    else if (v0[1] < y0) return;
                    v1 = [fx, y0];
                }
            } else {
                fm = (lx - rx) / (ry - ly);
                fb = fy - fm * fx;
                if (fm < -1 || fm > 1) {
                    if (lx > rx) {
                        if (!v0) v0 = [(y0 - fb) / fm, y0];
                        else if (v0[1] >= y1) return;
                        v1 = [(y1 - fb) / fm, y1];
                    } else {
                        if (!v0) v0 = [(y1 - fb) / fm, y1];
                        else if (v0[1] < y0) return;
                        v1 = [(y0 - fb) / fm, y0];
                    }
                } else {
                    if (ly < ry) {
                        if (!v0) v0 = [x0, fm * x0 + fb];
                        else if (v0[0] >= x1) return;
                        v1 = [x1, fm * x1 + fb];
                    } else {
                        if (!v0) v0 = [x1, fm * x1 + fb];
                        else if (v0[0] < x0) return;
                        v1 = [x0, fm * x0 + fb];
                    }
                }
            }

            edge[0] = v0;
            edge[1] = v1;
            return true;
        }

        function clipEdges(x0, y0, x1, y1) {
            var i = edges.length,
                edge;

            while (i--) {
                if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
                    || !clipEdge(edge, x0, y0, x1, y1)
                    || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon
                    || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {
                    delete edges[i];
                }
            }
        }

        function createCell(site) {
            return cells[site.index] = {
                site: site,
                halfedges: []
            };
        }

        function cellHalfedgeAngle(cell, edge) {
            var site = cell.site,
                va = edge.left,
                vb = edge.right;
            if (site === vb) vb = va, va = site;
            if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
            if (site === va) va = edge[1], vb = edge[0];
            else va = edge[0], vb = edge[1];
            return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
        }

        function cellHalfedgeStart(cell, edge) {
            return edge[+(edge.left !== cell.site)];
        }

        function cellHalfedgeEnd(cell, edge) {
            return edge[+(edge.left === cell.site)];
        }

        function sortCellHalfedges() {
            for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
                if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
                    var index = new Array(m),
                        array = new Array(m);
                    for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
                    index.sort(function(i, j) { return array[j] - array[i]; });
                    for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
                    for (j = 0; j < m; ++j) halfedges[j] = array[j];
                }
            }
        }

        function clipCells(x0, y0, x1, y1) {
            var nCells = cells.length,
                iCell,
                cell,
                site,
                iHalfedge,
                halfedges,
                nHalfedges,
                start,
                startX,
                startY,
                end,
                endX,
                endY,
                cover = true;

            for (iCell = 0; iCell < nCells; ++iCell) {
                if (cell = cells[iCell]) {
                    site = cell.site;
                    halfedges = cell.halfedges;
                    iHalfedge = halfedges.length;

                    // Remove any dangling clipped edges.
                    while (iHalfedge--) {
                        if (!edges[halfedges[iHalfedge]]) {
                            halfedges.splice(iHalfedge, 1);
                        }
                    }

                    // Insert any border edges as necessary.
                    iHalfedge = 0, nHalfedges = halfedges.length;
                    while (iHalfedge < nHalfedges) {
                        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
                        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
                        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {
                            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
                                    Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]
                                        : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]
                                        : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]
                                            : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]
                                                : null)) - 1);
                            ++nHalfedges;
                        }
                    }

                    if (nHalfedges) cover = false;
                }
            }

            // If there weren’t any edges, have the closest site cover the extent.
            // It doesn’t matter which corner of the extent we measure!
            if (cover) {
                var dx, dy, d2, dc = Infinity;

                for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
                    if (cell = cells[iCell]) {
                        site = cell.site;
                        dx = site[0] - x0;
                        dy = site[1] - y0;
                        d2 = dx * dx + dy * dy;
                        if (d2 < dc) dc = d2, cover = cell;
                    }
                }

                if (cover) {
                    var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
                    cover.halfedges.push(
                        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
                        edges.push(createBorderEdge(site, v01, v11)) - 1,
                        edges.push(createBorderEdge(site, v11, v10)) - 1,
                        edges.push(createBorderEdge(site, v10, v00)) - 1
                    );
                }
            }

            // Lastly delete any cells with no edges; these were entirely clipped.
            for (iCell = 0; iCell < nCells; ++iCell) {
                if (cell = cells[iCell]) {
                    if (!cell.halfedges.length) {
                        delete cells[iCell];
                    }
                }
            }
        }

        var circlePool = [];

        var firstCircle;

        function Circle() {
            RedBlackNode(this);
            this.x =
                this.y =
                    this.arc =
                        this.site =
                            this.cy = null;
        }

        function attachCircle(arc) {
            var lArc = arc.P,
                rArc = arc.N;

            if (!lArc || !rArc) return;

            var lSite = lArc.site,
                cSite = arc.site,
                rSite = rArc.site;

            if (lSite === rSite) return;

            var bx = cSite[0],
                by = cSite[1],
                ax = lSite[0] - bx,
                ay = lSite[1] - by,
                cx = rSite[0] - bx,
                cy = rSite[1] - by;

            var d = 2 * (ax * cy - ay * cx);
            if (d >= -epsilon2) return;

            var ha = ax * ax + ay * ay,
                hc = cx * cx + cy * cy,
                x = (cy * ha - ay * hc) / d,
                y = (ax * hc - cx * ha) / d;

            var circle = circlePool.pop() || new Circle;
            circle.arc = arc;
            circle.site = cSite;
            circle.x = x + bx;
            circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

            arc.circle = circle;

            var before = null,
                node = circles._;

            while (node) {
                if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
                    if (node.L) node = node.L;
                    else { before = node.P; break; }
                } else {
                    if (node.R) node = node.R;
                    else { before = node; break; }
                }
            }

            circles.insert(before, circle);
            if (!before) firstCircle = circle;
        }

        function detachCircle(arc) {
            var circle = arc.circle;
            if (circle) {
                if (!circle.P) firstCircle = circle.N;
                circles.remove(circle);
                circlePool.push(circle);
                RedBlackNode(circle);
                arc.circle = null;
            }
        }

        var beachPool = [];

        function Beach() {
            RedBlackNode(this);
            this.edge =
                this.site =
                    this.circle = null;
        }

        function createBeach(site) {
            var beach = beachPool.pop() || new Beach;
            beach.site = site;
            return beach;
        }

        function detachBeach(beach) {
            detachCircle(beach);
            beaches.remove(beach);
            beachPool.push(beach);
            RedBlackNode(beach);
        }

        function removeBeach(beach) {
            var circle = beach.circle,
                x = circle.x,
                y = circle.cy,
                vertex = [x, y],
                previous = beach.P,
                next = beach.N,
                disappearing = [beach];

            detachBeach(beach);

            var lArc = previous;
            while (lArc.circle
            && Math.abs(x - lArc.circle.x) < epsilon
            && Math.abs(y - lArc.circle.cy) < epsilon) {
                previous = lArc.P;
                disappearing.unshift(lArc);
                detachBeach(lArc);
                lArc = previous;
            }

            disappearing.unshift(lArc);
            detachCircle(lArc);

            var rArc = next;
            while (rArc.circle
            && Math.abs(x - rArc.circle.x) < epsilon
            && Math.abs(y - rArc.circle.cy) < epsilon) {
                next = rArc.N;
                disappearing.push(rArc);
                detachBeach(rArc);
                rArc = next;
            }

            disappearing.push(rArc);
            detachCircle(rArc);

            var nArcs = disappearing.length,
                iArc;
            for (iArc = 1; iArc < nArcs; ++iArc) {
                rArc = disappearing[iArc];
                lArc = disappearing[iArc - 1];
                setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
            }

            lArc = disappearing[0];
            rArc = disappearing[nArcs - 1];
            rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

            attachCircle(lArc);
            attachCircle(rArc);
        }

        function addBeach(site) {
            var x = site[0],
                directrix = site[1],
                lArc,
                rArc,
                dxl,
                dxr,
                node = beaches._;

            while (node) {
                dxl = leftBreakPoint(node, directrix) - x;
                if (dxl > epsilon) node = node.L; else {
                    dxr = x - rightBreakPoint(node, directrix);
                    if (dxr > epsilon) {
                        if (!node.R) {
                            lArc = node;
                            break;
                        }
                        node = node.R;
                    } else {
                        if (dxl > -epsilon) {
                            lArc = node.P;
                            rArc = node;
                        } else if (dxr > -epsilon) {
                            lArc = node;
                            rArc = node.N;
                        } else {
                            lArc = rArc = node;
                        }
                        break;
                    }
                }
            }

            createCell(site);
            var newArc = createBeach(site);
            beaches.insert(lArc, newArc);

            if (!lArc && !rArc) return;

            if (lArc === rArc) {
                detachCircle(lArc);
                rArc = createBeach(lArc.site);
                beaches.insert(newArc, rArc);
                newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
                attachCircle(lArc);
                attachCircle(rArc);
                return;
            }

            if (!rArc) { // && lArc
                newArc.edge = createEdge(lArc.site, newArc.site);
                return;
            }

            // else lArc !== rArc
            detachCircle(lArc);
            detachCircle(rArc);

            var lSite = lArc.site,
                ax = lSite[0],
                ay = lSite[1],
                bx = site[0] - ax,
                by = site[1] - ay,
                rSite = rArc.site,
                cx = rSite[0] - ax,
                cy = rSite[1] - ay,
                d = 2 * (bx * cy - by * cx),
                hb = bx * bx + by * by,
                hc = cx * cx + cy * cy,
                vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

            setEdgeEnd(rArc.edge, lSite, rSite, vertex);
            newArc.edge = createEdge(lSite, site, null, vertex);
            rArc.edge = createEdge(site, rSite, null, vertex);
            attachCircle(lArc);
            attachCircle(rArc);
        }

        function leftBreakPoint(arc, directrix) {
            var site = arc.site,
                rfocx = site[0],
                rfocy = site[1],
                pby2 = rfocy - directrix;

            if (!pby2) return rfocx;

            var lArc = arc.P;
            if (!lArc) return -Infinity;

            site = lArc.site;
            var lfocx = site[0],
                lfocy = site[1],
                plby2 = lfocy - directrix;

            if (!plby2) return lfocx;

            var hl = lfocx - rfocx,
                aby2 = 1 / pby2 - 1 / plby2,
                b = hl / plby2;

            if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

            return (rfocx + lfocx) / 2;
        }

        function rightBreakPoint(arc, directrix) {
            var rArc = arc.N;
            if (rArc) return leftBreakPoint(rArc, directrix);
            var site = arc.site;
            return site[1] === directrix ? site[0] : Infinity;
        }

        var epsilon = 1e-6;
        var epsilon2 = 1e-12;
        var beaches;
        var cells;
        var circles;
        var edges;

        function triangleArea(a, b, c) {
            return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
        }

        function lexicographic(a, b) {
            return b[1] - a[1]
                || b[0] - a[0];
        }

        function Diagram(sites, extent) {
            var site = sites.sort(lexicographic).pop(),
                x,
                y,
                circle;

            edges = [];
            cells = new Array(sites.length);
            beaches = new RedBlackTree;
            circles = new RedBlackTree;

            while (true) {
                circle = firstCircle;
                if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
                    if (site[0] !== x || site[1] !== y) {
                        addBeach(site);
                        x = site[0], y = site[1];
                    }
                    site = sites.pop();
                } else if (circle) {
                    removeBeach(circle.arc);
                } else {
                    break;
                }
            }

            sortCellHalfedges();

            if (extent) {
                var x0 = +extent[0][0],
                    y0 = +extent[0][1],
                    x1 = +extent[1][0],
                    y1 = +extent[1][1];
                clipEdges(x0, y0, x1, y1);
                clipCells(x0, y0, x1, y1);
            }

            this.edges = edges;
            this.cells = cells;

            beaches =
                circles =
                    edges =
                        cells = null;
        }

        Diagram.prototype = {
            constructor: Diagram,

            polygons: function() {
                var edges = this.edges;

                return this.cells.map(function(cell) {
                    var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
                    polygon.data = cell.site.data;
                    return polygon;
                });
            },

            triangles: function() {
                var triangles = [],
                    edges = this.edges;

                this.cells.forEach(function(cell, i) {
                    if (!(m = (halfedges = cell.halfedges).length)) return;
                    var site = cell.site,
                        halfedges,
                        j = -1,
                        m,
                        s0,
                        e1 = edges[halfedges[m - 1]],
                        s1 = e1.left === site ? e1.right : e1.left;

                    while (++j < m) {
                        s0 = s1;
                        e1 = edges[halfedges[j]];
                        s1 = e1.left === site ? e1.right : e1.left;
                        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
                            triangles.push([site.data, s0.data, s1.data]);
                        }
                    }
                });

                return triangles;
            },

            links: function() {
                return this.edges.filter(function(edge) {
                    return edge.right;
                }).map(function(edge) {
                    return {
                        source: edge.left.data,
                        target: edge.right.data
                    };
                });
            },

            find: function(x, y, radius) {
                var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;

                // Use the previously-found cell, or start with an arbitrary one.
                while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
                var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;

                // Traverse the half-edges to find a closer cell, if any.
                do {
                    cell = that.cells[i0 = i1], i1 = null;
                    cell.halfedges.forEach(function(e) {
                        var edge = that.edges[e], v = edge.left;
                        if ((v === cell.site || !v) && !(v = edge.right)) return;
                        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
                        if (v2 < d2) d2 = v2, i1 = v.index;
                    });
                } while (i1 !== null);

                that._found = i0;

                return radius == null || d2 <= radius * radius ? cell.site : null;
            }
        };

        var voronoi = function() {
            var x$$1 = x,
                y$$1 = y,
                extent = null;

            function voronoi(data) {
                return new Diagram(data.map(function(d, i) {
                    var s = [Math.round(x$$1(d, i, data) / epsilon) * epsilon, Math.round(y$$1(d, i, data) / epsilon) * epsilon];
                    s.index = i;
                    s.data = d;
                    return s;
                }), extent);
            }

            voronoi.polygons = function(data) {
                return voronoi(data).polygons();
            };

            voronoi.links = function(data) {
                return voronoi(data).links();
            };

            voronoi.triangles = function(data) {
                return voronoi(data).triangles();
            };

            voronoi.x = function(_) {
                return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : x$$1;
            };

            voronoi.y = function(_) {
                return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : y$$1;
            };

            voronoi.extent = function(_) {
                return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
            };

            voronoi.size = function(_) {
                return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
            };

            return voronoi;
        };

        exports.voronoi = voronoi;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{}],68:[function(require,module,exports){
// https://d3js.org/d3-zoom/ Version 1.7.1. Copyright 2017 Mike Bostock.
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-drag'), require('d3-interpolate'), require('d3-selection'), require('d3-transition')) :
            typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) :
                (factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3));
    }(this, (function (exports,d3Dispatch,d3Drag,d3Interpolate,d3Selection,d3Transition) { 'use strict';

        var constant = function(x) {
            return function() {
                return x;
            };
        };

        function ZoomEvent(target, type, transform) {
            this.target = target;
            this.type = type;
            this.transform = transform;
        }

        function Transform(k, x, y) {
            this.k = k;
            this.x = x;
            this.y = y;
        }

        Transform.prototype = {
            constructor: Transform,
            scale: function(k) {
                return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
            },
            translate: function(x, y) {
                return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
            },
            apply: function(point) {
                return [point[0] * this.k + this.x, point[1] * this.k + this.y];
            },
            applyX: function(x) {
                return x * this.k + this.x;
            },
            applyY: function(y) {
                return y * this.k + this.y;
            },
            invert: function(location) {
                return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
            },
            invertX: function(x) {
                return (x - this.x) / this.k;
            },
            invertY: function(y) {
                return (y - this.y) / this.k;
            },
            rescaleX: function(x) {
                return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
            },
            rescaleY: function(y) {
                return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
            },
            toString: function() {
                return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
            }
        };

        var identity = new Transform(1, 0, 0);

        transform.prototype = Transform.prototype;

        function transform(node) {
            return node.__zoom || identity;
        }

        function nopropagation() {
            d3Selection.event.stopImmediatePropagation();
        }

        var noevent = function() {
            d3Selection.event.preventDefault();
            d3Selection.event.stopImmediatePropagation();
        };

// Ignore right-click, since that should open the context menu.
        function defaultFilter() {
            return !d3Selection.event.button;
        }

        function defaultExtent() {
            var e = this, w, h;
            if (e instanceof SVGElement) {
                e = e.ownerSVGElement || e;
                w = e.width.baseVal.value;
                h = e.height.baseVal.value;
            } else {
                w = e.clientWidth;
                h = e.clientHeight;
            }
            return [[0, 0], [w, h]];
        }

        function defaultTransform() {
            return this.__zoom || identity;
        }

        function defaultWheelDelta() {
            return -d3Selection.event.deltaY * (d3Selection.event.deltaMode ? 120 : 1) / 500;
        }

        function defaultTouchable() {
            return "ontouchstart" in this;
        }

        function defaultConstrain(transform$$1, extent, translateExtent) {
            var dx0 = transform$$1.invertX(extent[0][0]) - translateExtent[0][0],
                dx1 = transform$$1.invertX(extent[1][0]) - translateExtent[1][0],
                dy0 = transform$$1.invertY(extent[0][1]) - translateExtent[0][1],
                dy1 = transform$$1.invertY(extent[1][1]) - translateExtent[1][1];
            return transform$$1.translate(
                dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
                dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
            );
        }

        var zoom = function() {
            var filter = defaultFilter,
                extent = defaultExtent,
                constrain = defaultConstrain,
                wheelDelta = defaultWheelDelta,
                touchable = defaultTouchable,
                scaleExtent = [0, Infinity],
                translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
                duration = 250,
                interpolate = d3Interpolate.interpolateZoom,
                gestures = [],
                listeners = d3Dispatch.dispatch("start", "zoom", "end"),
                touchstarting,
                touchending,
                touchDelay = 500,
                wheelDelay = 150,
                clickDistance2 = 0;

            function zoom(selection) {
                selection
                    .property("__zoom", defaultTransform)
                    .on("wheel.zoom", wheeled)
                    .on("mousedown.zoom", mousedowned)
                    .on("dblclick.zoom", dblclicked)
                    .filter(touchable)
                    .on("touchstart.zoom", touchstarted)
                    .on("touchmove.zoom", touchmoved)
                    .on("touchend.zoom touchcancel.zoom", touchended)
                    .style("touch-action", "none")
                    .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
            }

            zoom.transform = function(collection, transform$$1) {
                var selection = collection.selection ? collection.selection() : collection;
                selection.property("__zoom", defaultTransform);
                if (collection !== selection) {
                    schedule(collection, transform$$1);
                } else {
                    selection.interrupt().each(function() {
                        gesture(this, arguments)
                            .start()
                            .zoom(null, typeof transform$$1 === "function" ? transform$$1.apply(this, arguments) : transform$$1)
                            .end();
                    });
                }
            };

            zoom.scaleBy = function(selection, k) {
                zoom.scaleTo(selection, function() {
                    var k0 = this.__zoom.k,
                        k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                    return k0 * k1;
                });
            };

            zoom.scaleTo = function(selection, k) {
                zoom.transform(selection, function() {
                    var e = extent.apply(this, arguments),
                        t0 = this.__zoom,
                        p0 = centroid(e),
                        p1 = t0.invert(p0),
                        k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                    return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
                });
            };

            zoom.translateBy = function(selection, x, y) {
                zoom.transform(selection, function() {
                    return constrain(this.__zoom.translate(
                        typeof x === "function" ? x.apply(this, arguments) : x,
                        typeof y === "function" ? y.apply(this, arguments) : y
                    ), extent.apply(this, arguments), translateExtent);
                });
            };

            zoom.translateTo = function(selection, x, y) {
                zoom.transform(selection, function() {
                    var e = extent.apply(this, arguments),
                        t = this.__zoom,
                        p = centroid(e);
                    return constrain(identity.translate(p[0], p[1]).scale(t.k).translate(
                        typeof x === "function" ? -x.apply(this, arguments) : -x,
                        typeof y === "function" ? -y.apply(this, arguments) : -y
                    ), e, translateExtent);
                });
            };

            function scale(transform$$1, k) {
                k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
                return k === transform$$1.k ? transform$$1 : new Transform(k, transform$$1.x, transform$$1.y);
            }

            function translate(transform$$1, p0, p1) {
                var x = p0[0] - p1[0] * transform$$1.k, y = p0[1] - p1[1] * transform$$1.k;
                return x === transform$$1.x && y === transform$$1.y ? transform$$1 : new Transform(transform$$1.k, x, y);
            }

            function centroid(extent) {
                return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
            }

            function schedule(transition, transform$$1, center) {
                transition
                    .on("start.zoom", function() { gesture(this, arguments).start(); })
                    .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
                    .tween("zoom", function() {
                        var that = this,
                            args = arguments,
                            g = gesture(that, args),
                            e = extent.apply(that, args),
                            p = center || centroid(e),
                            w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
                            a = that.__zoom,
                            b = typeof transform$$1 === "function" ? transform$$1.apply(that, args) : transform$$1,
                            i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
                        return function(t) {
                            if (t === 1) t = b; // Avoid rounding error on end.
                            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
                            g.zoom(null, t);
                        };
                    });
            }

            function gesture(that, args) {
                for (var i = 0, n = gestures.length, g; i < n; ++i) {
                    if ((g = gestures[i]).that === that) {
                        return g;
                    }
                }
                return new Gesture(that, args);
            }

            function Gesture(that, args) {
                this.that = that;
                this.args = args;
                this.index = -1;
                this.active = 0;
                this.extent = extent.apply(that, args);
            }

            Gesture.prototype = {
                start: function() {
                    if (++this.active === 1) {
                        this.index = gestures.push(this) - 1;
                        this.emit("start");
                    }
                    return this;
                },
                zoom: function(key, transform$$1) {
                    if (this.mouse && key !== "mouse") this.mouse[1] = transform$$1.invert(this.mouse[0]);
                    if (this.touch0 && key !== "touch") this.touch0[1] = transform$$1.invert(this.touch0[0]);
                    if (this.touch1 && key !== "touch") this.touch1[1] = transform$$1.invert(this.touch1[0]);
                    this.that.__zoom = transform$$1;
                    this.emit("zoom");
                    return this;
                },
                end: function() {
                    if (--this.active === 0) {
                        gestures.splice(this.index, 1);
                        this.index = -1;
                        this.emit("end");
                    }
                    return this;
                },
                emit: function(type) {
                    d3Selection.customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
                }
            };

            function wheeled() {
                if (!filter.apply(this, arguments)) return;
                var g = gesture(this, arguments),
                    t = this.__zoom,
                    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
                    p = d3Selection.mouse(this);

                // If the mouse is in the same location as before, reuse it.
                // If there were recent wheel events, reset the wheel idle timeout.
                if (g.wheel) {
                    if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
                        g.mouse[1] = t.invert(g.mouse[0] = p);
                    }
                    clearTimeout(g.wheel);
                }

                // If this wheel event won’t trigger a transform change, ignore it.
                else if (t.k === k) return;

                // Otherwise, capture the mouse point and location at the start.
                else {
                    g.mouse = [p, t.invert(p)];
                    d3Transition.interrupt(this);
                    g.start();
                }

                noevent();
                g.wheel = setTimeout(wheelidled, wheelDelay);
                g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

                function wheelidled() {
                    g.wheel = null;
                    g.end();
                }
            }

            function mousedowned() {
                if (touchending || !filter.apply(this, arguments)) return;
                var g = gesture(this, arguments),
                    v = d3Selection.select(d3Selection.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
                    p = d3Selection.mouse(this),
                    x0 = d3Selection.event.clientX,
                    y0 = d3Selection.event.clientY;

                d3Drag.dragDisable(d3Selection.event.view);
                nopropagation();
                g.mouse = [p, this.__zoom.invert(p)];
                d3Transition.interrupt(this);
                g.start();

                function mousemoved() {
                    noevent();
                    if (!g.moved) {
                        var dx = d3Selection.event.clientX - x0, dy = d3Selection.event.clientY - y0;
                        g.moved = dx * dx + dy * dy > clickDistance2;
                    }
                    g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = d3Selection.mouse(g.that), g.mouse[1]), g.extent, translateExtent));
                }

                function mouseupped() {
                    v.on("mousemove.zoom mouseup.zoom", null);
                    d3Drag.dragEnable(d3Selection.event.view, g.moved);
                    noevent();
                    g.end();
                }
            }

            function dblclicked() {
                if (!filter.apply(this, arguments)) return;
                var t0 = this.__zoom,
                    p0 = d3Selection.mouse(this),
                    p1 = t0.invert(p0),
                    k1 = t0.k * (d3Selection.event.shiftKey ? 0.5 : 2),
                    t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);

                noevent();
                if (duration > 0) d3Selection.select(this).transition().duration(duration).call(schedule, t1, p0);
                else d3Selection.select(this).call(zoom.transform, t1);
            }

            function touchstarted() {
                if (!filter.apply(this, arguments)) return;
                var g = gesture(this, arguments),
                    touches = d3Selection.event.changedTouches,
                    started,
                    n = touches.length, i, t, p;

                nopropagation();
                for (i = 0; i < n; ++i) {
                    t = touches[i], p = d3Selection.touch(this, touches, t.identifier);
                    p = [p, this.__zoom.invert(p), t.identifier];
                    if (!g.touch0) g.touch0 = p, started = true;
                    else if (!g.touch1) g.touch1 = p;
                }

                // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
                if (touchstarting) {
                    touchstarting = clearTimeout(touchstarting);
                    if (!g.touch1) {
                        g.end();
                        p = d3Selection.select(this).on("dblclick.zoom");
                        if (p) p.apply(this, arguments);
                        return;
                    }
                }

                if (started) {
                    touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
                    d3Transition.interrupt(this);
                    g.start();
                }
            }

            function touchmoved() {
                var g = gesture(this, arguments),
                    touches = d3Selection.event.changedTouches,
                    n = touches.length, i, t, p, l;

                noevent();
                if (touchstarting) touchstarting = clearTimeout(touchstarting);
                for (i = 0; i < n; ++i) {
                    t = touches[i], p = d3Selection.touch(this, touches, t.identifier);
                    if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
                    else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
                }
                t = g.that.__zoom;
                if (g.touch1) {
                    var p0 = g.touch0[0], l0 = g.touch0[1],
                        p1 = g.touch1[0], l1 = g.touch1[1],
                        dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
                        dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
                    t = scale(t, Math.sqrt(dp / dl));
                    p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
                    l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
                }
                else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
                else return;
                g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
            }

            function touchended() {
                var g = gesture(this, arguments),
                    touches = d3Selection.event.changedTouches,
                    n = touches.length, i, t;

                nopropagation();
                if (touchending) clearTimeout(touchending);
                touchending = setTimeout(function() { touchending = null; }, touchDelay);
                for (i = 0; i < n; ++i) {
                    t = touches[i];
                    if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
                    else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
                }
                if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
                if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
                else g.end();
            }

            zoom.wheelDelta = function(_) {
                return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;
            };

            zoom.filter = function(_) {
                return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;
            };

            zoom.touchable = function(_) {
                return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;
            };

            zoom.extent = function(_) {
                return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
            };

            zoom.scaleExtent = function(_) {
                return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
            };

            zoom.translateExtent = function(_) {
                return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
            };

            zoom.constrain = function(_) {
                return arguments.length ? (constrain = _, zoom) : constrain;
            };

            zoom.duration = function(_) {
                return arguments.length ? (duration = +_, zoom) : duration;
            };

            zoom.interpolate = function(_) {
                return arguments.length ? (interpolate = _, zoom) : interpolate;
            };

            zoom.on = function() {
                var value = listeners.on.apply(listeners, arguments);
                return value === listeners ? zoom : value;
            };

            zoom.clickDistance = function(_) {
                return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
            };

            return zoom;
        };

        exports.zoom = zoom;
        exports.zoomTransform = transform;
        exports.zoomIdentity = identity;

        Object.defineProperty(exports, '__esModule', { value: true });

    })));

},{"d3-dispatch":45,"d3-drag":46,"d3-interpolate":53,"d3-selection":61,"d3-transition":66}],69:[function(require,module,exports){
    'use strict';

    Object.defineProperty(exports, '__esModule', { value: true });

    var d3Array = require('d3-array');
    var d3Axis = require('d3-axis');
    var d3Brush = require('d3-brush');
    var d3Chord = require('d3-chord');
    var d3Collection = require('d3-collection');
    var d3Color = require('d3-color');
    var d3Dispatch = require('d3-dispatch');
    var d3Drag = require('d3-drag');
    var d3Dsv = require('d3-dsv');
    var d3Ease = require('d3-ease');
    var d3Force = require('d3-force');
    var d3Format = require('d3-format');
    var d3Geo = require('d3-geo');
    var d3Hierarchy = require('d3-hierarchy');
    var d3Interpolate = require('d3-interpolate');
    var d3Path = require('d3-path');
    var d3Polygon = require('d3-polygon');
    var d3Quadtree = require('d3-quadtree');
    var d3Queue = require('d3-queue');
    var d3Random = require('d3-random');
    var d3Request = require('d3-request');
    var d3Scale = require('d3-scale');
    var d3Selection = require('d3-selection');
    var d3Shape = require('d3-shape');
    var d3Time = require('d3-time');
    var d3TimeFormat = require('d3-time-format');
    var d3Timer = require('d3-timer');
    var d3Transition = require('d3-transition');
    var d3Voronoi = require('d3-voronoi');
    var d3Zoom = require('d3-zoom');

    var version = "4.12.2";

    exports.version = version;
    Object.keys(d3Array).forEach(function (key) { exports[key] = d3Array[key]; });
    Object.keys(d3Axis).forEach(function (key) { exports[key] = d3Axis[key]; });
    Object.keys(d3Brush).forEach(function (key) { exports[key] = d3Brush[key]; });
    Object.keys(d3Chord).forEach(function (key) { exports[key] = d3Chord[key]; });
    Object.keys(d3Collection).forEach(function (key) { exports[key] = d3Collection[key]; });
    Object.keys(d3Color).forEach(function (key) { exports[key] = d3Color[key]; });
    Object.keys(d3Dispatch).forEach(function (key) { exports[key] = d3Dispatch[key]; });
    Object.keys(d3Drag).forEach(function (key) { exports[key] = d3Drag[key]; });
    Object.keys(d3Dsv).forEach(function (key) { exports[key] = d3Dsv[key]; });
    Object.keys(d3Ease).forEach(function (key) { exports[key] = d3Ease[key]; });
    Object.keys(d3Force).forEach(function (key) { exports[key] = d3Force[key]; });
    Object.keys(d3Format).forEach(function (key) { exports[key] = d3Format[key]; });
    Object.keys(d3Geo).forEach(function (key) { exports[key] = d3Geo[key]; });
    Object.keys(d3Hierarchy).forEach(function (key) { exports[key] = d3Hierarchy[key]; });
    Object.keys(d3Interpolate).forEach(function (key) { exports[key] = d3Interpolate[key]; });
    Object.keys(d3Path).forEach(function (key) { exports[key] = d3Path[key]; });
    Object.keys(d3Polygon).forEach(function (key) { exports[key] = d3Polygon[key]; });
    Object.keys(d3Quadtree).forEach(function (key) { exports[key] = d3Quadtree[key]; });
    Object.keys(d3Queue).forEach(function (key) { exports[key] = d3Queue[key]; });
    Object.keys(d3Random).forEach(function (key) { exports[key] = d3Random[key]; });
    Object.keys(d3Request).forEach(function (key) { exports[key] = d3Request[key]; });
    Object.keys(d3Scale).forEach(function (key) { exports[key] = d3Scale[key]; });
    Object.keys(d3Selection).forEach(function (key) { exports[key] = d3Selection[key]; });
    Object.keys(d3Shape).forEach(function (key) { exports[key] = d3Shape[key]; });
    Object.keys(d3Time).forEach(function (key) { exports[key] = d3Time[key]; });
    Object.keys(d3TimeFormat).forEach(function (key) { exports[key] = d3TimeFormat[key]; });
    Object.keys(d3Timer).forEach(function (key) { exports[key] = d3Timer[key]; });
    Object.keys(d3Transition).forEach(function (key) { exports[key] = d3Transition[key]; });
    Object.keys(d3Voronoi).forEach(function (key) { exports[key] = d3Voronoi[key]; });
    Object.keys(d3Zoom).forEach(function (key) { exports[key] = d3Zoom[key]; });
    Object.defineProperty(exports, "event", {get: function() { return d3Selection.event; }});

},{"d3-array":39,"d3-axis":40,"d3-brush":41,"d3-chord":42,"d3-collection":43,"d3-color":44,"d3-dispatch":45,"d3-drag":46,"d3-dsv":47,"d3-ease":48,"d3-force":49,"d3-format":50,"d3-geo":51,"d3-hierarchy":52,"d3-interpolate":53,"d3-path":54,"d3-polygon":55,"d3-quadtree":56,"d3-queue":57,"d3-random":58,"d3-request":59,"d3-scale":60,"d3-selection":61,"d3-shape":62,"d3-time":64,"d3-time-format":63,"d3-timer":65,"d3-transition":66,"d3-voronoi":67,"d3-zoom":68}],70:[function(require,module,exports){
    /*
     Copyright (c) 2012-2014 Chris Pettitt

     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
     */

    module.exports = {
        graphlib: require("./lib/graphlib"),

        layout: require("./lib/layout"),
        debug: require("./lib/debug"),
        util: {
            time: require("./lib/util").time,
            notime: require("./lib/util").notime
        },
        version: require("./lib/version")
    };

},{"./lib/debug":75,"./lib/graphlib":76,"./lib/layout":78,"./lib/util":98,"./lib/version":99}],71:[function(require,module,exports){
    "use strict";

    var _ = require("./lodash"),
        greedyFAS = require("./greedy-fas");

    module.exports = {
        run: run,
        undo: undo
    };

    function run(g) {
        var fas = (g.graph().acyclicer === "greedy"
            ? greedyFAS(g, weightFn(g))
            : dfsFAS(g));
        _.forEach(fas, function(e) {
            var label = g.edge(e);
            g.removeEdge(e);
            label.forwardName = e.name;
            label.reversed = true;
            g.setEdge(e.w, e.v, label, _.uniqueId("rev"));
        });

        function weightFn(g) {
            return function(e) {
                return g.edge(e).weight;
            };
        }
    }

    function dfsFAS(g) {
        var fas = [],
            stack = {},
            visited = {};

        function dfs(v) {
            if (_.has(visited, v)) {
                return;
            }
            visited[v] = true;
            stack[v] = true;
            _.forEach(g.outEdges(v), function(e) {
                if (_.has(stack, e.w)) {
                    fas.push(e);
                } else {
                    dfs(e.w);
                }
            });
            delete stack[v];
        }

        _.forEach(g.nodes(), dfs);
        return fas;
    }

    function undo(g) {
        _.forEach(g.edges(), function(e) {
            var label = g.edge(e);
            if (label.reversed) {
                g.removeEdge(e);

                var forwardName = label.forwardName;
                delete label.reversed;
                delete label.forwardName;
                g.setEdge(e.w, e.v, label, forwardName);
            }
        });
    }

},{"./greedy-fas":77,"./lodash":79}],72:[function(require,module,exports){
    var _ = require("./lodash"),
        util = require("./util");

    module.exports = addBorderSegments;

    function addBorderSegments(g) {
        function dfs(v) {
            var children = g.children(v),
                node = g.node(v);
            if (children.length) {
                _.forEach(children, dfs);
            }

            if (_.has(node, "minRank")) {
                node.borderLeft = [];
                node.borderRight = [];
                for (var rank = node.minRank, maxRank = node.maxRank + 1;
                     rank < maxRank;
                     ++rank) {
                    addBorderNode(g, "borderLeft", "_bl", v, node, rank);
                    addBorderNode(g, "borderRight", "_br", v, node, rank);
                }
            }
        }

        _.forEach(g.children(), dfs);
    }

    function addBorderNode(g, prop, prefix, sg, sgNode, rank) {
        var label = { width: 0, height: 0, rank: rank, borderType: prop },
            prev = sgNode[prop][rank - 1],
            curr = util.addDummyNode(g, "border", label, prefix);
        sgNode[prop][rank] = curr;
        g.setParent(curr, sg);
        if (prev) {
            g.setEdge(prev, curr, { weight: 1 });
        }
    }

},{"./lodash":79,"./util":98}],73:[function(require,module,exports){
    "use strict";

    var _ = require("./lodash");

    module.exports = {
        adjust: adjust,
        undo: undo
    };

    function adjust(g) {
        var rankDir = g.graph().rankdir.toLowerCase();
        if (rankDir === "lr" || rankDir === "rl") {
            swapWidthHeight(g);
        }
    }

    function undo(g) {
        var rankDir = g.graph().rankdir.toLowerCase();
        if (rankDir === "bt" || rankDir === "rl") {
            reverseY(g);
        }

        if (rankDir === "lr" || rankDir === "rl") {
            swapXY(g);
            swapWidthHeight(g);
        }
    }

    function swapWidthHeight(g) {
        _.forEach(g.nodes(), function(v) { swapWidthHeightOne(g.node(v)); });
        _.forEach(g.edges(), function(e) { swapWidthHeightOne(g.edge(e)); });
    }

    function swapWidthHeightOne(attrs) {
        var w = attrs.width;
        attrs.width = attrs.height;
        attrs.height = w;
    }

    function reverseY(g) {
        _.forEach(g.nodes(), function(v) { reverseYOne(g.node(v)); });

        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e);
            _.forEach(edge.points, reverseYOne);
            if (_.has(edge, "y")) {
                reverseYOne(edge);
            }
        });
    }

    function reverseYOne(attrs) {
        attrs.y = -attrs.y;
    }

    function swapXY(g) {
        _.forEach(g.nodes(), function(v) { swapXYOne(g.node(v)); });

        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e);
            _.forEach(edge.points, swapXYOne);
            if (_.has(edge, "x")) {
                swapXYOne(edge);
            }
        });
    }

    function swapXYOne(attrs) {
        var x = attrs.x;
        attrs.x = attrs.y;
        attrs.y = x;
    }

},{"./lodash":79}],74:[function(require,module,exports){
    /*
     * Simple doubly linked list implementation derived from Cormen, et al.,
     * "Introduction to Algorithms".
     */

    module.exports = List;

    function List() {
        var sentinel = {};
        sentinel._next = sentinel._prev = sentinel;
        this._sentinel = sentinel;
    }

    List.prototype.dequeue = function() {
        var sentinel = this._sentinel,
            entry = sentinel._prev;
        if (entry !== sentinel) {
            unlink(entry);
            return entry;
        }
    };

    List.prototype.enqueue = function(entry) {
        var sentinel = this._sentinel;
        if (entry._prev && entry._next) {
            unlink(entry);
        }
        entry._next = sentinel._next;
        sentinel._next._prev = entry;
        sentinel._next = entry;
        entry._prev = sentinel;
    };

    List.prototype.toString = function() {
        var strs = [],
            sentinel = this._sentinel,
            curr = sentinel._prev;
        while (curr !== sentinel) {
            strs.push(JSON.stringify(curr, filterOutLinks));
            curr = curr._prev;
        }
        return "[" + strs.join(", ") + "]";
    };

    function unlink(entry) {
        entry._prev._next = entry._next;
        entry._next._prev = entry._prev;
        delete entry._next;
        delete entry._prev;
    }

    function filterOutLinks(k, v) {
        if (k !== "_next" && k !== "_prev") {
            return v;
        }
    }

},{}],75:[function(require,module,exports){
    var _ = require("./lodash"),
        util = require("./util"),
        Graph = require("./graphlib").Graph;

    module.exports = {
        debugOrdering: debugOrdering
    };

    /* istanbul ignore next */
    function debugOrdering(g) {
        var layerMatrix = util.buildLayerMatrix(g);

        var h = new Graph({ compound: true, multigraph: true }).setGraph({});

        _.forEach(g.nodes(), function(v) {
            h.setNode(v, { label: v });
            h.setParent(v, "layer" + g.node(v).rank);
        });

        _.forEach(g.edges(), function(e) {
            h.setEdge(e.v, e.w, {}, e.name);
        });

        _.forEach(layerMatrix, function(layer, i) {
            var layerV = "layer" + i;
            h.setNode(layerV, { rank: "same" });
            _.reduce(layer, function(u, v) {
                h.setEdge(u, v, { style: "invis" });
                return v;
            });
        });

        return h;
    }

},{"./graphlib":76,"./lodash":79,"./util":98}],76:[function(require,module,exports){
    /* global window */

    var graphlib;

    if (typeof require === "function") {
        try {
            graphlib = require("graphlib");
        } catch (e) {}
    }

    if (!graphlib) {
        graphlib = window.graphlib;
    }

    module.exports = graphlib;

},{"graphlib":100}],77:[function(require,module,exports){
    var _ = require("./lodash"),
        Graph = require("./graphlib").Graph,
        List = require("./data/list");

    /*
     * A greedy heuristic for finding a feedback arc set for a graph. A feedback
     * arc set is a set of edges that can be removed to make a graph acyclic.
     * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, "A fast and
     * effective heuristic for the feedback arc set problem." This implementation
     * adjusts that from the paper to allow for weighted edges.
     */
    module.exports = greedyFAS;

    var DEFAULT_WEIGHT_FN = _.constant(1);

    function greedyFAS(g, weightFn) {
        if (g.nodeCount() <= 1) {
            return [];
        }
        var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);
        var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);

        // Expand multi-edges
        return _.flatten(_.map(results, function(e) {
            return g.outEdges(e.v, e.w);
        }), true);
    }

    function doGreedyFAS(g, buckets, zeroIdx) {
        var results = [],
            sources = buckets[buckets.length - 1],
            sinks = buckets[0];

        var entry;
        while (g.nodeCount()) {
            while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }
            while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }
            if (g.nodeCount()) {
                for (var i = buckets.length - 2; i > 0; --i) {
                    entry = buckets[i].dequeue();
                    if (entry) {
                        results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));
                        break;
                    }
                }
            }
        }

        return results;
    }

    function removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {
        var results = collectPredecessors ? [] : undefined;

        _.forEach(g.inEdges(entry.v), function(edge) {
            var weight = g.edge(edge),
                uEntry = g.node(edge.v);

            if (collectPredecessors) {
                results.push({ v: edge.v, w: edge.w });
            }

            uEntry.out -= weight;
            assignBucket(buckets, zeroIdx, uEntry);
        });

        _.forEach(g.outEdges(entry.v), function(edge) {
            var weight = g.edge(edge),
                w = edge.w,
                wEntry = g.node(w);
            wEntry["in"] -= weight;
            assignBucket(buckets, zeroIdx, wEntry);
        });

        g.removeNode(entry.v);

        return results;
    }

    function buildState(g, weightFn) {
        var fasGraph = new Graph(),
            maxIn = 0,
            maxOut = 0;

        _.forEach(g.nodes(), function(v) {
            fasGraph.setNode(v, { v: v, "in": 0, out: 0 });
        });

        // Aggregate weights on nodes, but also sum the weights across multi-edges
        // into a single edge for the fasGraph.
        _.forEach(g.edges(), function(e) {
            var prevWeight = fasGraph.edge(e.v, e.w) || 0,
                weight = weightFn(e),
                edgeWeight = prevWeight + weight;
            fasGraph.setEdge(e.v, e.w, edgeWeight);
            maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);
            maxIn  = Math.max(maxIn,  fasGraph.node(e.w)["in"]  += weight);
        });

        var buckets = _.range(maxOut + maxIn + 3).map(function() { return new List(); });
        var zeroIdx = maxIn + 1;

        _.forEach(fasGraph.nodes(), function(v) {
            assignBucket(buckets, zeroIdx, fasGraph.node(v));
        });

        return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };
    }

    function assignBucket(buckets, zeroIdx, entry) {
        if (!entry.out) {
            buckets[0].enqueue(entry);
        } else if (!entry["in"]) {
            buckets[buckets.length - 1].enqueue(entry);
        } else {
            buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
        }
    }

},{"./data/list":74,"./graphlib":76,"./lodash":79}],78:[function(require,module,exports){
    "use strict";

    var _ = require("./lodash"),
        acyclic = require("./acyclic"),
        normalize = require("./normalize"),
        rank = require("./rank"),
        normalizeRanks = require("./util").normalizeRanks,
        parentDummyChains = require("./parent-dummy-chains"),
        removeEmptyRanks = require("./util").removeEmptyRanks,
        nestingGraph = require("./nesting-graph"),
        addBorderSegments = require("./add-border-segments"),
        coordinateSystem = require("./coordinate-system"),
        order = require("./order"),
        position = require("./position"),
        util = require("./util"),
        Graph = require("./graphlib").Graph;

    module.exports = layout;

    function layout(g, opts) {
        var time = opts && opts.debugTiming ? util.time : util.notime;
        time("layout", function() {
            var layoutGraph = time("  buildLayoutGraph",
                function() { return buildLayoutGraph(g); });
            time("  runLayout",        function() { runLayout(layoutGraph, time); });
            time("  updateInputGraph", function() { updateInputGraph(g, layoutGraph); });
        });
    }

    function runLayout(g, time) {
        time("    makeSpaceForEdgeLabels", function() { makeSpaceForEdgeLabels(g); });
        time("    removeSelfEdges",        function() { removeSelfEdges(g); });
        time("    acyclic",                function() { acyclic.run(g); });
        time("    nestingGraph.run",       function() { nestingGraph.run(g); });
        time("    rank",                   function() { rank(util.asNonCompoundGraph(g)); });
        time("    injectEdgeLabelProxies", function() { injectEdgeLabelProxies(g); });
        time("    removeEmptyRanks",       function() { removeEmptyRanks(g); });
        time("    nestingGraph.cleanup",   function() { nestingGraph.cleanup(g); });
        time("    normalizeRanks",         function() { normalizeRanks(g); });
        time("    assignRankMinMax",       function() { assignRankMinMax(g); });
        time("    removeEdgeLabelProxies", function() { removeEdgeLabelProxies(g); });
        time("    normalize.run",          function() { normalize.run(g); });
        time("    parentDummyChains",      function() { parentDummyChains(g); });
        time("    addBorderSegments",      function() { addBorderSegments(g); });
        time("    order",                  function() { order(g); });
        time("    insertSelfEdges",        function() { insertSelfEdges(g); });
        time("    adjustCoordinateSystem", function() { coordinateSystem.adjust(g); });
        time("    position",               function() { position(g); });
        time("    positionSelfEdges",      function() { positionSelfEdges(g); });
        time("    removeBorderNodes",      function() { removeBorderNodes(g); });
        time("    normalize.undo",         function() { normalize.undo(g); });
        time("    fixupEdgeLabelCoords",   function() { fixupEdgeLabelCoords(g); });
        time("    undoCoordinateSystem",   function() { coordinateSystem.undo(g); });
        time("    translateGraph",         function() { translateGraph(g); });
        time("    assignNodeIntersects",   function() { assignNodeIntersects(g); });
        time("    reversePoints",          function() { reversePointsForReversedEdges(g); });
        time("    acyclic.undo",           function() { acyclic.undo(g); });
    }

    /*
     * Copies final layout information from the layout graph back to the input
     * graph. This process only copies whitelisted attributes from the layout graph
     * to the input graph, so it serves as a good place to determine what
     * attributes can influence layout.
     */
    function updateInputGraph(inputGraph, layoutGraph) {
        _.forEach(inputGraph.nodes(), function(v) {
            var inputLabel = inputGraph.node(v),
                layoutLabel = layoutGraph.node(v);

            if (inputLabel) {
                inputLabel.x = layoutLabel.x;
                inputLabel.y = layoutLabel.y;

                if (layoutGraph.children(v).length) {
                    inputLabel.width = layoutLabel.width;
                    inputLabel.height = layoutLabel.height;
                }
            }
        });

        _.forEach(inputGraph.edges(), function(e) {
            var inputLabel = inputGraph.edge(e),
                layoutLabel = layoutGraph.edge(e);

            inputLabel.points = layoutLabel.points;
            if (_.has(layoutLabel, "x")) {
                inputLabel.x = layoutLabel.x;
                inputLabel.y = layoutLabel.y;
            }
        });

        inputGraph.graph().width = layoutGraph.graph().width;
        inputGraph.graph().height = layoutGraph.graph().height;
    }

    var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"],
        graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb" },
        graphAttrs = ["acyclicer", "ranker", "rankdir", "align"],
        nodeNumAttrs = ["width", "height"],
        nodeDefaults = { width: 0, height: 0 },
        edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"],
        edgeDefaults = {
            minlen: 1, weight: 1, width: 0, height: 0,
            labeloffset: 10, labelpos: "r"
        },
        edgeAttrs = ["labelpos"];

    /*
     * Constructs a new graph from the input graph, which can be used for layout.
     * This process copies only whitelisted attributes from the input graph to the
     * layout graph. Thus this function serves as a good place to determine what
     * attributes can influence layout.
     */
    function buildLayoutGraph(inputGraph) {
        var g = new Graph({ multigraph: true, compound: true }),
            graph = canonicalize(inputGraph.graph());

        g.setGraph(_.merge({},
            graphDefaults,
            selectNumberAttrs(graph, graphNumAttrs),
            _.pick(graph, graphAttrs)));

        _.forEach(inputGraph.nodes(), function(v) {
            var node = canonicalize(inputGraph.node(v));
            g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
            g.setParent(v, inputGraph.parent(v));
        });

        _.forEach(inputGraph.edges(), function(e) {
            var edge = canonicalize(inputGraph.edge(e));
            g.setEdge(e, _.merge({},
                edgeDefaults,
                selectNumberAttrs(edge, edgeNumAttrs),
                _.pick(edge, edgeAttrs)));
        });

        return g;
    }

    /*
     * This idea comes from the Gansner paper: to account for edge labels in our
     * layout we split each rank in half by doubling minlen and halving ranksep.
     * Then we can place labels at these mid-points between nodes.
     *
     * We also add some minimal padding to the width to push the label for the edge
     * away from the edge itself a bit.
     */
    function makeSpaceForEdgeLabels(g) {
        var graph = g.graph();
        graph.ranksep /= 2;
        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e);
            edge.minlen *= 2;
            if (edge.labelpos.toLowerCase() !== "c") {
                if (graph.rankdir === "TB" || graph.rankdir === "BT") {
                    edge.width += edge.labeloffset;
                } else {
                    edge.height += edge.labeloffset;
                }
            }
        });
    }

    /*
     * Creates temporary dummy nodes that capture the rank in which each edge's
     * label is going to, if it has one of non-zero width and height. We do this
     * so that we can safely remove empty ranks while preserving balance for the
     * label's position.
     */
    function injectEdgeLabelProxies(g) {
        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e);
            if (edge.width && edge.height) {
                var v = g.node(e.v),
                    w = g.node(e.w),
                    label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };
                util.addDummyNode(g, "edge-proxy", label, "_ep");
            }
        });
    }

    function assignRankMinMax(g) {
        var maxRank = 0;
        _.forEach(g.nodes(), function(v) {
            var node = g.node(v);
            if (node.borderTop) {
                node.minRank = g.node(node.borderTop).rank;
                node.maxRank = g.node(node.borderBottom).rank;
                maxRank = _.max(maxRank, node.maxRank);
            }
        });
        g.graph().maxRank = maxRank;
    }

    function removeEdgeLabelProxies(g) {
        _.forEach(g.nodes(), function(v) {
            var node = g.node(v);
            if (node.dummy === "edge-proxy") {
                g.edge(node.e).labelRank = node.rank;
                g.removeNode(v);
            }
        });
    }

    function translateGraph(g) {
        var minX = Number.POSITIVE_INFINITY,
            maxX = 0,
            minY = Number.POSITIVE_INFINITY,
            maxY = 0,
            graphLabel = g.graph(),
            marginX = graphLabel.marginx || 0,
            marginY = graphLabel.marginy || 0;

        function getExtremes(attrs) {
            var x = attrs.x,
                y = attrs.y,
                w = attrs.width,
                h = attrs.height;
            minX = Math.min(minX, x - w / 2);
            maxX = Math.max(maxX, x + w / 2);
            minY = Math.min(minY, y - h / 2);
            maxY = Math.max(maxY, y + h / 2);
        }

        _.forEach(g.nodes(), function(v) { getExtremes(g.node(v)); });
        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e);
            if (_.has(edge, "x")) {
                getExtremes(edge);
            }
        });

        minX -= marginX;
        minY -= marginY;

        _.forEach(g.nodes(), function(v) {
            var node = g.node(v);
            node.x -= minX;
            node.y -= minY;
        });

        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e);
            _.forEach(edge.points, function(p) {
                p.x -= minX;
                p.y -= minY;
            });
            if (_.has(edge, "x")) { edge.x -= minX; }
            if (_.has(edge, "y")) { edge.y -= minY; }
        });

        graphLabel.width = maxX - minX + marginX;
        graphLabel.height = maxY - minY + marginY;
    }

    function assignNodeIntersects(g) {
        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e),
                nodeV = g.node(e.v),
                nodeW = g.node(e.w),
                p1, p2;
            if (!edge.points) {
                edge.points = [];
                p1 = nodeW;
                p2 = nodeV;
            } else {
                p1 = edge.points[0];
                p2 = edge.points[edge.points.length - 1];
            }
            edge.points.unshift(util.intersectRect(nodeV, p1));
            edge.points.push(util.intersectRect(nodeW, p2));
        });
    }

    function fixupEdgeLabelCoords(g) {
        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e);
            if (_.has(edge, "x")) {
                if (edge.labelpos === "l" || edge.labelpos === "r") {
                    edge.width -= edge.labeloffset;
                }
                switch (edge.labelpos) {
                    case "l": edge.x -= edge.width / 2 + edge.labeloffset; break;
                    case "r": edge.x += edge.width / 2 + edge.labeloffset; break;
                }
            }
        });
    }

    function reversePointsForReversedEdges(g) {
        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e);
            if (edge.reversed) {
                edge.points.reverse();
            }
        });
    }

    function removeBorderNodes(g) {
        _.forEach(g.nodes(), function(v) {
            if (g.children(v).length) {
                var node = g.node(v),
                    t = g.node(node.borderTop),
                    b = g.node(node.borderBottom),
                    l = g.node(_.last(node.borderLeft)),
                    r = g.node(_.last(node.borderRight));

                node.width = Math.abs(r.x - l.x);
                node.height = Math.abs(b.y - t.y);
                node.x = l.x + node.width / 2;
                node.y = t.y + node.height / 2;
            }
        });

        _.forEach(g.nodes(), function(v) {
            if (g.node(v).dummy === "border") {
                g.removeNode(v);
            }
        });
    }

    function removeSelfEdges(g) {
        _.forEach(g.edges(), function(e) {
            if (e.v === e.w) {
                var node = g.node(e.v);
                if (!node.selfEdges) {
                    node.selfEdges = [];
                }
                node.selfEdges.push({ e: e, label: g.edge(e) });
                g.removeEdge(e);
            }
        });
    }

    function insertSelfEdges(g) {
        var layers = util.buildLayerMatrix(g);
        _.forEach(layers, function(layer) {
            var orderShift = 0;
            _.forEach(layer, function(v, i) {
                var node = g.node(v);
                node.order = i + orderShift;
                _.forEach(node.selfEdges, function(selfEdge) {
                    util.addDummyNode(g, "selfedge", {
                        width: selfEdge.label.width,
                        height: selfEdge.label.height,
                        rank: node.rank,
                        order: i + (++orderShift),
                        e: selfEdge.e,
                        label: selfEdge.label
                    }, "_se");
                });
                delete node.selfEdges;
            });
        });
    }

    function positionSelfEdges(g) {
        _.forEach(g.nodes(), function(v) {
            var node = g.node(v);
            if (node.dummy === "selfedge") {
                var selfNode = g.node(node.e.v),
                    x = selfNode.x + selfNode.width / 2,
                    y = selfNode.y,
                    dx = node.x - x,
                    dy = selfNode.height / 2;
                g.setEdge(node.e, node.label);
                g.removeNode(v);
                node.label.points = [
                    { x: x + 2 * dx / 3, y: y - dy },
                    { x: x + 5 * dx / 6, y: y - dy },
                    { x: x +     dx    , y: y },
                    { x: x + 5 * dx / 6, y: y + dy },
                    { x: x + 2 * dx / 3, y: y + dy }
                ];
                node.label.x = node.x;
                node.label.y = node.y;
            }
        });
    }

    function selectNumberAttrs(obj, attrs) {
        return _.mapValues(_.pick(obj, attrs), Number);
    }

    function canonicalize(attrs) {
        var newAttrs = {};
        _.forEach(attrs, function(v, k) {
            newAttrs[k.toLowerCase()] = v;
        });
        return newAttrs;
    }

},{"./acyclic":71,"./add-border-segments":72,"./coordinate-system":73,"./graphlib":76,"./lodash":79,"./nesting-graph":80,"./normalize":81,"./order":86,"./parent-dummy-chains":91,"./position":93,"./rank":95,"./util":98}],79:[function(require,module,exports){
    /* global window */

    var lodash;

    if (typeof require === "function") {
        try {
            lodash = require("lodash");
        } catch (e) {}
    }

    if (!lodash) {
        lodash = window._;
    }

    module.exports = lodash;

},{"lodash":123}],80:[function(require,module,exports){
    var _ = require("./lodash"),
        util = require("./util");

    module.exports = {
        run: run,
        cleanup: cleanup
    };

    /*
     * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,
     * adds appropriate edges to ensure that all cluster nodes are placed between
     * these boundries, and ensures that the graph is connected.
     *
     * In addition we ensure, through the use of the minlen property, that nodes
     * and subgraph border nodes to not end up on the same rank.
     *
     * Preconditions:
     *
     *    1. Input graph is a DAG
     *    2. Nodes in the input graph has a minlen attribute
     *
     * Postconditions:
     *
     *    1. Input graph is connected.
     *    2. Dummy nodes are added for the tops and bottoms of subgraphs.
     *    3. The minlen attribute for nodes is adjusted to ensure nodes do not
     *       get placed on the same rank as subgraph border nodes.
     *
     * The nesting graph idea comes from Sander, "Layout of Compound Directed
     * Graphs."
     */
    function run(g) {
        var root = util.addDummyNode(g, "root", {}, "_root");
        var depths = treeDepths(g);
        var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array
        var nodeSep = 2 * height + 1;

        g.graph().nestingRoot = root;

        // Multiply minlen by nodeSep to align nodes on non-border ranks.
        _.forEach(g.edges(), function(e) { g.edge(e).minlen *= nodeSep; });

        // Calculate a weight that is sufficient to keep subgraphs vertically compact
        var weight = sumWeights(g) + 1;

        // Create border nodes and link them up
        _.forEach(g.children(), function(child) {
            dfs(g, root, nodeSep, weight, height, depths, child);
        });

        // Save the multiplier for node layers for later removal of empty border
        // layers.
        g.graph().nodeRankFactor = nodeSep;
    }

    function dfs(g, root, nodeSep, weight, height, depths, v) {
        var children = g.children(v);
        if (!children.length) {
            if (v !== root) {
                g.setEdge(root, v, { weight: 0, minlen: nodeSep });
            }
            return;
        }

        var top = util.addBorderNode(g, "_bt"),
            bottom = util.addBorderNode(g, "_bb"),
            label = g.node(v);

        g.setParent(top, v);
        label.borderTop = top;
        g.setParent(bottom, v);
        label.borderBottom = bottom;

        _.forEach(children, function(child) {
            dfs(g, root, nodeSep, weight, height, depths, child);

            var childNode = g.node(child),
                childTop = childNode.borderTop ? childNode.borderTop : child,
                childBottom = childNode.borderBottom ? childNode.borderBottom : child,
                thisWeight = childNode.borderTop ? weight : 2 * weight,
                minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;

            g.setEdge(top, childTop, {
                weight: thisWeight,
                minlen: minlen,
                nestingEdge: true
            });

            g.setEdge(childBottom, bottom, {
                weight: thisWeight,
                minlen: minlen,
                nestingEdge: true
            });
        });

        if (!g.parent(v)) {
            g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });
        }
    }

    function treeDepths(g) {
        var depths = {};
        function dfs(v, depth) {
            var children = g.children(v);
            if (children && children.length) {
                _.forEach(children, function(child) {
                    dfs(child, depth + 1);
                });
            }
            depths[v] = depth;
        }
        _.forEach(g.children(), function(v) { dfs(v, 1); });
        return depths;
    }

    function sumWeights(g) {
        return _.reduce(g.edges(), function(acc, e) {
            return acc + g.edge(e).weight;
        }, 0);
    }

    function cleanup(g) {
        var graphLabel = g.graph();
        g.removeNode(graphLabel.nestingRoot);
        delete graphLabel.nestingRoot;
        _.forEach(g.edges(), function(e) {
            var edge = g.edge(e);
            if (edge.nestingEdge) {
                g.removeEdge(e);
            }
        });
    }

},{"./lodash":79,"./util":98}],81:[function(require,module,exports){
    "use strict";

    var _ = require("./lodash"),
        util = require("./util");

    module.exports = {
        run: run,
        undo: undo
    };

    /*
     * Breaks any long edges in the graph into short segments that span 1 layer
     * each. This operation is undoable with the denormalize function.
     *
     * Pre-conditions:
     *
     *    1. The input graph is a DAG.
     *    2. Each node in the graph has a "rank" property.
     *
     * Post-condition:
     *
     *    1. All edges in the graph have a length of 1.
     *    2. Dummy nodes are added where edges have been split into segments.
     *    3. The graph is augmented with a "dummyChains" attribute which contains
     *       the first dummy in each chain of dummy nodes produced.
     */
    function run(g) {
        g.graph().dummyChains = [];
        _.forEach(g.edges(), function(edge) { normalizeEdge(g, edge); });
    }

    function normalizeEdge(g, e) {
        var v = e.v,
            vRank = g.node(v).rank,
            w = e.w,
            wRank = g.node(w).rank,
            name = e.name,
            edgeLabel = g.edge(e),
            labelRank = edgeLabel.labelRank;

        if (wRank === vRank + 1) return;

        g.removeEdge(e);

        var dummy, attrs, i;
        for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {
            edgeLabel.points = [];
            attrs = {
                width: 0, height: 0,
                edgeLabel: edgeLabel, edgeObj: e,
                rank: vRank
            };
            dummy = util.addDummyNode(g, "edge", attrs, "_d");
            if (vRank === labelRank) {
                attrs.width = edgeLabel.width;
                attrs.height = edgeLabel.height;
                attrs.dummy = "edge-label";
                attrs.labelpos = edgeLabel.labelpos;
            }
            g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);
            if (i === 0) {
                g.graph().dummyChains.push(dummy);
            }
            v = dummy;
        }

        g.setEdge(v, w, { weight: edgeLabel.weight }, name);
    }

    function undo(g) {
        _.forEach(g.graph().dummyChains, function(v) {
            var node = g.node(v),
                origLabel = node.edgeLabel,
                w;
            g.setEdge(node.edgeObj, origLabel);
            while (node.dummy) {
                w = g.successors(v)[0];
                g.removeNode(v);
                origLabel.points.push({ x: node.x, y: node.y });
                if (node.dummy === "edge-label") {
                    origLabel.x = node.x;
                    origLabel.y = node.y;
                    origLabel.width = node.width;
                    origLabel.height = node.height;
                }
                v = w;
                node = g.node(v);
            }
        });
    }

},{"./lodash":79,"./util":98}],82:[function(require,module,exports){
    var _ = require("../lodash");

    module.exports = addSubgraphConstraints;

    function addSubgraphConstraints(g, cg, vs) {
        var prev = {},
            rootPrev;

        _.forEach(vs, function(v) {
            var child = g.parent(v),
                parent,
                prevChild;
            while (child) {
                parent = g.parent(child);
                if (parent) {
                    prevChild = prev[parent];
                    prev[parent] = child;
                } else {
                    prevChild = rootPrev;
                    rootPrev = child;
                }
                if (prevChild && prevChild !== child) {
                    cg.setEdge(prevChild, child);
                    return;
                }
                child = parent;
            }
        });

        /*
         function dfs(v) {
         var children = v ? g.children(v) : g.children();
         if (children.length) {
         var min = Number.POSITIVE_INFINITY,
         subgraphs = [];
         _.each(children, function(child) {
         var childMin = dfs(child);
         if (g.children(child).length) {
         subgraphs.push({ v: child, order: childMin });
         }
         min = Math.min(min, childMin);
         });
         _.reduce(_.sortBy(subgraphs, "order"), function(prev, curr) {
         cg.setEdge(prev.v, curr.v);
         return curr;
         });
         return min;
         }
         return g.node(v).order;
         }
         dfs(undefined);
         */
    }

},{"../lodash":79}],83:[function(require,module,exports){
    var _ = require("../lodash");

    module.exports = barycenter;

    function barycenter(g, movable) {
        return _.map(movable, function(v) {
            var inV = g.inEdges(v);
            if (!inV.length) {
                return { v: v };
            } else {
                var result = _.reduce(inV, function(acc, e) {
                    var edge = g.edge(e),
                        nodeU = g.node(e.v);
                    return {
                        sum: acc.sum + (edge.weight * nodeU.order),
                        weight: acc.weight + edge.weight
                    };
                }, { sum: 0, weight: 0 });

                return {
                    v: v,
                    barycenter: result.sum / result.weight,
                    weight: result.weight
                };
            }
        });
    }


},{"../lodash":79}],84:[function(require,module,exports){
    var _ = require("../lodash"),
        Graph = require("../graphlib").Graph;

    module.exports = buildLayerGraph;

    /*
     * Constructs a graph that can be used to sort a layer of nodes. The graph will
     * contain all base and subgraph nodes from the request layer in their original
     * hierarchy and any edges that are incident on these nodes and are of the type
     * requested by the "relationship" parameter.
     *
     * Nodes from the requested rank that do not have parents are assigned a root
     * node in the output graph, which is set in the root graph attribute. This
     * makes it easy to walk the hierarchy of movable nodes during ordering.
     *
     * Pre-conditions:
     *
     *    1. Input graph is a DAG
     *    2. Base nodes in the input graph have a rank attribute
     *    3. Subgraph nodes in the input graph has minRank and maxRank attributes
     *    4. Edges have an assigned weight
     *
     * Post-conditions:
     *
     *    1. Output graph has all nodes in the movable rank with preserved
     *       hierarchy.
     *    2. Root nodes in the movable layer are made children of the node
     *       indicated by the root attribute of the graph.
     *    3. Non-movable nodes incident on movable nodes, selected by the
     *       relationship parameter, are included in the graph (without hierarchy).
     *    4. Edges incident on movable nodes, selected by the relationship
     *       parameter, are added to the output graph.
     *    5. The weights for copied edges are aggregated as need, since the output
     *       graph is not a multi-graph.
     */
    function buildLayerGraph(g, rank, relationship) {
        var root = createRootNode(g),
            result = new Graph({ compound: true }).setGraph({ root: root })
                .setDefaultNodeLabel(function(v) { return g.node(v); });

        _.forEach(g.nodes(), function(v) {
            var node = g.node(v),
                parent = g.parent(v);

            if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
                result.setNode(v);
                result.setParent(v, parent || root);

                // This assumes we have only short edges!
                _.forEach(g[relationship](v), function(e) {
                    var u = e.v === v ? e.w : e.v,
                        edge = result.edge(u, v),
                        weight = !_.isUndefined(edge) ? edge.weight : 0;
                    result.setEdge(u, v, { weight: g.edge(e).weight + weight });
                });

                if (_.has(node, "minRank")) {
                    result.setNode(v, {
                        borderLeft: node.borderLeft[rank],
                        borderRight: node.borderRight[rank]
                    });
                }
            }
        });

        return result;
    }

    function createRootNode(g) {
        var v;
        while (g.hasNode((v = _.uniqueId("_root"))));
        return v;
    }

},{"../graphlib":76,"../lodash":79}],85:[function(require,module,exports){
    "use strict";

    var _ = require("../lodash");

    module.exports = crossCount;

    /*
     * A function that takes a layering (an array of layers, each with an array of
     * ordererd nodes) and a graph and returns a weighted crossing count.
     *
     * Pre-conditions:
     *
     *    1. Input graph must be simple (not a multigraph), directed, and include
     *       only simple edges.
     *    2. Edges in the input graph must have assigned weights.
     *
     * Post-conditions:
     *
     *    1. The graph and layering matrix are left unchanged.
     *
     * This algorithm is derived from Barth, et al., "Bilayer Cross Counting."
     */
    function crossCount(g, layering) {
        var cc = 0;
        for (var i = 1; i < layering.length; ++i) {
            cc += twoLayerCrossCount(g, layering[i-1], layering[i]);
        }
        return cc;
    }

    function twoLayerCrossCount(g, northLayer, southLayer) {
        // Sort all of the edges between the north and south layers by their position
        // in the north layer and then the south. Map these edges to the position of
        // their head in the south layer.
        var southPos = _.zipObject(southLayer,
            _.map(southLayer, function (v, i) { return i; }));
        var southEntries = _.flatten(_.map(northLayer, function(v) {
            return _.chain(g.outEdges(v))
                .map(function(e) {
                    return { pos: southPos[e.w], weight: g.edge(e).weight };
                })
                .sortBy("pos")
                .value();
        }), true);

        // Build the accumulator tree
        var firstIndex = 1;
        while (firstIndex < southLayer.length) firstIndex <<= 1;
        var treeSize = 2 * firstIndex - 1;
        firstIndex -= 1;
        var tree = _.map(new Array(treeSize), function() { return 0; });

        // Calculate the weighted crossings
        var cc = 0;
        _.forEach(southEntries.forEach(function(entry) {
            var index = entry.pos + firstIndex;
            tree[index] += entry.weight;
            var weightSum = 0;
            while (index > 0) {
                if (index % 2) {
                    weightSum += tree[index + 1];
                }
                index = (index - 1) >> 1;
                tree[index] += entry.weight;
            }
            cc += entry.weight * weightSum;
        }));

        return cc;
    }

},{"../lodash":79}],86:[function(require,module,exports){
    "use strict";

    var _ = require("../lodash"),
        initOrder = require("./init-order"),
        crossCount = require("./cross-count"),
        sortSubgraph = require("./sort-subgraph"),
        buildLayerGraph = require("./build-layer-graph"),
        addSubgraphConstraints = require("./add-subgraph-constraints"),
        Graph = require("../graphlib").Graph,
        util = require("../util");

    module.exports = order;

    /*
     * Applies heuristics to minimize edge crossings in the graph and sets the best
     * order solution as an order attribute on each node.
     *
     * Pre-conditions:
     *
     *    1. Graph must be DAG
     *    2. Graph nodes must be objects with a "rank" attribute
     *    3. Graph edges must have the "weight" attribute
     *
     * Post-conditions:
     *
     *    1. Graph nodes will have an "order" attribute based on the results of the
     *       algorithm.
     */
    function order(g) {
        var maxRank = util.maxRank(g),
            downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), "inEdges"),
            upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), "outEdges");

        var layering = initOrder(g);
        assignOrder(g, layering);

        var bestCC = Number.POSITIVE_INFINITY,
            best;

        for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {
            sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);

            layering = util.buildLayerMatrix(g);
            var cc = crossCount(g, layering);
            if (cc < bestCC) {
                lastBest = 0;
                best = _.cloneDeep(layering);
                bestCC = cc;
            }
        }

        assignOrder(g, best);
    }

    function buildLayerGraphs(g, ranks, relationship) {
        return _.map(ranks, function(rank) {
            return buildLayerGraph(g, rank, relationship);
        });
    }

    function sweepLayerGraphs(layerGraphs, biasRight) {
        var cg = new Graph();
        _.forEach(layerGraphs, function(lg) {
            var root = lg.graph().root;
            var sorted = sortSubgraph(lg, root, cg, biasRight);
            _.forEach(sorted.vs, function(v, i) {
                lg.node(v).order = i;
            });
            addSubgraphConstraints(lg, cg, sorted.vs);
        });
    }

    function assignOrder(g, layering) {
        _.forEach(layering, function(layer) {
            _.forEach(layer, function(v, i) {
                g.node(v).order = i;
            });
        });
    }

},{"../graphlib":76,"../lodash":79,"../util":98,"./add-subgraph-constraints":82,"./build-layer-graph":84,"./cross-count":85,"./init-order":87,"./sort-subgraph":89}],87:[function(require,module,exports){
    "use strict";

    var _ = require("../lodash");

    module.exports = initOrder;

    /*
     * Assigns an initial order value for each node by performing a DFS search
     * starting from nodes in the first rank. Nodes are assigned an order in their
     * rank as they are first visited.
     *
     * This approach comes from Gansner, et al., "A Technique for Drawing Directed
     * Graphs."
     *
     * Returns a layering matrix with an array per layer and each layer sorted by
     * the order of its nodes.
     */
    function initOrder(g) {
        var visited = {},
            simpleNodes = _.filter(g.nodes(), function(v) {
                return !g.children(v).length;
            }),
            maxRank = _.max(_.map(simpleNodes, function(v) { return g.node(v).rank; })),
            layers = _.map(_.range(maxRank + 1), function() { return []; });

        function dfs(v) {
            if (_.has(visited, v)) return;
            visited[v] = true;
            var node = g.node(v);
            layers[node.rank].push(v);
            _.forEach(g.successors(v), dfs);
        }

        var orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v).rank; });
        _.forEach(orderedVs, dfs);

        return layers;
    }

},{"../lodash":79}],88:[function(require,module,exports){
    "use strict";

    var _ = require("../lodash");

    module.exports = resolveConflicts;

    /*
     * Given a list of entries of the form {v, barycenter, weight} and a
     * constraint graph this function will resolve any conflicts between the
     * constraint graph and the barycenters for the entries. If the barycenters for
     * an entry would violate a constraint in the constraint graph then we coalesce
     * the nodes in the conflict into a new node that respects the contraint and
     * aggregates barycenter and weight information.
     *
     * This implementation is based on the description in Forster, "A Fast and
     * Simple Hueristic for Constrained Two-Level Crossing Reduction," thought it
     * differs in some specific details.
     *
     * Pre-conditions:
     *
     *    1. Each entry has the form {v, barycenter, weight}, or if the node has
     *       no barycenter, then {v}.
     *
     * Returns:
     *
     *    A new list of entries of the form {vs, i, barycenter, weight}. The list
     *    `vs` may either be a singleton or it may be an aggregation of nodes
     *    ordered such that they do not violate constraints from the constraint
     *    graph. The property `i` is the lowest original index of any of the
     *    elements in `vs`.
     */
    function resolveConflicts(entries, cg) {
        var mappedEntries = {};
        _.forEach(entries, function(entry, i) {
            var tmp = mappedEntries[entry.v] = {
                indegree: 0,
                "in": [],
                out: [],
                vs: [entry.v],
                i: i
            };
            if (!_.isUndefined(entry.barycenter)) {
                tmp.barycenter = entry.barycenter;
                tmp.weight = entry.weight;
            }
        });

        _.forEach(cg.edges(), function(e) {
            var entryV = mappedEntries[e.v],
                entryW = mappedEntries[e.w];
            if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {
                entryW.indegree++;
                entryV.out.push(mappedEntries[e.w]);
            }
        });

        var sourceSet = _.filter(mappedEntries, function(entry) {
            return !entry.indegree;
        });

        return doResolveConflicts(sourceSet);
    }

    function doResolveConflicts(sourceSet) {
        var entries = [];

        function handleIn(vEntry) {
            return function(uEntry) {
                if (uEntry.merged) {
                    return;
                }
                if (_.isUndefined(uEntry.barycenter) ||
                    _.isUndefined(vEntry.barycenter) ||
                    uEntry.barycenter >= vEntry.barycenter) {
                    mergeEntries(vEntry, uEntry);
                }
            };
        }

        function handleOut(vEntry) {
            return function(wEntry) {
                wEntry["in"].push(vEntry);
                if (--wEntry.indegree === 0) {
                    sourceSet.push(wEntry);
                }
            };
        }

        while (sourceSet.length) {
            var entry = sourceSet.pop();
            entries.push(entry);
            _.forEach(entry["in"].reverse(), handleIn(entry));
            _.forEach(entry.out, handleOut(entry));
        }

        return _.chain(entries)
            .filter(function(entry) { return !entry.merged; })
            .map(function(entry) {
                return _.pick(entry, ["vs", "i", "barycenter", "weight"]);
            })
            .value();
    }

    function mergeEntries(target, source) {
        var sum = 0,
            weight = 0;

        if (target.weight) {
            sum += target.barycenter * target.weight;
            weight += target.weight;
        }

        if (source.weight) {
            sum += source.barycenter * source.weight;
            weight += source.weight;
        }

        target.vs = source.vs.concat(target.vs);
        target.barycenter = sum / weight;
        target.weight = weight;
        target.i = Math.min(source.i, target.i);
        source.merged = true;
    }

},{"../lodash":79}],89:[function(require,module,exports){
    var _ = require("../lodash"),
        barycenter = require("./barycenter"),
        resolveConflicts = require("./resolve-conflicts"),
        sort = require("./sort");

    module.exports = sortSubgraph;

    function sortSubgraph(g, v, cg, biasRight) {
        var movable = g.children(v),
            node = g.node(v),
            bl = node ? node.borderLeft : undefined,
            br = node ? node.borderRight: undefined,
            subgraphs = {};

        if (bl) {
            movable = _.filter(movable, function(w) {
                return w !== bl && w !== br;
            });
        }

        var barycenters = barycenter(g, movable);
        _.forEach(barycenters, function(entry) {
            if (g.children(entry.v).length) {
                var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);
                subgraphs[entry.v] = subgraphResult;
                if (_.has(subgraphResult, "barycenter")) {
                    mergeBarycenters(entry, subgraphResult);
                }
            }
        });

        var entries = resolveConflicts(barycenters, cg);
        expandSubgraphs(entries, subgraphs);

        var result = sort(entries, biasRight);

        if (bl) {
            result.vs = _.flatten([bl, result.vs, br], true);
            if (g.predecessors(bl).length) {
                var blPred = g.node(g.predecessors(bl)[0]),
                    brPred = g.node(g.predecessors(br)[0]);
                if (!_.has(result, "barycenter")) {
                    result.barycenter = 0;
                    result.weight = 0;
                }
                result.barycenter = (result.barycenter * result.weight +
                    blPred.order + brPred.order) / (result.weight + 2);
                result.weight += 2;
            }
        }

        return result;
    }

    function expandSubgraphs(entries, subgraphs) {
        _.forEach(entries, function(entry) {
            entry.vs = _.flatten(entry.vs.map(function(v) {
                if (subgraphs[v]) {
                    return subgraphs[v].vs;
                }
                return v;
            }), true);
        });
    }

    function mergeBarycenters(target, other) {
        if (!_.isUndefined(target.barycenter)) {
            target.barycenter = (target.barycenter * target.weight +
                other.barycenter * other.weight) /
                (target.weight + other.weight);
            target.weight += other.weight;
        } else {
            target.barycenter = other.barycenter;
            target.weight = other.weight;
        }
    }

},{"../lodash":79,"./barycenter":83,"./resolve-conflicts":88,"./sort":90}],90:[function(require,module,exports){
    var _ = require("../lodash"),
        util = require("../util");

    module.exports = sort;

    function sort(entries, biasRight) {
        var parts = util.partition(entries, function(entry) {
            return _.has(entry, "barycenter");
        });
        var sortable = parts.lhs,
            unsortable = _.sortBy(parts.rhs, function(entry) { return -entry.i; }),
            vs = [],
            sum = 0,
            weight = 0,
            vsIndex = 0;

        sortable.sort(compareWithBias(!!biasRight));

        vsIndex = consumeUnsortable(vs, unsortable, vsIndex);

        _.forEach(sortable, function (entry) {
            vsIndex += entry.vs.length;
            vs.push(entry.vs);
            sum += entry.barycenter * entry.weight;
            weight += entry.weight;
            vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
        });

        var result = { vs: _.flatten(vs, true) };
        if (weight) {
            result.barycenter = sum / weight;
            result.weight = weight;
        }
        return result;
    }

    function consumeUnsortable(vs, unsortable, index) {
        var last;
        while (unsortable.length && (last = _.last(unsortable)).i <= index) {
            unsortable.pop();
            vs.push(last.vs);
            index++;
        }
        return index;
    }

    function compareWithBias(bias) {
        return function(entryV, entryW) {
            if (entryV.barycenter < entryW.barycenter) {
                return -1;
            } else if (entryV.barycenter > entryW.barycenter) {
                return 1;
            }

            return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
        };
    }

},{"../lodash":79,"../util":98}],91:[function(require,module,exports){
    var _ = require("./lodash");

    module.exports = parentDummyChains;

    function parentDummyChains(g) {
        var postorderNums = postorder(g);

        _.forEach(g.graph().dummyChains, function(v) {
            var node = g.node(v),
                edgeObj = node.edgeObj,
                pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w),
                path = pathData.path,
                lca = pathData.lca,
                pathIdx = 0,
                pathV = path[pathIdx],
                ascending = true;

            while (v !== edgeObj.w) {
                node = g.node(v);

                if (ascending) {
                    while ((pathV = path[pathIdx]) !== lca &&
                    g.node(pathV).maxRank < node.rank) {
                        pathIdx++;
                    }

                    if (pathV === lca) {
                        ascending = false;
                    }
                }

                if (!ascending) {
                    while (pathIdx < path.length - 1 &&
                    g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
                        pathIdx++;
                    }
                    pathV = path[pathIdx];
                }

                g.setParent(v, pathV);
                v = g.successors(v)[0];
            }
        });
    }

// Find a path from v to w through the lowest common ancestor (LCA). Return the
// full path and the LCA.
    function findPath(g, postorderNums, v, w) {
        var vPath = [],
            wPath = [],
            low = Math.min(postorderNums[v].low, postorderNums[w].low),
            lim = Math.max(postorderNums[v].lim, postorderNums[w].lim),
            parent,
            lca;

        // Traverse up from v to find the LCA
        parent = v;
        do {
            parent = g.parent(parent);
            vPath.push(parent);
        } while (parent &&
        (postorderNums[parent].low > low || lim > postorderNums[parent].lim));
        lca = parent;

        // Traverse from w to LCA
        parent = w;
        while ((parent = g.parent(parent)) !== lca) {
            wPath.push(parent);
        }

        return { path: vPath.concat(wPath.reverse()), lca: lca };
    }

    function postorder(g) {
        var result = {},
            lim = 0;

        function dfs(v) {
            var low = lim;
            _.forEach(g.children(v), dfs);
            result[v] = { low: low, lim: lim++ };
        }
        _.forEach(g.children(), dfs);

        return result;
    }

},{"./lodash":79}],92:[function(require,module,exports){
    "use strict";

    var _ = require("../lodash"),
        Graph = require("../graphlib").Graph,
        util = require("../util");

    /*
     * This module provides coordinate assignment based on Brandes and Köpf, "Fast
     * and Simple Horizontal Coordinate Assignment."
     */

    module.exports = {
        positionX: positionX,
        findType1Conflicts: findType1Conflicts,
        findType2Conflicts: findType2Conflicts,
        addConflict: addConflict,
        hasConflict: hasConflict,
        verticalAlignment: verticalAlignment,
        horizontalCompaction: horizontalCompaction,
        alignCoordinates: alignCoordinates,
        findSmallestWidthAlignment: findSmallestWidthAlignment,
        balance: balance
    };

    /*
     * Marks all edges in the graph with a type-1 conflict with the "type1Conflict"
     * property. A type-1 conflict is one where a non-inner segment crosses an
     * inner segment. An inner segment is an edge with both incident nodes marked
     * with the "dummy" property.
     *
     * This algorithm scans layer by layer, starting with the second, for type-1
     * conflicts between the current layer and the previous layer. For each layer
     * it scans the nodes from left to right until it reaches one that is incident
     * on an inner segment. It then scans predecessors to determine if they have
     * edges that cross that inner segment. At the end a final scan is done for all
     * nodes on the current rank to see if they cross the last visited inner
     * segment.
     *
     * This algorithm (safely) assumes that a dummy node will only be incident on a
     * single node in the layers being scanned.
     */
    function findType1Conflicts(g, layering) {
        var conflicts = {};

        function visitLayer(prevLayer, layer) {
            var
                // last visited node in the previous layer that is incident on an inner
                // segment.
                k0 = 0,
                // Tracks the last node in this layer scanned for crossings with a type-1
                // segment.
                scanPos = 0,
                prevLayerLength = prevLayer.length,
                lastNode = _.last(layer);

            _.forEach(layer, function(v, i) {
                var w = findOtherInnerSegmentNode(g, v),
                    k1 = w ? g.node(w).order : prevLayerLength;

                if (w || v === lastNode) {
                    _.forEach(layer.slice(scanPos, i +1), function(scanNode) {
                        _.forEach(g.predecessors(scanNode), function(u) {
                            var uLabel = g.node(u),
                                uPos = uLabel.order;
                            if ((uPos < k0 || k1 < uPos) &&
                                !(uLabel.dummy && g.node(scanNode).dummy)) {
                                addConflict(conflicts, u, scanNode);
                            }
                        });
                    });
                    scanPos = i + 1;
                    k0 = k1;
                }
            });

            return layer;
        }

        _.reduce(layering, visitLayer);
        return conflicts;
    }

    function findType2Conflicts(g, layering) {
        var conflicts = {};

        function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
            var v;
            _.forEach(_.range(southPos, southEnd), function(i) {
                v = south[i];
                if (g.node(v).dummy) {
                    _.forEach(g.predecessors(v), function(u) {
                        var uNode = g.node(u);
                        if (uNode.dummy &&
                            (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
                            addConflict(conflicts, u, v);
                        }
                    });
                }
            });
        }


        function visitLayer(north, south) {
            var prevNorthPos = -1,
                nextNorthPos,
                southPos = 0;

            _.forEach(south, function(v, southLookahead) {
                if (g.node(v).dummy === "border") {
                    var predecessors = g.predecessors(v);
                    if (predecessors.length) {
                        nextNorthPos = g.node(predecessors[0]).order;
                        scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
                        southPos = southLookahead;
                        prevNorthPos = nextNorthPos;
                    }
                }
                scan(south, southPos, south.length, nextNorthPos, north.length);
            });

            return south;
        }

        _.reduce(layering, visitLayer);
        return conflicts;
    }

    function findOtherInnerSegmentNode(g, v) {
        if (g.node(v).dummy) {
            return _.find(g.predecessors(v), function(u) {
                return g.node(u).dummy;
            });
        }
    }

    function addConflict(conflicts, v, w) {
        if (v > w) {
            var tmp = v;
            v = w;
            w = tmp;
        }

        var conflictsV = conflicts[v];
        if (!conflictsV) {
            conflicts[v] = conflictsV = {};
        }
        conflictsV[w] = true;
    }

    function hasConflict(conflicts, v, w) {
        if (v > w) {
            var tmp = v;
            v = w;
            w = tmp;
        }
        return _.has(conflicts[v], w);
    }

    /*
     * Try to align nodes into vertical "blocks" where possible. This algorithm
     * attempts to align a node with one of its median neighbors. If the edge
     * connecting a neighbor is a type-1 conflict then we ignore that possibility.
     * If a previous node has already formed a block with a node after the node
     * we're trying to form a block with, we also ignore that possibility - our
     * blocks would be split in that scenario.
     */
    function verticalAlignment(g, layering, conflicts, neighborFn) {
        var root = {},
            align = {},
            pos = {};

        // We cache the position here based on the layering because the graph and
        // layering may be out of sync. The layering matrix is manipulated to
        // generate different extreme alignments.
        _.forEach(layering, function(layer) {
            _.forEach(layer, function(v, order) {
                root[v] = v;
                align[v] = v;
                pos[v] = order;
            });
        });

        _.forEach(layering, function(layer) {
            var prevIdx = -1;
            _.forEach(layer, function(v) {
                var ws = neighborFn(v);
                if (ws.length) {
                    ws = _.sortBy(ws, function(w) { return pos[w]; });
                    var mp = (ws.length - 1) / 2;
                    for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {
                        var w = ws[i];
                        if (align[v] === v &&
                            prevIdx < pos[w] &&
                            !hasConflict(conflicts, v, w)) {
                            align[w] = v;
                            align[v] = root[v] = root[w];
                            prevIdx = pos[w];
                        }
                    }
                }
            });
        });

        return { root: root, align: align };
    }

    function horizontalCompaction(g, layering, root, align, reverseSep) {
        // This portion of the algorithm differs from BK due to a number of problems.
        // Instead of their algorithm we construct a new block graph and do two
        // sweeps. The first sweep places blocks with the smallest possible
        // coordinates. The second sweep removes unused space by moving blocks to the
        // greatest coordinates without violating separation.
        var xs = {},
            blockG = buildBlockGraph(g, layering, root, reverseSep);

        // First pass, assign smallest coordinates via DFS
        var visited = {};
        function pass1(v) {
            if (!_.has(visited, v)) {
                visited[v] = true;
                xs[v] = _.reduce(blockG.inEdges(v), function(max, e) {
                    pass1(e.v);
                    return Math.max(max, xs[e.v] + blockG.edge(e));
                }, 0);
            }
        }
        _.forEach(blockG.nodes(), pass1);

        var borderType = reverseSep ? "borderLeft" : "borderRight";
        function pass2(v) {
            if (visited[v] !== 2) {
                visited[v]++;
                var node = g.node(v);
                var min = _.reduce(blockG.outEdges(v), function(min, e) {
                    pass2(e.w);
                    return Math.min(min, xs[e.w] - blockG.edge(e));
                }, Number.POSITIVE_INFINITY);
                if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
                    xs[v] = Math.max(xs[v], min);
                }
            }
        }
        _.forEach(blockG.nodes(), pass2);

        // Assign x coordinates to all nodes
        _.forEach(align, function(v) {
            xs[v] = xs[root[v]];
        });

        return xs;
    }


    function buildBlockGraph(g, layering, root, reverseSep) {
        var blockGraph = new Graph(),
            graphLabel = g.graph(),
            sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);

        _.forEach(layering, function(layer) {
            var u;
            _.forEach(layer, function(v) {
                var vRoot = root[v];
                blockGraph.setNode(vRoot);
                if (u) {
                    var uRoot = root[u],
                        prevMax = blockGraph.edge(uRoot, vRoot);
                    blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));
                }
                u = v;
            });
        });

        return blockGraph;
    }

    /*
     * Returns the alignment that has the smallest width of the given alignments.
     */
    function findSmallestWidthAlignment(g, xss) {
        return _.minBy(_.values(xss), function (xs) {
            var max = Number.NEGATIVE_INFINITY;
            var min = Number.POSITIVE_INFINITY;

            _.forIn(xs, function (x, v) {
                var halfWidth = width(g, v) / 2;

                max = Math.max(x + halfWidth, max);
                min = Math.min(x - halfWidth, min);
            });

            return max - min;
        });
    }

    /*
     * Align the coordinates of each of the layout alignments such that
     * left-biased alignments have their minimum coordinate at the same point as
     * the minimum coordinate of the smallest width alignment and right-biased
     * alignments have their maximum coordinate at the same point as the maximum
     * coordinate of the smallest width alignment.
     */
    function alignCoordinates(xss, alignTo) {
        var alignToVals = _.values(alignTo),
            alignToMin = _.min(alignToVals),
            alignToMax = _.max(alignToVals);

        _.forEach(["u", "d"], function(vert) {
            _.forEach(["l", "r"], function(horiz) {
                var alignment = vert + horiz,
                    xs = xss[alignment],
                    delta;
                if (xs === alignTo) return;

                var xsVals = _.values(xs);
                delta = horiz === "l" ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);

                if (delta) {
                    xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });
                }
            });
        });
    }

    function balance(xss, align) {
        return _.mapValues(xss.ul, function(ignore, v) {
            if (align) {
                return xss[align.toLowerCase()][v];
            } else {
                var xs = _.sortBy(_.map(xss, v));
                return (xs[1] + xs[2]) / 2;
            }
        });
    }

    function positionX(g) {
        var layering = util.buildLayerMatrix(g),
            conflicts = _.merge(findType1Conflicts(g, layering),
                findType2Conflicts(g, layering));

        var xss = {},
            adjustedLayering;
        _.forEach(["u", "d"], function(vert) {
            adjustedLayering = vert === "u" ? layering : _.values(layering).reverse();
            _.forEach(["l", "r"], function(horiz) {
                if (horiz === "r") {
                    adjustedLayering = _.map(adjustedLayering, function(inner) {
                        return _.values(inner).reverse();
                    });
                }

                var neighborFn = _.bind(vert === "u" ? g.predecessors : g.successors, g);
                var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);
                var xs = horizontalCompaction(g, adjustedLayering,
                    align.root, align.align,
                    horiz === "r");
                if (horiz === "r") {
                    xs = _.mapValues(xs, function(x) { return -x; });
                }
                xss[vert + horiz] = xs;
            });
        });

        var smallestWidth = findSmallestWidthAlignment(g, xss);
        alignCoordinates(xss, smallestWidth);
        return balance(xss, g.graph().align);
    }

    function sep(nodeSep, edgeSep, reverseSep) {
        return function(g, v, w) {
            var vLabel = g.node(v),
                wLabel = g.node(w),
                sum = 0,
                delta;

            sum += vLabel.width / 2;
            if (_.has(vLabel, "labelpos")) {
                switch (vLabel.labelpos.toLowerCase()) {
                    case "l": delta = -vLabel.width / 2; break;
                    case "r": delta = vLabel.width / 2; break;
                }
            }
            if (delta) {
                sum += reverseSep ? delta : -delta;
            }
            delta = 0;

            sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
            sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;

            sum += wLabel.width / 2;
            if (_.has(wLabel, "labelpos")) {
                switch (wLabel.labelpos.toLowerCase()) {
                    case "l": delta = wLabel.width / 2; break;
                    case "r": delta = -wLabel.width / 2; break;
                }
            }
            if (delta) {
                sum += reverseSep ? delta : -delta;
            }
            delta = 0;

            return sum;
        };
    }

    function width(g, v) {
        return g.node(v).width;
    }

},{"../graphlib":76,"../lodash":79,"../util":98}],93:[function(require,module,exports){
    "use strict";

    var _ = require("../lodash"),
        util = require("../util"),
        positionX = require("./bk").positionX;

    module.exports = position;

    function position(g) {
        g = util.asNonCompoundGraph(g);

        positionY(g);
        _.forEach(positionX(g), function(x, v) {
            g.node(v).x = x;
        });
    }

    function positionY(g) {
        var layering = util.buildLayerMatrix(g),
            rankSep = g.graph().ranksep,
            prevY = 0;
        _.forEach(layering, function(layer) {
            var maxHeight = _.max(_.map(layer, function(v) { return g.node(v).height; }));
            _.forEach(layer, function(v) {
                g.node(v).y = prevY + maxHeight / 2;
            });
            prevY += maxHeight + rankSep;
        });
    }


},{"../lodash":79,"../util":98,"./bk":92}],94:[function(require,module,exports){
    "use strict";

    var _ = require("../lodash"),
        Graph = require("../graphlib").Graph,
        slack = require("./util").slack;

    module.exports = feasibleTree;

    /*
     * Constructs a spanning tree with tight edges and adjusted the input node's
     * ranks to achieve this. A tight edge is one that is has a length that matches
     * its "minlen" attribute.
     *
     * The basic structure for this function is derived from Gansner, et al., "A
     * Technique for Drawing Directed Graphs."
     *
     * Pre-conditions:
     *
     *    1. Graph must be a DAG.
     *    2. Graph must be connected.
     *    3. Graph must have at least one node.
     *    5. Graph nodes must have been previously assigned a "rank" property that
     *       respects the "minlen" property of incident edges.
     *    6. Graph edges must have a "minlen" property.
     *
     * Post-conditions:
     *
     *    - Graph nodes will have their rank adjusted to ensure that all edges are
     *      tight.
     *
     * Returns a tree (undirected graph) that is constructed using only "tight"
     * edges.
     */
    function feasibleTree(g) {
        var t = new Graph({ directed: false });

        // Choose arbitrary node from which to start our tree
        var start = g.nodes()[0],
            size = g.nodeCount();
        t.setNode(start, {});

        var edge, delta;
        while (tightTree(t, g) < size) {
            edge = findMinSlackEdge(t, g);
            delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);
            shiftRanks(t, g, delta);
        }

        return t;
    }

    /*
     * Finds a maximal tree of tight edges and returns the number of nodes in the
     * tree.
     */
    function tightTree(t, g) {
        function dfs(v) {
            _.forEach(g.nodeEdges(v), function(e) {
                var edgeV = e.v,
                    w = (v === edgeV) ? e.w : edgeV;
                if (!t.hasNode(w) && !slack(g, e)) {
                    t.setNode(w, {});
                    t.setEdge(v, w, {});
                    dfs(w);
                }
            });
        }

        _.forEach(t.nodes(), dfs);
        return t.nodeCount();
    }

    /*
     * Finds the edge with the smallest slack that is incident on tree and returns
     * it.
     */
    function findMinSlackEdge(t, g) {
        return _.minBy(g.edges(), function(e) {
            if (t.hasNode(e.v) !== t.hasNode(e.w)) {
                return slack(g, e);
            }
        });
    }

    function shiftRanks(t, g, delta) {
        _.forEach(t.nodes(), function(v) {
            g.node(v).rank += delta;
        });
    }

},{"../graphlib":76,"../lodash":79,"./util":97}],95:[function(require,module,exports){
    "use strict";

    var rankUtil = require("./util"),
        longestPath = rankUtil.longestPath,
        feasibleTree = require("./feasible-tree"),
        networkSimplex = require("./network-simplex");

    module.exports = rank;

    /*
     * Assigns a rank to each node in the input graph that respects the "minlen"
     * constraint specified on edges between nodes.
     *
     * This basic structure is derived from Gansner, et al., "A Technique for
     * Drawing Directed Graphs."
     *
     * Pre-conditions:
     *
     *    1. Graph must be a connected DAG
     *    2. Graph nodes must be objects
     *    3. Graph edges must have "weight" and "minlen" attributes
     *
     * Post-conditions:
     *
     *    1. Graph nodes will have a "rank" attribute based on the results of the
     *       algorithm. Ranks can start at any index (including negative), we'll
     *       fix them up later.
     */
    function rank(g) {
        switch(g.graph().ranker) {
            case "network-simplex": networkSimplexRanker(g); break;
            case "tight-tree": tightTreeRanker(g); break;
            case "longest-path": longestPathRanker(g); break;
            default: networkSimplexRanker(g);
        }
    }

// A fast and simple ranker, but results are far from optimal.
    var longestPathRanker = longestPath;

    function tightTreeRanker(g) {
        longestPath(g);
        feasibleTree(g);
    }

    function networkSimplexRanker(g) {
        networkSimplex(g);
    }

},{"./feasible-tree":94,"./network-simplex":96,"./util":97}],96:[function(require,module,exports){
    "use strict";

    var _ = require("../lodash"),
        feasibleTree = require("./feasible-tree"),
        slack = require("./util").slack,
        initRank = require("./util").longestPath,
        preorder = require("../graphlib").alg.preorder,
        postorder = require("../graphlib").alg.postorder,
        simplify = require("../util").simplify;

    module.exports = networkSimplex;

// Expose some internals for testing purposes
    networkSimplex.initLowLimValues = initLowLimValues;
    networkSimplex.initCutValues = initCutValues;
    networkSimplex.calcCutValue = calcCutValue;
    networkSimplex.leaveEdge = leaveEdge;
    networkSimplex.enterEdge = enterEdge;
    networkSimplex.exchangeEdges = exchangeEdges;

    /*
     * The network simplex algorithm assigns ranks to each node in the input graph
     * and iteratively improves the ranking to reduce the length of edges.
     *
     * Preconditions:
     *
     *    1. The input graph must be a DAG.
     *    2. All nodes in the graph must have an object value.
     *    3. All edges in the graph must have "minlen" and "weight" attributes.
     *
     * Postconditions:
     *
     *    1. All nodes in the graph will have an assigned "rank" attribute that has
     *       been optimized by the network simplex algorithm. Ranks start at 0.
     *
     *
     * A rough sketch of the algorithm is as follows:
     *
     *    1. Assign initial ranks to each node. We use the longest path algorithm,
     *       which assigns ranks to the lowest position possible. In general this
     *       leads to very wide bottom ranks and unnecessarily long edges.
     *    2. Construct a feasible tight tree. A tight tree is one such that all
     *       edges in the tree have no slack (difference between length of edge
     *       and minlen for the edge). This by itself greatly improves the assigned
     *       rankings by shorting edges.
     *    3. Iteratively find edges that have negative cut values. Generally a
     *       negative cut value indicates that the edge could be removed and a new
     *       tree edge could be added to produce a more compact graph.
     *
     * Much of the algorithms here are derived from Gansner, et al., "A Technique
     * for Drawing Directed Graphs." The structure of the file roughly follows the
     * structure of the overall algorithm.
     */
    function networkSimplex(g) {
        g = simplify(g);
        initRank(g);
        var t = feasibleTree(g);
        initLowLimValues(t);
        initCutValues(t, g);

        var e, f;
        while ((e = leaveEdge(t))) {
            f = enterEdge(t, g, e);
            exchangeEdges(t, g, e, f);
        }
    }

    /*
     * Initializes cut values for all edges in the tree.
     */
    function initCutValues(t, g) {
        var vs = postorder(t, t.nodes());
        vs = vs.slice(0, vs.length - 1);
        _.forEach(vs, function(v) {
            assignCutValue(t, g, v);
        });
    }

    function assignCutValue(t, g, child) {
        var childLab = t.node(child),
            parent = childLab.parent;
        t.edge(child, parent).cutvalue = calcCutValue(t, g, child);
    }

    /*
     * Given the tight tree, its graph, and a child in the graph calculate and
     * return the cut value for the edge between the child and its parent.
     */
    function calcCutValue(t, g, child) {
        var childLab = t.node(child),
            parent = childLab.parent,
            // True if the child is on the tail end of the edge in the directed graph
            childIsTail = true,
            // The graph's view of the tree edge we're inspecting
            graphEdge = g.edge(child, parent),
            // The accumulated cut value for the edge between this node and its parent
            cutValue = 0;

        if (!graphEdge) {
            childIsTail = false;
            graphEdge = g.edge(parent, child);
        }

        cutValue = graphEdge.weight;

        _.forEach(g.nodeEdges(child), function(e) {
            var isOutEdge = e.v === child,
                other = isOutEdge ? e.w : e.v;

            if (other !== parent) {
                var pointsToHead = isOutEdge === childIsTail,
                    otherWeight = g.edge(e).weight;

                cutValue += pointsToHead ? otherWeight : -otherWeight;
                if (isTreeEdge(t, child, other)) {
                    var otherCutValue = t.edge(child, other).cutvalue;
                    cutValue += pointsToHead ? -otherCutValue : otherCutValue;
                }
            }
        });

        return cutValue;
    }

    function initLowLimValues(tree, root) {
        if (arguments.length < 2) {
            root = tree.nodes()[0];
        }
        dfsAssignLowLim(tree, {}, 1, root);
    }

    function dfsAssignLowLim(tree, visited, nextLim, v, parent) {
        var low = nextLim,
            label = tree.node(v);

        visited[v] = true;
        _.forEach(tree.neighbors(v), function(w) {
            if (!_.has(visited, w)) {
                nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);
            }
        });

        label.low = low;
        label.lim = nextLim++;
        if (parent) {
            label.parent = parent;
        } else {
            // TODO should be able to remove this when we incrementally update low lim
            delete label.parent;
        }

        return nextLim;
    }

    function leaveEdge(tree) {
        return _.find(tree.edges(), function(e) {
            return tree.edge(e).cutvalue < 0;
        });
    }

    function enterEdge(t, g, edge) {
        var v = edge.v,
            w = edge.w;

        // For the rest of this function we assume that v is the tail and w is the
        // head, so if we don't have this edge in the graph we should flip it to
        // match the correct orientation.
        if (!g.hasEdge(v, w)) {
            v = edge.w;
            w = edge.v;
        }

        var vLabel = t.node(v),
            wLabel = t.node(w),
            tailLabel = vLabel,
            flip = false;

        // If the root is in the tail of the edge then we need to flip the logic that
        // checks for the head and tail nodes in the candidates function below.
        if (vLabel.lim > wLabel.lim) {
            tailLabel = wLabel;
            flip = true;
        }

        var candidates = _.filter(g.edges(), function(edge) {
            return flip === isDescendant(t, t.node(edge.v), tailLabel) &&
                flip !== isDescendant(t, t.node(edge.w), tailLabel);
        });

        return _.minBy(candidates, function(edge) { return slack(g, edge); });
    }

    function exchangeEdges(t, g, e, f) {
        var v = e.v,
            w = e.w;
        t.removeEdge(v, w);
        t.setEdge(f.v, f.w, {});
        initLowLimValues(t);
        initCutValues(t, g);
        updateRanks(t, g);
    }

    function updateRanks(t, g) {
        var root = _.find(t.nodes(), function(v) { return !g.node(v).parent; }),
            vs = preorder(t, root);
        vs = vs.slice(1);
        _.forEach(vs, function(v) {
            var parent = t.node(v).parent,
                edge = g.edge(v, parent),
                flipped = false;

            if (!edge) {
                edge = g.edge(parent, v);
                flipped = true;
            }

            g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);
        });
    }

    /*
     * Returns true if the edge is in the tree.
     */
    function isTreeEdge(tree, u, v) {
        return tree.hasEdge(u, v);
    }

    /*
     * Returns true if the specified node is descendant of the root node per the
     * assigned low and lim attributes in the tree.
     */
    function isDescendant(tree, vLabel, rootLabel) {
        return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
    }

},{"../graphlib":76,"../lodash":79,"../util":98,"./feasible-tree":94,"./util":97}],97:[function(require,module,exports){
    "use strict";

    var _ = require("../lodash");

    module.exports = {
        longestPath: longestPath,
        slack: slack
    };

    /*
     * Initializes ranks for the input graph using the longest path algorithm. This
     * algorithm scales well and is fast in practice, it yields rather poor
     * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom
     * ranks wide and leaving edges longer than necessary. However, due to its
     * speed, this algorithm is good for getting an initial ranking that can be fed
     * into other algorithms.
     *
     * This algorithm does not normalize layers because it will be used by other
     * algorithms in most cases. If using this algorithm directly, be sure to
     * run normalize at the end.
     *
     * Pre-conditions:
     *
     *    1. Input graph is a DAG.
     *    2. Input graph node labels can be assigned properties.
     *
     * Post-conditions:
     *
     *    1. Each node will be assign an (unnormalized) "rank" property.
     */
    function longestPath(g) {
        var visited = {};

        function dfs(v) {
            var label = g.node(v);
            if (_.has(visited, v)) {
                return label.rank;
            }
            visited[v] = true;

            var rank = _.minBy(_.map(g.outEdges(v), function(e) {
                return dfs(e.w) - g.edge(e).minlen;
            }));

            if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3
                rank === undefined || // return value of _.map([]) for Lodash 4
                rank === null) { // return value of _.map([null])
                rank = 0;
            }

            return (label.rank = rank);
        }

        _.forEach(g.sources(), dfs);
    }

    /*
     * Returns the amount of slack for the given edge. The slack is defined as the
     * difference between the length of the edge and its minimum length.
     */
    function slack(g, e) {
        return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;
    }

},{"../lodash":79}],98:[function(require,module,exports){
    "use strict";

    var _ = require("./lodash"),
        Graph = require("./graphlib").Graph;

    module.exports = {
        addDummyNode: addDummyNode,
        simplify: simplify,
        asNonCompoundGraph: asNonCompoundGraph,
        successorWeights: successorWeights,
        predecessorWeights: predecessorWeights,
        intersectRect: intersectRect,
        buildLayerMatrix: buildLayerMatrix,
        normalizeRanks: normalizeRanks,
        removeEmptyRanks: removeEmptyRanks,
        addBorderNode: addBorderNode,
        maxRank: maxRank,
        partition: partition,
        time: time,
        notime: notime
    };

    /*
     * Adds a dummy node to the graph and return v.
     */
    function addDummyNode(g, type, attrs, name) {
        var v;
        do {
            v = _.uniqueId(name);
        } while (g.hasNode(v));

        attrs.dummy = type;
        g.setNode(v, attrs);
        return v;
    }

    /*
     * Returns a new graph with only simple edges. Handles aggregation of data
     * associated with multi-edges.
     */
    function simplify(g) {
        var simplified = new Graph().setGraph(g.graph());
        _.forEach(g.nodes(), function(v) { simplified.setNode(v, g.node(v)); });
        _.forEach(g.edges(), function(e) {
            var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 },
                label = g.edge(e);
            simplified.setEdge(e.v, e.w, {
                weight: simpleLabel.weight + label.weight,
                minlen: Math.max(simpleLabel.minlen, label.minlen)
            });
        });
        return simplified;
    }

    function asNonCompoundGraph(g) {
        var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());
        _.forEach(g.nodes(), function(v) {
            if (!g.children(v).length) {
                simplified.setNode(v, g.node(v));
            }
        });
        _.forEach(g.edges(), function(e) {
            simplified.setEdge(e, g.edge(e));
        });
        return simplified;
    }

    function successorWeights(g) {
        var weightMap = _.map(g.nodes(), function(v) {
            var sucs = {};
            _.forEach(g.outEdges(v), function(e) {
                sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;
            });
            return sucs;
        });
        return _.zipObject(g.nodes(), weightMap);
    }

    function predecessorWeights(g) {
        var weightMap = _.map(g.nodes(), function(v) {
            var preds = {};
            _.forEach(g.inEdges(v), function(e) {
                preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;
            });
            return preds;
        });
        return _.zipObject(g.nodes(), weightMap);
    }

    /*
     * Finds where a line starting at point ({x, y}) would intersect a rectangle
     * ({x, y, width, height}) if it were pointing at the rectangle's center.
     */
    function intersectRect(rect, point) {
        var x = rect.x;
        var y = rect.y;

        // Rectangle intersection algorithm from:
        // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes
        var dx = point.x - x;
        var dy = point.y - y;
        var w = rect.width / 2;
        var h = rect.height / 2;

        if (!dx && !dy) {
            throw new Error("Not possible to find intersection inside of the rectangle");
        }

        var sx, sy;
        if (Math.abs(dy) * w > Math.abs(dx) * h) {
            // Intersection is top or bottom of rect.
            if (dy < 0) {
                h = -h;
            }
            sx = h * dx / dy;
            sy = h;
        } else {
            // Intersection is left or right of rect.
            if (dx < 0) {
                w = -w;
            }
            sx = w;
            sy = w * dy / dx;
        }

        return { x: x + sx, y: y + sy };
    }

    /*
     * Given a DAG with each node assigned "rank" and "order" properties, this
     * function will produce a matrix with the ids of each node.
     */
    function buildLayerMatrix(g) {
        var layering = _.map(_.range(maxRank(g) + 1), function() { return []; });
        _.forEach(g.nodes(), function(v) {
            var node = g.node(v),
                rank = node.rank;
            if (!_.isUndefined(rank)) {
                layering[rank][node.order] = v;
            }
        });
        return layering;
    }

    /*
     * Adjusts the ranks for all nodes in the graph such that all nodes v have
     * rank(v) >= 0 and at least one node w has rank(w) = 0.
     */
    function normalizeRanks(g) {
        var min = _.minBy(_.map(g.nodes(), function(v) { return g.node(v).rank; }));
        _.forEach(g.nodes(), function(v) {
            var node = g.node(v);
            if (_.has(node, "rank")) {
                node.rank -= min;
            }
        });
    }

    function removeEmptyRanks(g) {
        // Ranks may not start at 0, so we need to offset them
        var offset = _.minBy(_.map(g.nodes(), function(v) { return g.node(v).rank; }));

        var layers = [];
        _.forEach(g.nodes(), function(v) {
            var rank = g.node(v).rank - offset;
            if (!layers[rank]) {
                layers[rank] = [];
            }
            layers[rank].push(v);
        });

        var delta = 0,
            nodeRankFactor = g.graph().nodeRankFactor;
        _.forEach(layers, function(vs, i) {
            if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {
                --delta;
            } else if (delta) {
                _.forEach(vs, function(v) { g.node(v).rank += delta; });
            }
        });
    }

    function addBorderNode(g, prefix, rank, order) {
        var node = {
            width: 0,
            height: 0
        };
        if (arguments.length >= 4) {
            node.rank = rank;
            node.order = order;
        }
        return addDummyNode(g, "border", node, prefix);
    }

    function maxRank(g) {
        return _.max(_.map(g.nodes(), function(v) {
            var rank = g.node(v).rank;
            if (!_.isUndefined(rank)) {
                return rank;
            }
        }));
    }

    /*
     * Partition a collection into two groups: `lhs` and `rhs`. If the supplied
     * function returns true for an entry it goes into `lhs`. Otherwise it goes
     * into `rhs.
     */
    function partition(collection, fn) {
        var result = { lhs: [], rhs: [] };
        _.forEach(collection, function(value) {
            if (fn(value)) {
                result.lhs.push(value);
            } else {
                result.rhs.push(value);
            }
        });
        return result;
    }

    /*
     * Returns a new function that wraps `fn` with a timer. The wrapper logs the
     * time it takes to execute the function.
     */
    function time(name, fn) {
        var start = _.now();
        try {
            return fn();
        } finally {
            console.log(name + " time: " + (_.now() - start) + "ms");
        }
    }

    function notime(name, fn) {
        return fn();
    }

},{"./graphlib":76,"./lodash":79}],99:[function(require,module,exports){
    module.exports = "0.8.1";

},{}],100:[function(require,module,exports){
    /**
     * Copyright (c) 2014, Chris Pettitt
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice, this
     * list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     * this list of conditions and the following disclaimer in the documentation
     * and/or other materials provided with the distribution.
     *
     * 3. Neither the name of the copyright holder nor the names of its contributors
     * may be used to endorse or promote products derived from this software without
     * specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */

    var lib = require("./lib");

    module.exports = {
        Graph: lib.Graph,
        json: require("./lib/json"),
        alg: require("./lib/alg"),
        version: lib.version
    };

},{"./lib":116,"./lib/alg":107,"./lib/json":117}],101:[function(require,module,exports){
    var _ = require("../lodash");

    module.exports = components;

    function components(g) {
        var visited = {},
            cmpts = [],
            cmpt;

        function dfs(v) {
            if (_.has(visited, v)) return;
            visited[v] = true;
            cmpt.push(v);
            _.each(g.successors(v), dfs);
            _.each(g.predecessors(v), dfs);
        }

        _.each(g.nodes(), function(v) {
            cmpt = [];
            dfs(v);
            if (cmpt.length) {
                cmpts.push(cmpt);
            }
        });

        return cmpts;
    }

},{"../lodash":118}],102:[function(require,module,exports){
    var _ = require("../lodash");

    module.exports = dfs;

    /*
     * A helper that preforms a pre- or post-order traversal on the input graph
     * and returns the nodes in the order they were visited. If the graph is
     * undirected then this algorithm will navigate using neighbors. If the graph
     * is directed then this algorithm will navigate using successors.
     *
     * Order must be one of "pre" or "post".
     */
    function dfs(g, vs, order) {
        if (!_.isArray(vs)) {
            vs = [vs];
        }

        var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);

        var acc = [],
            visited = {};
        _.each(vs, function(v) {
            if (!g.hasNode(v)) {
                throw new Error("Graph does not have node: " + v);
            }

            doDfs(g, v, order === "post", visited, navigation, acc);
        });
        return acc;
    }

    function doDfs(g, v, postorder, visited, navigation, acc) {
        if (!_.has(visited, v)) {
            visited[v] = true;

            if (!postorder) { acc.push(v); }
            _.each(navigation(v), function(w) {
                doDfs(g, w, postorder, visited, navigation, acc);
            });
            if (postorder) { acc.push(v); }
        }
    }

},{"../lodash":118}],103:[function(require,module,exports){
    var dijkstra = require("./dijkstra"),
        _ = require("../lodash");

    module.exports = dijkstraAll;

    function dijkstraAll(g, weightFunc, edgeFunc) {
        return _.transform(g.nodes(), function(acc, v) {
            acc[v] = dijkstra(g, v, weightFunc, edgeFunc);
        }, {});
    }

},{"../lodash":118,"./dijkstra":104}],104:[function(require,module,exports){
    var _ = require("../lodash"),
        PriorityQueue = require("../data/priority-queue");

    module.exports = dijkstra;

    var DEFAULT_WEIGHT_FUNC = _.constant(1);

    function dijkstra(g, source, weightFn, edgeFn) {
        return runDijkstra(g, String(source),
            weightFn || DEFAULT_WEIGHT_FUNC,
            edgeFn || function(v) { return g.outEdges(v); });
    }

    function runDijkstra(g, source, weightFn, edgeFn) {
        var results = {},
            pq = new PriorityQueue(),
            v, vEntry;

        var updateNeighbors = function(edge) {
            var w = edge.v !== v ? edge.v : edge.w,
                wEntry = results[w],
                weight = weightFn(edge),
                distance = vEntry.distance + weight;

            if (weight < 0) {
                throw new Error("dijkstra does not allow negative edge weights. " +
                    "Bad edge: " + edge + " Weight: " + weight);
            }

            if (distance < wEntry.distance) {
                wEntry.distance = distance;
                wEntry.predecessor = v;
                pq.decrease(w, distance);
            }
        };

        g.nodes().forEach(function(v) {
            var distance = v === source ? 0 : Number.POSITIVE_INFINITY;
            results[v] = { distance: distance };
            pq.add(v, distance);
        });

        while (pq.size() > 0) {
            v = pq.removeMin();
            vEntry = results[v];
            if (vEntry.distance === Number.POSITIVE_INFINITY) {
                break;
            }

            edgeFn(v).forEach(updateNeighbors);
        }

        return results;
    }

},{"../data/priority-queue":114,"../lodash":118}],105:[function(require,module,exports){
    var _ = require("../lodash"),
        tarjan = require("./tarjan");

    module.exports = findCycles;

    function findCycles(g) {
        return _.filter(tarjan(g), function(cmpt) {
            return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));
        });
    }

},{"../lodash":118,"./tarjan":112}],106:[function(require,module,exports){
    var _ = require("../lodash");

    module.exports = floydWarshall;

    var DEFAULT_WEIGHT_FUNC = _.constant(1);

    function floydWarshall(g, weightFn, edgeFn) {
        return runFloydWarshall(g,
            weightFn || DEFAULT_WEIGHT_FUNC,
            edgeFn || function(v) { return g.outEdges(v); });
    }

    function runFloydWarshall(g, weightFn, edgeFn) {
        var results = {},
            nodes = g.nodes();

        nodes.forEach(function(v) {
            results[v] = {};
            results[v][v] = { distance: 0 };
            nodes.forEach(function(w) {
                if (v !== w) {
                    results[v][w] = { distance: Number.POSITIVE_INFINITY };
                }
            });
            edgeFn(v).forEach(function(edge) {
                var w = edge.v === v ? edge.w : edge.v,
                    d = weightFn(edge);
                results[v][w] = { distance: d, predecessor: v };
            });
        });

        nodes.forEach(function(k) {
            var rowK = results[k];
            nodes.forEach(function(i) {
                var rowI = results[i];
                nodes.forEach(function(j) {
                    var ik = rowI[k];
                    var kj = rowK[j];
                    var ij = rowI[j];
                    var altDistance = ik.distance + kj.distance;
                    if (altDistance < ij.distance) {
                        ij.distance = altDistance;
                        ij.predecessor = kj.predecessor;
                    }
                });
            });
        });

        return results;
    }

},{"../lodash":118}],107:[function(require,module,exports){
    module.exports = {
        components: require("./components"),
        dijkstra: require("./dijkstra"),
        dijkstraAll: require("./dijkstra-all"),
        findCycles: require("./find-cycles"),
        floydWarshall: require("./floyd-warshall"),
        isAcyclic: require("./is-acyclic"),
        postorder: require("./postorder"),
        preorder: require("./preorder"),
        prim: require("./prim"),
        tarjan: require("./tarjan"),
        topsort: require("./topsort")
    };

},{"./components":101,"./dijkstra":104,"./dijkstra-all":103,"./find-cycles":105,"./floyd-warshall":106,"./is-acyclic":108,"./postorder":109,"./preorder":110,"./prim":111,"./tarjan":112,"./topsort":113}],108:[function(require,module,exports){
    var topsort = require("./topsort");

    module.exports = isAcyclic;

    function isAcyclic(g) {
        try {
            topsort(g);
        } catch (e) {
            if (e instanceof topsort.CycleException) {
                return false;
            }
            throw e;
        }
        return true;
    }

},{"./topsort":113}],109:[function(require,module,exports){
    var dfs = require("./dfs");

    module.exports = postorder;

    function postorder(g, vs) {
        return dfs(g, vs, "post");
    }

},{"./dfs":102}],110:[function(require,module,exports){
    var dfs = require("./dfs");

    module.exports = preorder;

    function preorder(g, vs) {
        return dfs(g, vs, "pre");
    }

},{"./dfs":102}],111:[function(require,module,exports){
    var _ = require("../lodash"),
        Graph = require("../graph"),
        PriorityQueue = require("../data/priority-queue");

    module.exports = prim;

    function prim(g, weightFunc) {
        var result = new Graph(),
            parents = {},
            pq = new PriorityQueue(),
            v;

        function updateNeighbors(edge) {
            var w = edge.v === v ? edge.w : edge.v,
                pri = pq.priority(w);
            if (pri !== undefined) {
                var edgeWeight = weightFunc(edge);
                if (edgeWeight < pri) {
                    parents[w] = v;
                    pq.decrease(w, edgeWeight);
                }
            }
        }

        if (g.nodeCount() === 0) {
            return result;
        }

        _.each(g.nodes(), function(v) {
            pq.add(v, Number.POSITIVE_INFINITY);
            result.setNode(v);
        });

        // Start from an arbitrary node
        pq.decrease(g.nodes()[0], 0);

        var init = false;
        while (pq.size() > 0) {
            v = pq.removeMin();
            if (_.has(parents, v)) {
                result.setEdge(v, parents[v]);
            } else if (init) {
                throw new Error("Input graph is not connected: " + g);
            } else {
                init = true;
            }

            g.nodeEdges(v).forEach(updateNeighbors);
        }

        return result;
    }

},{"../data/priority-queue":114,"../graph":115,"../lodash":118}],112:[function(require,module,exports){
    var _ = require("../lodash");

    module.exports = tarjan;

    function tarjan(g) {
        var index = 0,
            stack = [],
            visited = {}, // node id -> { onStack, lowlink, index }
            results = [];

        function dfs(v) {
            var entry = visited[v] = {
                onStack: true,
                lowlink: index,
                index: index++
            };
            stack.push(v);

            g.successors(v).forEach(function(w) {
                if (!_.has(visited, w)) {
                    dfs(w);
                    entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);
                } else if (visited[w].onStack) {
                    entry.lowlink = Math.min(entry.lowlink, visited[w].index);
                }
            });

            if (entry.lowlink === entry.index) {
                var cmpt = [],
                    w;
                do {
                    w = stack.pop();
                    visited[w].onStack = false;
                    cmpt.push(w);
                } while (v !== w);
                results.push(cmpt);
            }
        }

        g.nodes().forEach(function(v) {
            if (!_.has(visited, v)) {
                dfs(v);
            }
        });

        return results;
    }

},{"../lodash":118}],113:[function(require,module,exports){
    var _ = require("../lodash");

    module.exports = topsort;
    topsort.CycleException = CycleException;

    function topsort(g) {
        var visited = {},
            stack = {},
            results = [];

        function visit(node) {
            if (_.has(stack, node)) {
                throw new CycleException();
            }

            if (!_.has(visited, node)) {
                stack[node] = true;
                visited[node] = true;
                _.each(g.predecessors(node), visit);
                delete stack[node];
                results.push(node);
            }
        }

        _.each(g.sinks(), visit);

        if (_.size(visited) !== g.nodeCount()) {
            throw new CycleException();
        }

        return results;
    }

    function CycleException() {}

},{"../lodash":118}],114:[function(require,module,exports){
    var _ = require("../lodash");

    module.exports = PriorityQueue;

    /**
     * A min-priority queue data structure. This algorithm is derived from Cormen,
     * et al., "Introduction to Algorithms". The basic idea of a min-priority
     * queue is that you can efficiently (in O(1) time) get the smallest key in
     * the queue. Adding and removing elements takes O(log n) time. A key can
     * have its priority decreased in O(log n) time.
     */
    function PriorityQueue() {
        this._arr = [];
        this._keyIndices = {};
    }

    /**
     * Returns the number of elements in the queue. Takes `O(1)` time.
     */
    PriorityQueue.prototype.size = function() {
        return this._arr.length;
    };

    /**
     * Returns the keys that are in the queue. Takes `O(n)` time.
     */
    PriorityQueue.prototype.keys = function() {
        return this._arr.map(function(x) { return x.key; });
    };

    /**
     * Returns `true` if **key** is in the queue and `false` if not.
     */
    PriorityQueue.prototype.has = function(key) {
        return _.has(this._keyIndices, key);
    };

    /**
     * Returns the priority for **key**. If **key** is not present in the queue
     * then this function returns `undefined`. Takes `O(1)` time.
     *
     * @param {Object} key
     */
    PriorityQueue.prototype.priority = function(key) {
        var index = this._keyIndices[key];
        if (index !== undefined) {
            return this._arr[index].priority;
        }
    };

    /**
     * Returns the key for the minimum element in this queue. If the queue is
     * empty this function throws an Error. Takes `O(1)` time.
     */
    PriorityQueue.prototype.min = function() {
        if (this.size() === 0) {
            throw new Error("Queue underflow");
        }
        return this._arr[0].key;
    };

    /**
     * Inserts a new key into the priority queue. If the key already exists in
     * the queue this function returns `false`; otherwise it will return `true`.
     * Takes `O(n)` time.
     *
     * @param {Object} key the key to add
     * @param {Number} priority the initial priority for the key
     */
    PriorityQueue.prototype.add = function(key, priority) {
        var keyIndices = this._keyIndices;
        key = String(key);
        if (!_.has(keyIndices, key)) {
            var arr = this._arr;
            var index = arr.length;
            keyIndices[key] = index;
            arr.push({key: key, priority: priority});
            this._decrease(index);
            return true;
        }
        return false;
    };

    /**
     * Removes and returns the smallest key in the queue. Takes `O(log n)` time.
     */
    PriorityQueue.prototype.removeMin = function() {
        this._swap(0, this._arr.length - 1);
        var min = this._arr.pop();
        delete this._keyIndices[min.key];
        this._heapify(0);
        return min.key;
    };

    /**
     * Decreases the priority for **key** to **priority**. If the new priority is
     * greater than the previous priority, this function will throw an Error.
     *
     * @param {Object} key the key for which to raise priority
     * @param {Number} priority the new priority for the key
     */
    PriorityQueue.prototype.decrease = function(key, priority) {
        var index = this._keyIndices[key];
        if (priority > this._arr[index].priority) {
            throw new Error("New priority is greater than current priority. " +
                "Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority);
        }
        this._arr[index].priority = priority;
        this._decrease(index);
    };

    PriorityQueue.prototype._heapify = function(i) {
        var arr = this._arr;
        var l = 2 * i,
            r = l + 1,
            largest = i;
        if (l < arr.length) {
            largest = arr[l].priority < arr[largest].priority ? l : largest;
            if (r < arr.length) {
                largest = arr[r].priority < arr[largest].priority ? r : largest;
            }
            if (largest !== i) {
                this._swap(i, largest);
                this._heapify(largest);
            }
        }
    };

    PriorityQueue.prototype._decrease = function(index) {
        var arr = this._arr;
        var priority = arr[index].priority;
        var parent;
        while (index !== 0) {
            parent = index >> 1;
            if (arr[parent].priority < priority) {
                break;
            }
            this._swap(index, parent);
            index = parent;
        }
    };

    PriorityQueue.prototype._swap = function(i, j) {
        var arr = this._arr;
        var keyIndices = this._keyIndices;
        var origArrI = arr[i];
        var origArrJ = arr[j];
        arr[i] = origArrJ;
        arr[j] = origArrI;
        keyIndices[origArrJ.key] = i;
        keyIndices[origArrI.key] = j;
    };

},{"../lodash":118}],115:[function(require,module,exports){
    "use strict";

    var _ = require("./lodash");

    module.exports = Graph;

    var DEFAULT_EDGE_NAME = "\x00",
        GRAPH_NODE = "\x00",
        EDGE_KEY_DELIM = "\x01";

// Implementation notes:
//
//  * Node id query functions should return string ids for the nodes
//  * Edge id query functions should return an "edgeObj", edge object, that is
//    composed of enough information to uniquely identify an edge: {v, w, name}.
//  * Internally we use an "edgeId", a stringified form of the edgeObj, to
//    reference edges. This is because we need a performant way to look these
//    edges up and, object properties, which have string keys, are the closest
//    we're going to get to a performant hashtable in JavaScript.

    function Graph(opts) {
        this._isDirected = _.has(opts, "directed") ? opts.directed : true;
        this._isMultigraph = _.has(opts, "multigraph") ? opts.multigraph : false;
        this._isCompound = _.has(opts, "compound") ? opts.compound : false;

        // Label for the graph itself
        this._label = undefined;

        // Defaults to be set when creating a new node
        this._defaultNodeLabelFn = _.constant(undefined);

        // Defaults to be set when creating a new edge
        this._defaultEdgeLabelFn = _.constant(undefined);

        // v -> label
        this._nodes = {};

        if (this._isCompound) {
            // v -> parent
            this._parent = {};

            // v -> children
            this._children = {};
            this._children[GRAPH_NODE] = {};
        }

        // v -> edgeObj
        this._in = {};

        // u -> v -> Number
        this._preds = {};

        // v -> edgeObj
        this._out = {};

        // v -> w -> Number
        this._sucs = {};

        // e -> edgeObj
        this._edgeObjs = {};

        // e -> label
        this._edgeLabels = {};
    }

    /* Number of nodes in the graph. Should only be changed by the implementation. */
    Graph.prototype._nodeCount = 0;

    /* Number of edges in the graph. Should only be changed by the implementation. */
    Graph.prototype._edgeCount = 0;


    /* === Graph functions ========= */

    Graph.prototype.isDirected = function() {
        return this._isDirected;
    };

    Graph.prototype.isMultigraph = function() {
        return this._isMultigraph;
    };

    Graph.prototype.isCompound = function() {
        return this._isCompound;
    };

    Graph.prototype.setGraph = function(label) {
        this._label = label;
        return this;
    };

    Graph.prototype.graph = function() {
        return this._label;
    };


    /* === Node functions ========== */

    Graph.prototype.setDefaultNodeLabel = function(newDefault) {
        if (!_.isFunction(newDefault)) {
            newDefault = _.constant(newDefault);
        }
        this._defaultNodeLabelFn = newDefault;
        return this;
    };

    Graph.prototype.nodeCount = function() {
        return this._nodeCount;
    };

    Graph.prototype.nodes = function() {
        return _.keys(this._nodes);
    };

    Graph.prototype.sources = function() {
        var self = this;
        return _.filter(this.nodes(), function(v) {
            return _.isEmpty(self._in[v]);
        });
    };

    Graph.prototype.sinks = function() {
        var self = this;
        return _.filter(this.nodes(), function(v) {
            return _.isEmpty(self._out[v]);
        });
    };

    Graph.prototype.setNodes = function(vs, value) {
        var args = arguments;
        var self = this;
        _.each(vs, function(v) {
            if (args.length > 1) {
                self.setNode(v, value);
            } else {
                self.setNode(v);
            }
        });
        return this;
    };

    Graph.prototype.setNode = function(v, value) {
        if (_.has(this._nodes, v)) {
            if (arguments.length > 1) {
                this._nodes[v] = value;
            }
            return this;
        }

        this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);
        if (this._isCompound) {
            this._parent[v] = GRAPH_NODE;
            this._children[v] = {};
            this._children[GRAPH_NODE][v] = true;
        }
        this._in[v] = {};
        this._preds[v] = {};
        this._out[v] = {};
        this._sucs[v] = {};
        ++this._nodeCount;
        return this;
    };

    Graph.prototype.node = function(v) {
        return this._nodes[v];
    };

    Graph.prototype.hasNode = function(v) {
        return _.has(this._nodes, v);
    };

    Graph.prototype.removeNode =  function(v) {
        var self = this;
        if (_.has(this._nodes, v)) {
            var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };
            delete this._nodes[v];
            if (this._isCompound) {
                this._removeFromParentsChildList(v);
                delete this._parent[v];
                _.each(this.children(v), function(child) {
                    self.setParent(child);
                });
                delete this._children[v];
            }
            _.each(_.keys(this._in[v]), removeEdge);
            delete this._in[v];
            delete this._preds[v];
            _.each(_.keys(this._out[v]), removeEdge);
            delete this._out[v];
            delete this._sucs[v];
            --this._nodeCount;
        }
        return this;
    };

    Graph.prototype.setParent = function(v, parent) {
        if (!this._isCompound) {
            throw new Error("Cannot set parent in a non-compound graph");
        }

        if (_.isUndefined(parent)) {
            parent = GRAPH_NODE;
        } else {
            // Coerce parent to string
            parent += "";
            for (var ancestor = parent;
                 !_.isUndefined(ancestor);
                 ancestor = this.parent(ancestor)) {
                if (ancestor === v) {
                    throw new Error("Setting " + parent+ " as parent of " + v +
                        " would create a cycle");
                }
            }

            this.setNode(parent);
        }

        this.setNode(v);
        this._removeFromParentsChildList(v);
        this._parent[v] = parent;
        this._children[parent][v] = true;
        return this;
    };

    Graph.prototype._removeFromParentsChildList = function(v) {
        delete this._children[this._parent[v]][v];
    };

    Graph.prototype.parent = function(v) {
        if (this._isCompound) {
            var parent = this._parent[v];
            if (parent !== GRAPH_NODE) {
                return parent;
            }
        }
    };

    Graph.prototype.children = function(v) {
        if (_.isUndefined(v)) {
            v = GRAPH_NODE;
        }

        if (this._isCompound) {
            var children = this._children[v];
            if (children) {
                return _.keys(children);
            }
        } else if (v === GRAPH_NODE) {
            return this.nodes();
        } else if (this.hasNode(v)) {
            return [];
        }
    };

    Graph.prototype.predecessors = function(v) {
        var predsV = this._preds[v];
        if (predsV) {
            return _.keys(predsV);
        }
    };

    Graph.prototype.successors = function(v) {
        var sucsV = this._sucs[v];
        if (sucsV) {
            return _.keys(sucsV);
        }
    };

    Graph.prototype.neighbors = function(v) {
        var preds = this.predecessors(v);
        if (preds) {
            return _.union(preds, this.successors(v));
        }
    };

    Graph.prototype.isLeaf = function (v) {
        var neighbors;
        if (this.isDirected()) {
            neighbors = this.successors(v);
        } else {
            neighbors = this.neighbors(v);
        }
        return neighbors.length === 0;
    };

    Graph.prototype.filterNodes = function(filter) {
        var copy = new this.constructor({
            directed: this._isDirected,
            multigraph: this._isMultigraph,
            compound: this._isCompound
        });

        copy.setGraph(this.graph());

        var self = this;
        _.each(this._nodes, function(value, v) {
            if (filter(v)) {
                copy.setNode(v, value);
            }
        });

        _.each(this._edgeObjs, function(e) {
            if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
                copy.setEdge(e, self.edge(e));
            }
        });

        var parents = {};
        function findParent(v) {
            var parent = self.parent(v);
            if (parent === undefined || copy.hasNode(parent)) {
                parents[v] = parent;
                return parent;
            } else if (parent in parents) {
                return parents[parent];
            } else {
                return findParent(parent);
            }
        }

        if (this._isCompound) {
            _.each(copy.nodes(), function(v) {
                copy.setParent(v, findParent(v));
            });
        }

        return copy;
    };

    /* === Edge functions ========== */

    Graph.prototype.setDefaultEdgeLabel = function(newDefault) {
        if (!_.isFunction(newDefault)) {
            newDefault = _.constant(newDefault);
        }
        this._defaultEdgeLabelFn = newDefault;
        return this;
    };

    Graph.prototype.edgeCount = function() {
        return this._edgeCount;
    };

    Graph.prototype.edges = function() {
        return _.values(this._edgeObjs);
    };

    Graph.prototype.setPath = function(vs, value) {
        var self = this,
            args = arguments;
        _.reduce(vs, function(v, w) {
            if (args.length > 1) {
                self.setEdge(v, w, value);
            } else {
                self.setEdge(v, w);
            }
            return w;
        });
        return this;
    };

    /*
     * setEdge(v, w, [value, [name]])
     * setEdge({ v, w, [name] }, [value])
     */
    Graph.prototype.setEdge = function() {
        var v, w, name, value,
            valueSpecified = false,
            arg0 = arguments[0];

        if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
            v = arg0.v;
            w = arg0.w;
            name = arg0.name;
            if (arguments.length === 2) {
                value = arguments[1];
                valueSpecified = true;
            }
        } else {
            v = arg0;
            w = arguments[1];
            name = arguments[3];
            if (arguments.length > 2) {
                value = arguments[2];
                valueSpecified = true;
            }
        }

        v = "" + v;
        w = "" + w;
        if (!_.isUndefined(name)) {
            name = "" + name;
        }

        var e = edgeArgsToId(this._isDirected, v, w, name);
        if (_.has(this._edgeLabels, e)) {
            if (valueSpecified) {
                this._edgeLabels[e] = value;
            }
            return this;
        }

        if (!_.isUndefined(name) && !this._isMultigraph) {
            throw new Error("Cannot set a named edge when isMultigraph = false");
        }

        // It didn't exist, so we need to create it.
        // First ensure the nodes exist.
        this.setNode(v);
        this.setNode(w);

        this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);

        var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);
        // Ensure we add undirected edges in a consistent way.
        v = edgeObj.v;
        w = edgeObj.w;

        Object.freeze(edgeObj);
        this._edgeObjs[e] = edgeObj;
        incrementOrInitEntry(this._preds[w], v);
        incrementOrInitEntry(this._sucs[v], w);
        this._in[w][e] = edgeObj;
        this._out[v][e] = edgeObj;
        this._edgeCount++;
        return this;
    };

    Graph.prototype.edge = function(v, w, name) {
        var e = (arguments.length === 1
            ? edgeObjToId(this._isDirected, arguments[0])
            : edgeArgsToId(this._isDirected, v, w, name));
        return this._edgeLabels[e];
    };

    Graph.prototype.hasEdge = function(v, w, name) {
        var e = (arguments.length === 1
            ? edgeObjToId(this._isDirected, arguments[0])
            : edgeArgsToId(this._isDirected, v, w, name));
        return _.has(this._edgeLabels, e);
    };

    Graph.prototype.removeEdge = function(v, w, name) {
        var e = (arguments.length === 1
                ? edgeObjToId(this._isDirected, arguments[0])
                : edgeArgsToId(this._isDirected, v, w, name)),
            edge = this._edgeObjs[e];
        if (edge) {
            v = edge.v;
            w = edge.w;
            delete this._edgeLabels[e];
            delete this._edgeObjs[e];
            decrementOrRemoveEntry(this._preds[w], v);
            decrementOrRemoveEntry(this._sucs[v], w);
            delete this._in[w][e];
            delete this._out[v][e];
            this._edgeCount--;
        }
        return this;
    };

    Graph.prototype.inEdges = function(v, u) {
        var inV = this._in[v];
        if (inV) {
            var edges = _.values(inV);
            if (!u) {
                return edges;
            }
            return _.filter(edges, function(edge) { return edge.v === u; });
        }
    };

    Graph.prototype.outEdges = function(v, w) {
        var outV = this._out[v];
        if (outV) {
            var edges = _.values(outV);
            if (!w) {
                return edges;
            }
            return _.filter(edges, function(edge) { return edge.w === w; });
        }
    };

    Graph.prototype.nodeEdges = function(v, w) {
        var inEdges = this.inEdges(v, w);
        if (inEdges) {
            return inEdges.concat(this.outEdges(v, w));
        }
    };

    function incrementOrInitEntry(map, k) {
        if (map[k]) {
            map[k]++;
        } else {
            map[k] = 1;
        }
    }

    function decrementOrRemoveEntry(map, k) {
        if (!--map[k]) { delete map[k]; }
    }

    function edgeArgsToId(isDirected, v_, w_, name) {
        var v = "" + v_;
        var w = "" + w_;
        if (!isDirected && v > w) {
            var tmp = v;
            v = w;
            w = tmp;
        }
        return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +
            (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
    }

    function edgeArgsToObj(isDirected, v_, w_, name) {
        var v = "" + v_;
        var w = "" + w_;
        if (!isDirected && v > w) {
            var tmp = v;
            v = w;
            w = tmp;
        }
        var edgeObj =  { v: v, w: w };
        if (name) {
            edgeObj.name = name;
        }
        return edgeObj;
    }

    function edgeObjToId(isDirected, edgeObj) {
        return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
    }

},{"./lodash":118}],116:[function(require,module,exports){
// Includes only the "core" of graphlib
    module.exports = {
        Graph: require("./graph"),
        version: require("./version")
    };

},{"./graph":115,"./version":119}],117:[function(require,module,exports){
    var _ = require("./lodash"),
        Graph = require("./graph");

    module.exports = {
        write: write,
        read: read
    };

    function write(g) {
        var json = {
            options: {
                directed: g.isDirected(),
                multigraph: g.isMultigraph(),
                compound: g.isCompound()
            },
            nodes: writeNodes(g),
            edges: writeEdges(g)
        };
        if (!_.isUndefined(g.graph())) {
            json.value = _.clone(g.graph());
        }
        return json;
    }

    function writeNodes(g) {
        return _.map(g.nodes(), function(v) {
            var nodeValue = g.node(v),
                parent = g.parent(v),
                node = { v: v };
            if (!_.isUndefined(nodeValue)) {
                node.value = nodeValue;
            }
            if (!_.isUndefined(parent)) {
                node.parent = parent;
            }
            return node;
        });
    }

    function writeEdges(g) {
        return _.map(g.edges(), function(e) {
            var edgeValue = g.edge(e),
                edge = { v: e.v, w: e.w };
            if (!_.isUndefined(e.name)) {
                edge.name = e.name;
            }
            if (!_.isUndefined(edgeValue)) {
                edge.value = edgeValue;
            }
            return edge;
        });
    }

    function read(json) {
        var g = new Graph(json.options).setGraph(json.value);
        _.each(json.nodes, function(entry) {
            g.setNode(entry.v, entry.value);
            if (entry.parent) {
                g.setParent(entry.v, entry.parent);
            }
        });
        _.each(json.edges, function(entry) {
            g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
        });
        return g;
    }

},{"./graph":115,"./lodash":118}],118:[function(require,module,exports){
    arguments[4][79][0].apply(exports,arguments)
},{"dup":79,"lodash":123}],119:[function(require,module,exports){
    module.exports = '2.1.5';

},{}],120:[function(require,module,exports){
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m
        var eLen = nBytes * 8 - mLen - 1
        var eMax = (1 << eLen) - 1
        var eBias = eMax >> 1
        var nBits = -7
        var i = isLE ? (nBytes - 1) : 0
        var d = isLE ? -1 : 1
        var s = buffer[offset + i]

        i += d

        e = s & ((1 << (-nBits)) - 1)
        s >>= (-nBits)
        nBits += eLen
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & ((1 << (-nBits)) - 1)
        e >>= (-nBits)
        nBits += mLen
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
            e = 1 - eBias
        } else if (e === eMax) {
            return m ? NaN : ((s ? -1 : 1) * Infinity)
        } else {
            m = m + Math.pow(2, mLen)
            e = e - eBias
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c
        var eLen = nBytes * 8 - mLen - 1
        var eMax = (1 << eLen) - 1
        var eBias = eMax >> 1
        var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
        var i = isLE ? 0 : (nBytes - 1)
        var d = isLE ? 1 : -1
        var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

        value = Math.abs(value)

        if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0
            e = eMax
        } else {
            e = Math.floor(Math.log(value) / Math.LN2)
            if (value * (c = Math.pow(2, -e)) < 1) {
                e--
                c *= 2
            }
            if (e + eBias >= 1) {
                value += rt / c
            } else {
                value += rt * Math.pow(2, 1 - eBias)
            }
            if (value * c >= 2) {
                e++
                c /= 2
            }

            if (e + eBias >= eMax) {
                m = 0
                e = eMax
            } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen)
                e = e + eBias
            } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                e = 0
            }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = (e << mLen) | m
        eLen += mLen
        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128
    }

},{}],121:[function(require,module,exports){
    if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
        };
    } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            var TempCtor = function () {}
            TempCtor.prototype = superCtor.prototype
            ctor.prototype = new TempCtor()
            ctor.prototype.constructor = ctor
        }
    }

},{}],122:[function(require,module,exports){
    /*!
     * Determine if an object is a Buffer
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
        return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
    }

    function isBuffer (obj) {
        return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

// For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
        return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
    }

},{}],123:[function(require,module,exports){
    (function (global){
        /**
         * @license
         * Lodash <https://lodash.com/>
         * Copyright JS Foundation and other contributors <https://js.foundation/>
         * Released under MIT license <https://lodash.com/license>
         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
         */
        ;(function() {

            /** Used as a safe reference for `undefined` in pre-ES5 environments. */
            var undefined;

            /** Used as the semantic version number. */
            var VERSION = '4.17.4';

            /** Used as the size to enable large array optimizations. */
            var LARGE_ARRAY_SIZE = 200;

            /** Error message constants. */
            var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
                FUNC_ERROR_TEXT = 'Expected a function';

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /** Used as the maximum memoize cache size. */
            var MAX_MEMOIZE_SIZE = 500;

            /** Used as the internal argument placeholder. */
            var PLACEHOLDER = '__lodash_placeholder__';

            /** Used to compose bitmasks for cloning. */
            var CLONE_DEEP_FLAG = 1,
                CLONE_FLAT_FLAG = 2,
                CLONE_SYMBOLS_FLAG = 4;

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /** Used to compose bitmasks for function metadata. */
            var WRAP_BIND_FLAG = 1,
                WRAP_BIND_KEY_FLAG = 2,
                WRAP_CURRY_BOUND_FLAG = 4,
                WRAP_CURRY_FLAG = 8,
                WRAP_CURRY_RIGHT_FLAG = 16,
                WRAP_PARTIAL_FLAG = 32,
                WRAP_PARTIAL_RIGHT_FLAG = 64,
                WRAP_ARY_FLAG = 128,
                WRAP_REARG_FLAG = 256,
                WRAP_FLIP_FLAG = 512;

            /** Used as default options for `_.truncate`. */
            var DEFAULT_TRUNC_LENGTH = 30,
                DEFAULT_TRUNC_OMISSION = '...';

            /** Used to detect hot functions by number of calls within a span of milliseconds. */
            var HOT_COUNT = 800,
                HOT_SPAN = 16;

            /** Used to indicate the type of lazy iteratees. */
            var LAZY_FILTER_FLAG = 1,
                LAZY_MAP_FLAG = 2,
                LAZY_WHILE_FLAG = 3;

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0,
                MAX_SAFE_INTEGER = 9007199254740991,
                MAX_INTEGER = 1.7976931348623157e+308,
                NAN = 0 / 0;

            /** Used as references for the maximum length and index of an array. */
            var MAX_ARRAY_LENGTH = 4294967295,
                MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

            /** Used to associate wrap methods with their bit flags. */
            var wrapFlags = [
                ['ary', WRAP_ARY_FLAG],
                ['bind', WRAP_BIND_FLAG],
                ['bindKey', WRAP_BIND_KEY_FLAG],
                ['curry', WRAP_CURRY_FLAG],
                ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                ['flip', WRAP_FLIP_FLAG],
                ['partial', WRAP_PARTIAL_FLAG],
                ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                ['rearg', WRAP_REARG_FLAG]
            ];

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]',
                arrayTag = '[object Array]',
                asyncTag = '[object AsyncFunction]',
                boolTag = '[object Boolean]',
                dateTag = '[object Date]',
                domExcTag = '[object DOMException]',
                errorTag = '[object Error]',
                funcTag = '[object Function]',
                genTag = '[object GeneratorFunction]',
                mapTag = '[object Map]',
                numberTag = '[object Number]',
                nullTag = '[object Null]',
                objectTag = '[object Object]',
                promiseTag = '[object Promise]',
                proxyTag = '[object Proxy]',
                regexpTag = '[object RegExp]',
                setTag = '[object Set]',
                stringTag = '[object String]',
                symbolTag = '[object Symbol]',
                undefinedTag = '[object Undefined]',
                weakMapTag = '[object WeakMap]',
                weakSetTag = '[object WeakSet]';

            var arrayBufferTag = '[object ArrayBuffer]',
                dataViewTag = '[object DataView]',
                float32Tag = '[object Float32Array]',
                float64Tag = '[object Float64Array]',
                int8Tag = '[object Int8Array]',
                int16Tag = '[object Int16Array]',
                int32Tag = '[object Int32Array]',
                uint8Tag = '[object Uint8Array]',
                uint8ClampedTag = '[object Uint8ClampedArray]',
                uint16Tag = '[object Uint16Array]',
                uint32Tag = '[object Uint32Array]';

            /** Used to match empty string literals in compiled template source. */
            var reEmptyStringLeading = /\b__p \+= '';/g,
                reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

            /** Used to match HTML entities and HTML characters. */
            var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                reUnescapedHtml = /[&<>"']/g,
                reHasEscapedHtml = RegExp(reEscapedHtml.source),
                reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

            /** Used to match template delimiters. */
            var reEscape = /<%-([\s\S]+?)%>/g,
                reEvaluate = /<%([\s\S]+?)%>/g,
                reInterpolate = /<%=([\s\S]+?)%>/g;

            /** Used to match property names within property paths. */
            var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                reIsPlainProp = /^\w*$/,
                reLeadingDot = /^\./,
                rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

            /**
             * Used to match `RegExp`
             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
             */
            var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                reHasRegExpChar = RegExp(reRegExpChar.source);

            /** Used to match leading and trailing whitespace. */
            var reTrim = /^\s+|\s+$/g,
                reTrimStart = /^\s+/,
                reTrimEnd = /\s+$/;

            /** Used to match wrap detail comments. */
            var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                reSplitDetails = /,? & /;

            /** Used to match words composed of alphanumeric characters. */
            var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

            /** Used to match backslashes in property paths. */
            var reEscapeChar = /\\(\\)?/g;

            /**
             * Used to match
             * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
             */
            var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

            /** Used to match `RegExp` flags from their coerced string values. */
            var reFlags = /\w*$/;

            /** Used to detect bad signed hexadecimal string values. */
            var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

            /** Used to detect binary string values. */
            var reIsBinary = /^0b[01]+$/i;

            /** Used to detect host constructors (Safari). */
            var reIsHostCtor = /^\[object .+?Constructor\]$/;

            /** Used to detect octal string values. */
            var reIsOctal = /^0o[0-7]+$/i;

            /** Used to detect unsigned integer values. */
            var reIsUint = /^(?:0|[1-9]\d*)$/;

            /** Used to match Latin Unicode letters (excluding mathematical operators). */
            var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

            /** Used to ensure capturing order of template delimiters. */
            var reNoMatch = /($^)/;

            /** Used to match unescaped characters in compiled string literals. */
            var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

            /** Used to compose unicode character classes. */
            var rsAstralRange = '\\ud800-\\udfff',
                rsComboMarksRange = '\\u0300-\\u036f',
                reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                rsComboSymbolsRange = '\\u20d0-\\u20ff',
                rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
                rsDingbatRange = '\\u2700-\\u27bf',
                rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                rsPunctuationRange = '\\u2000-\\u206f',
                rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                rsVarRange = '\\ufe0e\\ufe0f',
                rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

            /** Used to compose unicode capture groups. */
            var rsApos = "['\u2019]",
                rsAstral = '[' + rsAstralRange + ']',
                rsBreak = '[' + rsBreakRange + ']',
                rsCombo = '[' + rsComboRange + ']',
                rsDigits = '\\d+',
                rsDingbat = '[' + rsDingbatRange + ']',
                rsLower = '[' + rsLowerRange + ']',
                rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
                rsFitz = '\\ud83c[\\udffb-\\udfff]',
                rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                rsNonAstral = '[^' + rsAstralRange + ']',
                rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                rsUpper = '[' + rsUpperRange + ']',
                rsZWJ = '\\u200d';

            /** Used to compose unicode regexes. */
            var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                reOptMod = rsModifier + '?',
                rsOptVar = '[' + rsVarRange + ']?',
                rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
                rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
                rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
                rsSeq = rsOptVar + reOptMod + rsOptJoin,
                rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
                rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

            /** Used to match apostrophes. */
            var reApos = RegExp(rsApos, 'g');

            /**
             * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
             * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
             */
            var reComboMark = RegExp(rsCombo, 'g');

            /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
            var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

            /** Used to match complex or compound words. */
            var reUnicodeWord = RegExp([
                rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                rsUpper + '+' + rsOptContrUpper,
                rsOrdUpper,
                rsOrdLower,
                rsDigits,
                rsEmoji
            ].join('|'), 'g');

            /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
            var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

            /** Used to detect strings that need a more robust regexp to match words. */
            var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

            /** Used to assign default `context` object properties. */
            var contextProps = [
                'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
                'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
                'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
                'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
                '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
            ];

            /** Used to make template sourceURLs easier to identify. */
            var templateCounter = -1;

            /** Used to identify `toStringTag` values of typed arrays. */
            var typedArrayTags = {};
            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
                typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                        typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                            typedArrayTags[uint32Tag] = true;
            typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
                typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                        typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                            typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                                typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                                    typedArrayTags[setTag] = typedArrayTags[stringTag] =
                                        typedArrayTags[weakMapTag] = false;

            /** Used to identify `toStringTag` values supported by `_.clone`. */
            var cloneableTags = {};
            cloneableTags[argsTag] = cloneableTags[arrayTag] =
                cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
                    cloneableTags[boolTag] = cloneableTags[dateTag] =
                        cloneableTags[float32Tag] = cloneableTags[float64Tag] =
                            cloneableTags[int8Tag] = cloneableTags[int16Tag] =
                                cloneableTags[int32Tag] = cloneableTags[mapTag] =
                                    cloneableTags[numberTag] = cloneableTags[objectTag] =
                                        cloneableTags[regexpTag] = cloneableTags[setTag] =
                                            cloneableTags[stringTag] = cloneableTags[symbolTag] =
                                                cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                                                    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
            cloneableTags[errorTag] = cloneableTags[funcTag] =
                cloneableTags[weakMapTag] = false;

            /** Used to map Latin Unicode letters to basic Latin letters. */
            var deburredLetters = {
                // Latin-1 Supplement block.
                '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
                '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
                '\xc7': 'C',  '\xe7': 'c',
                '\xd0': 'D',  '\xf0': 'd',
                '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
                '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
                '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
                '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
                '\xd1': 'N',  '\xf1': 'n',
                '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
                '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
                '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
                '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
                '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
                '\xc6': 'Ae', '\xe6': 'ae',
                '\xde': 'Th', '\xfe': 'th',
                '\xdf': 'ss',
                // Latin Extended-A block.
                '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
                '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
                '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
                '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
                '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
                '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
                '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
                '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
                '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
                '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
                '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
                '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
                '\u0134': 'J',  '\u0135': 'j',
                '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
                '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
                '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
                '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
                '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
                '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
                '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
                '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
                '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
                '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
                '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
                '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
                '\u0163': 't',  '\u0165': 't', '\u0167': 't',
                '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
                '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
                '\u0174': 'W',  '\u0175': 'w',
                '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
                '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
                '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
                '\u0132': 'IJ', '\u0133': 'ij',
                '\u0152': 'Oe', '\u0153': 'oe',
                '\u0149': "'n", '\u017f': 's'
            };

            /** Used to map characters to HTML entities. */
            var htmlEscapes = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#39;'
            };

            /** Used to map HTML entities to characters. */
            var htmlUnescapes = {
                '&amp;': '&',
                '&lt;': '<',
                '&gt;': '>',
                '&quot;': '"',
                '&#39;': "'"
            };

            /** Used to escape characters for inclusion in compiled string literals. */
            var stringEscapes = {
                '\\': '\\',
                "'": "'",
                '\n': 'n',
                '\r': 'r',
                '\u2028': 'u2028',
                '\u2029': 'u2029'
            };

            /** Built-in method references without a dependency on `root`. */
            var freeParseFloat = parseFloat,
                freeParseInt = parseInt;

            /** Detect free variable `global` from Node.js. */
            var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

            /** Detect free variable `self`. */
            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

            /** Used as a reference to the global object. */
            var root = freeGlobal || freeSelf || Function('return this')();

            /** Detect free variable `exports`. */
            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Detect free variable `process` from Node.js. */
            var freeProcess = moduleExports && freeGlobal.process;

            /** Used to access faster Node.js helpers. */
            var nodeUtil = (function() {
                try {
                    return freeProcess && freeProcess.binding && freeProcess.binding('util');
                } catch (e) {}
            }());

            /* Node.js helper references. */
            var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                nodeIsDate = nodeUtil && nodeUtil.isDate,
                nodeIsMap = nodeUtil && nodeUtil.isMap,
                nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                nodeIsSet = nodeUtil && nodeUtil.isSet,
                nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

            /*--------------------------------------------------------------------------*/

            /**
             * Adds the key-value `pair` to `map`.
             *
             * @private
             * @param {Object} map The map to modify.
             * @param {Array} pair The key-value pair to add.
             * @returns {Object} Returns `map`.
             */
            function addMapEntry(map, pair) {
                // Don't return `map.set` because it's not chainable in IE 11.
                map.set(pair[0], pair[1]);
                return map;
            }

            /**
             * Adds `value` to `set`.
             *
             * @private
             * @param {Object} set The set to modify.
             * @param {*} value The value to add.
             * @returns {Object} Returns `set`.
             */
            function addSetEntry(set, value) {
                // Don't return `set.add` because it's not chainable in IE 11.
                set.add(value);
                return set;
            }

            /**
             * A faster alternative to `Function#apply`, this function invokes `func`
             * with the `this` binding of `thisArg` and the arguments of `args`.
             *
             * @private
             * @param {Function} func The function to invoke.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} args The arguments to invoke `func` with.
             * @returns {*} Returns the result of `func`.
             */
            function apply(func, thisArg, args) {
                switch (args.length) {
                    case 0: return func.call(thisArg);
                    case 1: return func.call(thisArg, args[0]);
                    case 2: return func.call(thisArg, args[0], args[1]);
                    case 3: return func.call(thisArg, args[0], args[1], args[2]);
                }
                return func.apply(thisArg, args);
            }

            /**
             * A specialized version of `baseAggregator` for arrays.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function arrayAggregator(array, setter, iteratee, accumulator) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                    var value = array[index];
                    setter(accumulator, value, iteratee(value), array);
                }
                return accumulator;
            }

            /**
             * A specialized version of `_.forEach` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns `array`.
             */
            function arrayEach(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                    if (iteratee(array[index], index, array) === false) {
                        break;
                    }
                }
                return array;
            }

            /**
             * A specialized version of `_.forEachRight` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns `array`.
             */
            function arrayEachRight(array, iteratee) {
                var length = array == null ? 0 : array.length;

                while (length--) {
                    if (iteratee(array[length], length, array) === false) {
                        break;
                    }
                }
                return array;
            }

            /**
             * A specialized version of `_.every` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             */
            function arrayEvery(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                    if (!predicate(array[index], index, array)) {
                        return false;
                    }
                }
                return true;
            }

            /**
             * A specialized version of `_.filter` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function arrayFilter(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                        result[resIndex++] = value;
                    }
                }
                return result;
            }

            /**
             * A specialized version of `_.includes` for arrays without support for
             * specifying an index to search from.
             *
             * @private
             * @param {Array} [array] The array to inspect.
             * @param {*} target The value to search for.
             * @returns {boolean} Returns `true` if `target` is found, else `false`.
             */
            function arrayIncludes(array, value) {
                var length = array == null ? 0 : array.length;
                return !!length && baseIndexOf(array, value, 0) > -1;
            }

            /**
             * This function is like `arrayIncludes` except that it accepts a comparator.
             *
             * @private
             * @param {Array} [array] The array to inspect.
             * @param {*} target The value to search for.
             * @param {Function} comparator The comparator invoked per element.
             * @returns {boolean} Returns `true` if `target` is found, else `false`.
             */
            function arrayIncludesWith(array, value, comparator) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                    if (comparator(value, array[index])) {
                        return true;
                    }
                }
                return false;
            }

            /**
             * A specialized version of `_.map` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function arrayMap(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    result = Array(length);

                while (++index < length) {
                    result[index] = iteratee(array[index], index, array);
                }
                return result;
            }

            /**
             * Appends the elements of `values` to `array`.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to append.
             * @returns {Array} Returns `array`.
             */
            function arrayPush(array, values) {
                var index = -1,
                    length = values.length,
                    offset = array.length;

                while (++index < length) {
                    array[offset + index] = values[index];
                }
                return array;
            }

            /**
             * A specialized version of `_.reduce` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @param {boolean} [initAccum] Specify using the first element of `array` as
             *  the initial value.
             * @returns {*} Returns the accumulated value.
             */
            function arrayReduce(array, iteratee, accumulator, initAccum) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                if (initAccum && length) {
                    accumulator = array[++index];
                }
                while (++index < length) {
                    accumulator = iteratee(accumulator, array[index], index, array);
                }
                return accumulator;
            }

            /**
             * A specialized version of `_.reduceRight` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @param {boolean} [initAccum] Specify using the last element of `array` as
             *  the initial value.
             * @returns {*} Returns the accumulated value.
             */
            function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                var length = array == null ? 0 : array.length;
                if (initAccum && length) {
                    accumulator = array[--length];
                }
                while (length--) {
                    accumulator = iteratee(accumulator, array[length], length, array);
                }
                return accumulator;
            }

            /**
             * A specialized version of `_.some` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function arraySome(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                    if (predicate(array[index], index, array)) {
                        return true;
                    }
                }
                return false;
            }

            /**
             * Gets the size of an ASCII `string`.
             *
             * @private
             * @param {string} string The string inspect.
             * @returns {number} Returns the string size.
             */
            var asciiSize = baseProperty('length');

            /**
             * Converts an ASCII `string` to an array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the converted array.
             */
            function asciiToArray(string) {
                return string.split('');
            }

            /**
             * Splits an ASCII `string` into an array of its words.
             *
             * @private
             * @param {string} The string to inspect.
             * @returns {Array} Returns the words of `string`.
             */
            function asciiWords(string) {
                return string.match(reAsciiWord) || [];
            }

            /**
             * The base implementation of methods like `_.findKey` and `_.findLastKey`,
             * without support for iteratee shorthands, which iterates over `collection`
             * using `eachFunc`.
             *
             * @private
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} predicate The function invoked per iteration.
             * @param {Function} eachFunc The function to iterate over `collection`.
             * @returns {*} Returns the found element or its key, else `undefined`.
             */
            function baseFindKey(collection, predicate, eachFunc) {
                var result;
                eachFunc(collection, function(value, key, collection) {
                    if (predicate(value, key, collection)) {
                        result = key;
                        return false;
                    }
                });
                return result;
            }

            /**
             * The base implementation of `_.findIndex` and `_.findLastIndex` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} predicate The function invoked per iteration.
             * @param {number} fromIndex The index to search from.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function baseFindIndex(array, predicate, fromIndex, fromRight) {
                var length = array.length,
                    index = fromIndex + (fromRight ? 1 : -1);

                while ((fromRight ? index-- : ++index < length)) {
                    if (predicate(array[index], index, array)) {
                        return index;
                    }
                }
                return -1;
            }

            /**
             * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} fromIndex The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function baseIndexOf(array, value, fromIndex) {
                return value === value
                    ? strictIndexOf(array, value, fromIndex)
                    : baseFindIndex(array, baseIsNaN, fromIndex);
            }

            /**
             * This function is like `baseIndexOf` except that it accepts a comparator.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} fromIndex The index to search from.
             * @param {Function} comparator The comparator invoked per element.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function baseIndexOfWith(array, value, fromIndex, comparator) {
                var index = fromIndex - 1,
                    length = array.length;

                while (++index < length) {
                    if (comparator(array[index], value)) {
                        return index;
                    }
                }
                return -1;
            }

            /**
             * The base implementation of `_.isNaN` without support for number objects.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             */
            function baseIsNaN(value) {
                return value !== value;
            }

            /**
             * The base implementation of `_.mean` and `_.meanBy` without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {number} Returns the mean.
             */
            function baseMean(array, iteratee) {
                var length = array == null ? 0 : array.length;
                return length ? (baseSum(array, iteratee) / length) : NAN;
            }

            /**
             * The base implementation of `_.property` without support for deep paths.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function baseProperty(key) {
                return function(object) {
                    return object == null ? undefined : object[key];
                };
            }

            /**
             * The base implementation of `_.propertyOf` without support for deep paths.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyOf(object) {
                return function(key) {
                    return object == null ? undefined : object[key];
                };
            }

            /**
             * The base implementation of `_.reduce` and `_.reduceRight`, without support
             * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {*} accumulator The initial value.
             * @param {boolean} initAccum Specify using the first or last element of
             *  `collection` as the initial value.
             * @param {Function} eachFunc The function to iterate over `collection`.
             * @returns {*} Returns the accumulated value.
             */
            function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                eachFunc(collection, function(value, index, collection) {
                    accumulator = initAccum
                        ? (initAccum = false, value)
                        : iteratee(accumulator, value, index, collection);
                });
                return accumulator;
            }

            /**
             * The base implementation of `_.sortBy` which uses `comparer` to define the
             * sort order of `array` and replaces criteria objects with their corresponding
             * values.
             *
             * @private
             * @param {Array} array The array to sort.
             * @param {Function} comparer The function to define sort order.
             * @returns {Array} Returns `array`.
             */
            function baseSortBy(array, comparer) {
                var length = array.length;

                array.sort(comparer);
                while (length--) {
                    array[length] = array[length].value;
                }
                return array;
            }

            /**
             * The base implementation of `_.sum` and `_.sumBy` without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {number} Returns the sum.
             */
            function baseSum(array, iteratee) {
                var result,
                    index = -1,
                    length = array.length;

                while (++index < length) {
                    var current = iteratee(array[index]);
                    if (current !== undefined) {
                        result = result === undefined ? current : (result + current);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.times` without support for iteratee shorthands
             * or max array length checks.
             *
             * @private
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             */
            function baseTimes(n, iteratee) {
                var index = -1,
                    result = Array(n);

                while (++index < n) {
                    result[index] = iteratee(index);
                }
                return result;
            }

            /**
             * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
             * of key-value pairs for `object` corresponding to the property names of `props`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} props The property names to get values for.
             * @returns {Object} Returns the key-value pairs.
             */
            function baseToPairs(object, props) {
                return arrayMap(props, function(key) {
                    return [key, object[key]];
                });
            }

            /**
             * The base implementation of `_.unary` without support for storing metadata.
             *
             * @private
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             */
            function baseUnary(func) {
                return function(value) {
                    return func(value);
                };
            }

            /**
             * The base implementation of `_.values` and `_.valuesIn` which creates an
             * array of `object` property values corresponding to the property names
             * of `props`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} props The property names to get values for.
             * @returns {Object} Returns the array of property values.
             */
            function baseValues(object, props) {
                return arrayMap(props, function(key) {
                    return object[key];
                });
            }

            /**
             * Checks if a `cache` value for `key` exists.
             *
             * @private
             * @param {Object} cache The cache to query.
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function cacheHas(cache, key) {
                return cache.has(key);
            }

            /**
             * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
             * that is not found in the character symbols.
             *
             * @private
             * @param {Array} strSymbols The string symbols to inspect.
             * @param {Array} chrSymbols The character symbols to find.
             * @returns {number} Returns the index of the first unmatched string symbol.
             */
            function charsStartIndex(strSymbols, chrSymbols) {
                var index = -1,
                    length = strSymbols.length;

                while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                return index;
            }

            /**
             * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
             * that is not found in the character symbols.
             *
             * @private
             * @param {Array} strSymbols The string symbols to inspect.
             * @param {Array} chrSymbols The character symbols to find.
             * @returns {number} Returns the index of the last unmatched string symbol.
             */
            function charsEndIndex(strSymbols, chrSymbols) {
                var index = strSymbols.length;

                while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                return index;
            }

            /**
             * Gets the number of `placeholder` occurrences in `array`.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} placeholder The placeholder to search for.
             * @returns {number} Returns the placeholder count.
             */
            function countHolders(array, placeholder) {
                var length = array.length,
                    result = 0;

                while (length--) {
                    if (array[length] === placeholder) {
                        ++result;
                    }
                }
                return result;
            }

            /**
             * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
             * letters to basic Latin letters.
             *
             * @private
             * @param {string} letter The matched letter to deburr.
             * @returns {string} Returns the deburred letter.
             */
            var deburrLetter = basePropertyOf(deburredLetters);

            /**
             * Used by `_.escape` to convert characters to HTML entities.
             *
             * @private
             * @param {string} chr The matched character to escape.
             * @returns {string} Returns the escaped character.
             */
            var escapeHtmlChar = basePropertyOf(htmlEscapes);

            /**
             * Used by `_.template` to escape characters for inclusion in compiled string literals.
             *
             * @private
             * @param {string} chr The matched character to escape.
             * @returns {string} Returns the escaped character.
             */
            function escapeStringChar(chr) {
                return '\\' + stringEscapes[chr];
            }

            /**
             * Gets the value at `key` of `object`.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function getValue(object, key) {
                return object == null ? undefined : object[key];
            }

            /**
             * Checks if `string` contains Unicode symbols.
             *
             * @private
             * @param {string} string The string to inspect.
             * @returns {boolean} Returns `true` if a symbol is found, else `false`.
             */
            function hasUnicode(string) {
                return reHasUnicode.test(string);
            }

            /**
             * Checks if `string` contains a word composed of Unicode symbols.
             *
             * @private
             * @param {string} string The string to inspect.
             * @returns {boolean} Returns `true` if a word is found, else `false`.
             */
            function hasUnicodeWord(string) {
                return reHasUnicodeWord.test(string);
            }

            /**
             * Converts `iterator` to an array.
             *
             * @private
             * @param {Object} iterator The iterator to convert.
             * @returns {Array} Returns the converted array.
             */
            function iteratorToArray(iterator) {
                var data,
                    result = [];

                while (!(data = iterator.next()).done) {
                    result.push(data.value);
                }
                return result;
            }

            /**
             * Converts `map` to its key-value pairs.
             *
             * @private
             * @param {Object} map The map to convert.
             * @returns {Array} Returns the key-value pairs.
             */
            function mapToArray(map) {
                var index = -1,
                    result = Array(map.size);

                map.forEach(function(value, key) {
                    result[++index] = [key, value];
                });
                return result;
            }

            /**
             * Creates a unary function that invokes `func` with its argument transformed.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {Function} transform The argument transform.
             * @returns {Function} Returns the new function.
             */
            function overArg(func, transform) {
                return function(arg) {
                    return func(transform(arg));
                };
            }

            /**
             * Replaces all `placeholder` elements in `array` with an internal placeholder
             * and returns an array of their indexes.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {*} placeholder The placeholder to replace.
             * @returns {Array} Returns the new array of placeholder indexes.
             */
            function replaceHolders(array, placeholder) {
                var index = -1,
                    length = array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                    var value = array[index];
                    if (value === placeholder || value === PLACEHOLDER) {
                        array[index] = PLACEHOLDER;
                        result[resIndex++] = index;
                    }
                }
                return result;
            }

            /**
             * Converts `set` to an array of its values.
             *
             * @private
             * @param {Object} set The set to convert.
             * @returns {Array} Returns the values.
             */
            function setToArray(set) {
                var index = -1,
                    result = Array(set.size);

                set.forEach(function(value) {
                    result[++index] = value;
                });
                return result;
            }

            /**
             * Converts `set` to its value-value pairs.
             *
             * @private
             * @param {Object} set The set to convert.
             * @returns {Array} Returns the value-value pairs.
             */
            function setToPairs(set) {
                var index = -1,
                    result = Array(set.size);

                set.forEach(function(value) {
                    result[++index] = [value, value];
                });
                return result;
            }

            /**
             * A specialized version of `_.indexOf` which performs strict equality
             * comparisons of values, i.e. `===`.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} fromIndex The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function strictIndexOf(array, value, fromIndex) {
                var index = fromIndex - 1,
                    length = array.length;

                while (++index < length) {
                    if (array[index] === value) {
                        return index;
                    }
                }
                return -1;
            }

            /**
             * A specialized version of `_.lastIndexOf` which performs strict equality
             * comparisons of values, i.e. `===`.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} fromIndex The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function strictLastIndexOf(array, value, fromIndex) {
                var index = fromIndex + 1;
                while (index--) {
                    if (array[index] === value) {
                        return index;
                    }
                }
                return index;
            }

            /**
             * Gets the number of symbols in `string`.
             *
             * @private
             * @param {string} string The string to inspect.
             * @returns {number} Returns the string size.
             */
            function stringSize(string) {
                return hasUnicode(string)
                    ? unicodeSize(string)
                    : asciiSize(string);
            }

            /**
             * Converts `string` to an array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the converted array.
             */
            function stringToArray(string) {
                return hasUnicode(string)
                    ? unicodeToArray(string)
                    : asciiToArray(string);
            }

            /**
             * Used by `_.unescape` to convert HTML entities to characters.
             *
             * @private
             * @param {string} chr The matched character to unescape.
             * @returns {string} Returns the unescaped character.
             */
            var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

            /**
             * Gets the size of a Unicode `string`.
             *
             * @private
             * @param {string} string The string inspect.
             * @returns {number} Returns the string size.
             */
            function unicodeSize(string) {
                var result = reUnicode.lastIndex = 0;
                while (reUnicode.test(string)) {
                    ++result;
                }
                return result;
            }

            /**
             * Converts a Unicode `string` to an array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the converted array.
             */
            function unicodeToArray(string) {
                return string.match(reUnicode) || [];
            }

            /**
             * Splits a Unicode `string` into an array of its words.
             *
             * @private
             * @param {string} The string to inspect.
             * @returns {Array} Returns the words of `string`.
             */
            function unicodeWords(string) {
                return string.match(reUnicodeWord) || [];
            }

            /*--------------------------------------------------------------------------*/

            /**
             * Create a new pristine `lodash` function using the `context` object.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Util
             * @param {Object} [context=root] The context object.
             * @returns {Function} Returns a new `lodash` function.
             * @example
             *
             * _.mixin({ 'foo': _.constant('foo') });
             *
             * var lodash = _.runInContext();
             * lodash.mixin({ 'bar': lodash.constant('bar') });
             *
             * _.isFunction(_.foo);
             * // => true
             * _.isFunction(_.bar);
             * // => false
             *
             * lodash.isFunction(lodash.foo);
             * // => false
             * lodash.isFunction(lodash.bar);
             * // => true
             *
             * // Create a suped-up `defer` in Node.js.
             * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
             */
            var runInContext = (function runInContext(context) {
                context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

                /** Built-in constructor references. */
                var Array = context.Array,
                    Date = context.Date,
                    Error = context.Error,
                    Function = context.Function,
                    Math = context.Math,
                    Object = context.Object,
                    RegExp = context.RegExp,
                    String = context.String,
                    TypeError = context.TypeError;

                /** Used for built-in method references. */
                var arrayProto = Array.prototype,
                    funcProto = Function.prototype,
                    objectProto = Object.prototype;

                /** Used to detect overreaching core-js shims. */
                var coreJsData = context['__core-js_shared__'];

                /** Used to resolve the decompiled source of functions. */
                var funcToString = funcProto.toString;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Used to generate unique IDs. */
                var idCounter = 0;

                /** Used to detect methods masquerading as native. */
                var maskSrcKey = (function() {
                    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                    return uid ? ('Symbol(src)_1.' + uid) : '';
                }());

                /**
                 * Used to resolve the
                 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var nativeObjectToString = objectProto.toString;

                /** Used to infer the `Object` constructor. */
                var objectCtorString = funcToString.call(Object);

                /** Used to restore the original `_` reference in `_.noConflict`. */
                var oldDash = root._;

                /** Used to detect if a method is native. */
                var reIsNative = RegExp('^' +
                    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
                );

                /** Built-in value references. */
                var Buffer = moduleExports ? context.Buffer : undefined,
                    Symbol = context.Symbol,
                    Uint8Array = context.Uint8Array,
                    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                    getPrototype = overArg(Object.getPrototypeOf, Object),
                    objectCreate = Object.create,
                    propertyIsEnumerable = objectProto.propertyIsEnumerable,
                    splice = arrayProto.splice,
                    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
                    symIterator = Symbol ? Symbol.iterator : undefined,
                    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                var defineProperty = (function() {
                    try {
                        var func = getNative(Object, 'defineProperty');
                        func({}, '', {});
                        return func;
                    } catch (e) {}
                }());

                /** Mocked built-ins. */
                var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                    ctxNow = Date && Date.now !== root.Date.now && Date.now,
                    ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

                /* Built-in method references for those with the same name as other `lodash` methods. */
                var nativeCeil = Math.ceil,
                    nativeFloor = Math.floor,
                    nativeGetSymbols = Object.getOwnPropertySymbols,
                    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                    nativeIsFinite = context.isFinite,
                    nativeJoin = arrayProto.join,
                    nativeKeys = overArg(Object.keys, Object),
                    nativeMax = Math.max,
                    nativeMin = Math.min,
                    nativeNow = Date.now,
                    nativeParseInt = context.parseInt,
                    nativeRandom = Math.random,
                    nativeReverse = arrayProto.reverse;

                /* Built-in method references that are verified to be native. */
                var DataView = getNative(context, 'DataView'),
                    Map = getNative(context, 'Map'),
                    Promise = getNative(context, 'Promise'),
                    Set = getNative(context, 'Set'),
                    WeakMap = getNative(context, 'WeakMap'),
                    nativeCreate = getNative(Object, 'create');

                /** Used to store function metadata. */
                var metaMap = WeakMap && new WeakMap;

                /** Used to lookup unminified function names. */
                var realNames = {};

                /** Used to detect maps, sets, and weakmaps. */
                var dataViewCtorString = toSource(DataView),
                    mapCtorString = toSource(Map),
                    promiseCtorString = toSource(Promise),
                    setCtorString = toSource(Set),
                    weakMapCtorString = toSource(WeakMap);

                /** Used to convert symbols to primitives and strings. */
                var symbolProto = Symbol ? Symbol.prototype : undefined,
                    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                    symbolToString = symbolProto ? symbolProto.toString : undefined;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` object which wraps `value` to enable implicit method
                 * chain sequences. Methods that operate on and return arrays, collections,
                 * and functions can be chained together. Methods that retrieve a single value
                 * or may return a primitive value will automatically end the chain sequence
                 * and return the unwrapped value. Otherwise, the value must be unwrapped
                 * with `_#value`.
                 *
                 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                 * enabled using `_.chain`.
                 *
                 * The execution of chained methods is lazy, that is, it's deferred until
                 * `_#value` is implicitly or explicitly called.
                 *
                 * Lazy evaluation allows several methods to support shortcut fusion.
                 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                 * the creation of intermediate arrays and can greatly reduce the number of
                 * iteratee executions. Sections of a chain sequence qualify for shortcut
                 * fusion if the section is applied to an array and iteratees accept only
                 * one argument. The heuristic for whether a section qualifies for shortcut
                 * fusion is subject to change.
                 *
                 * Chaining is supported in custom builds as long as the `_#value` method is
                 * directly or indirectly included in the build.
                 *
                 * In addition to lodash methods, wrappers have `Array` and `String` methods.
                 *
                 * The wrapper `Array` methods are:
                 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                 *
                 * The wrapper `String` methods are:
                 * `replace` and `split`
                 *
                 * The wrapper methods that support shortcut fusion are:
                 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                 *
                 * The chainable wrapper methods are:
                 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                 * `zipObject`, `zipObjectDeep`, and `zipWith`
                 *
                 * The wrapper methods that are **not** chainable by default are:
                 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                 * `upperFirst`, `value`, and `words`
                 *
                 * @name _
                 * @constructor
                 * @category Seq
                 * @param {*} value The value to wrap in a `lodash` instance.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
     *   return n * n;
     * }
                 *
                 * var wrapped = _([1, 2, 3]);
                 *
                 * // Returns an unwrapped value.
                 * wrapped.reduce(_.add);
                 * // => 6
                 *
                 * // Returns a wrapped value.
                 * var squares = wrapped.map(square);
                 *
                 * _.isArray(squares);
                 * // => false
                 *
                 * _.isArray(squares.value());
                 * // => true
                 */
                function lodash(value) {
                    if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                        if (value instanceof LodashWrapper) {
                            return value;
                        }
                        if (hasOwnProperty.call(value, '__wrapped__')) {
                            return wrapperClone(value);
                        }
                    }
                    return new LodashWrapper(value);
                }

                /**
                 * The base implementation of `_.create` without support for assigning
                 * properties to the created object.
                 *
                 * @private
                 * @param {Object} proto The object to inherit from.
                 * @returns {Object} Returns the new object.
                 */
                var baseCreate = (function() {
                    function object() {}
                    return function(proto) {
                        if (!isObject(proto)) {
                            return {};
                        }
                        if (objectCreate) {
                            return objectCreate(proto);
                        }
                        object.prototype = proto;
                        var result = new object;
                        object.prototype = undefined;
                        return result;
                    };
                }());

                /**
                 * The function whose prototype chain sequence wrappers inherit from.
                 *
                 * @private
                 */
                function baseLodash() {
                    // No operation performed.
                }

                /**
                 * The base constructor for creating `lodash` wrapper objects.
                 *
                 * @private
                 * @param {*} value The value to wrap.
                 * @param {boolean} [chainAll] Enable explicit method chain sequences.
                 */
                function LodashWrapper(value, chainAll) {
                    this.__wrapped__ = value;
                    this.__actions__ = [];
                    this.__chain__ = !!chainAll;
                    this.__index__ = 0;
                    this.__values__ = undefined;
                }

                /**
                 * By default, the template delimiters used by lodash are like those in
                 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                 * following template settings to use alternative delimiters.
                 *
                 * @static
                 * @memberOf _
                 * @type {Object}
                 */
                lodash.templateSettings = {

                    /**
                     * Used to detect `data` property values to be HTML-escaped.
                     *
                     * @memberOf _.templateSettings
                     * @type {RegExp}
                     */
                    'escape': reEscape,

                    /**
                     * Used to detect code to be evaluated.
                     *
                     * @memberOf _.templateSettings
                     * @type {RegExp}
                     */
                    'evaluate': reEvaluate,

                    /**
                     * Used to detect `data` property values to inject.
                     *
                     * @memberOf _.templateSettings
                     * @type {RegExp}
                     */
                    'interpolate': reInterpolate,

                    /**
                     * Used to reference the data object in the template text.
                     *
                     * @memberOf _.templateSettings
                     * @type {string}
                     */
                    'variable': '',

                    /**
                     * Used to import variables into the compiled template.
                     *
                     * @memberOf _.templateSettings
                     * @type {Object}
                     */
                    'imports': {

                        /**
                         * A reference to the `lodash` function.
                         *
                         * @memberOf _.templateSettings.imports
                         * @type {Function}
                         */
                        '_': lodash
                    }
                };

                // Ensure wrappers are instances of `baseLodash`.
                lodash.prototype = baseLodash.prototype;
                lodash.prototype.constructor = lodash;

                LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                LodashWrapper.prototype.constructor = LodashWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                 *
                 * @private
                 * @constructor
                 * @param {*} value The value to wrap.
                 */
                function LazyWrapper(value) {
                    this.__wrapped__ = value;
                    this.__actions__ = [];
                    this.__dir__ = 1;
                    this.__filtered__ = false;
                    this.__iteratees__ = [];
                    this.__takeCount__ = MAX_ARRAY_LENGTH;
                    this.__views__ = [];
                }

                /**
                 * Creates a clone of the lazy wrapper object.
                 *
                 * @private
                 * @name clone
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the cloned `LazyWrapper` object.
                 */
                function lazyClone() {
                    var result = new LazyWrapper(this.__wrapped__);
                    result.__actions__ = copyArray(this.__actions__);
                    result.__dir__ = this.__dir__;
                    result.__filtered__ = this.__filtered__;
                    result.__iteratees__ = copyArray(this.__iteratees__);
                    result.__takeCount__ = this.__takeCount__;
                    result.__views__ = copyArray(this.__views__);
                    return result;
                }

                /**
                 * Reverses the direction of lazy iteration.
                 *
                 * @private
                 * @name reverse
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the new reversed `LazyWrapper` object.
                 */
                function lazyReverse() {
                    if (this.__filtered__) {
                        var result = new LazyWrapper(this);
                        result.__dir__ = -1;
                        result.__filtered__ = true;
                    } else {
                        result = this.clone();
                        result.__dir__ *= -1;
                    }
                    return result;
                }

                /**
                 * Extracts the unwrapped value from its lazy wrapper.
                 *
                 * @private
                 * @name value
                 * @memberOf LazyWrapper
                 * @returns {*} Returns the unwrapped value.
                 */
                function lazyValue() {
                    var array = this.__wrapped__.value(),
                        dir = this.__dir__,
                        isArr = isArray(array),
                        isRight = dir < 0,
                        arrLength = isArr ? array.length : 0,
                        view = getView(0, arrLength, this.__views__),
                        start = view.start,
                        end = view.end,
                        length = end - start,
                        index = isRight ? end : (start - 1),
                        iteratees = this.__iteratees__,
                        iterLength = iteratees.length,
                        resIndex = 0,
                        takeCount = nativeMin(length, this.__takeCount__);

                    if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                        return baseWrapperValue(array, this.__actions__);
                    }
                    var result = [];

                    outer:
                        while (length-- && resIndex < takeCount) {
                            index += dir;

                            var iterIndex = -1,
                                value = array[index];

                            while (++iterIndex < iterLength) {
                                var data = iteratees[iterIndex],
                                    iteratee = data.iteratee,
                                    type = data.type,
                                    computed = iteratee(value);

                                if (type == LAZY_MAP_FLAG) {
                                    value = computed;
                                } else if (!computed) {
                                    if (type == LAZY_FILTER_FLAG) {
                                        continue outer;
                                    } else {
                                        break outer;
                                    }
                                }
                            }
                            result[resIndex++] = value;
                        }
                    return result;
                }

                // Ensure `LazyWrapper` is an instance of `baseLodash`.
                LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                LazyWrapper.prototype.constructor = LazyWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a hash object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Hash(entries) {
                    var index = -1,
                        length = entries == null ? 0 : entries.length;

                    this.clear();
                    while (++index < length) {
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }

                /**
                 * Removes all key-value entries from the hash.
                 *
                 * @private
                 * @name clear
                 * @memberOf Hash
                 */
                function hashClear() {
                    this.__data__ = nativeCreate ? nativeCreate(null) : {};
                    this.size = 0;
                }

                /**
                 * Removes `key` and its value from the hash.
                 *
                 * @private
                 * @name delete
                 * @memberOf Hash
                 * @param {Object} hash The hash to modify.
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function hashDelete(key) {
                    var result = this.has(key) && delete this.__data__[key];
                    this.size -= result ? 1 : 0;
                    return result;
                }

                /**
                 * Gets the hash value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Hash
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function hashGet(key) {
                    var data = this.__data__;
                    if (nativeCreate) {
                        var result = data[key];
                        return result === HASH_UNDEFINED ? undefined : result;
                    }
                    return hasOwnProperty.call(data, key) ? data[key] : undefined;
                }

                /**
                 * Checks if a hash value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Hash
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function hashHas(key) {
                    var data = this.__data__;
                    return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
                }

                /**
                 * Sets the hash `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Hash
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the hash instance.
                 */
                function hashSet(key, value) {
                    var data = this.__data__;
                    this.size += this.has(key) ? 0 : 1;
                    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                    return this;
                }

                // Add methods to `Hash`.
                Hash.prototype.clear = hashClear;
                Hash.prototype['delete'] = hashDelete;
                Hash.prototype.get = hashGet;
                Hash.prototype.has = hashHas;
                Hash.prototype.set = hashSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an list cache object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function ListCache(entries) {
                    var index = -1,
                        length = entries == null ? 0 : entries.length;

                    this.clear();
                    while (++index < length) {
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }

                /**
                 * Removes all key-value entries from the list cache.
                 *
                 * @private
                 * @name clear
                 * @memberOf ListCache
                 */
                function listCacheClear() {
                    this.__data__ = [];
                    this.size = 0;
                }

                /**
                 * Removes `key` and its value from the list cache.
                 *
                 * @private
                 * @name delete
                 * @memberOf ListCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function listCacheDelete(key) {
                    var data = this.__data__,
                        index = assocIndexOf(data, key);

                    if (index < 0) {
                        return false;
                    }
                    var lastIndex = data.length - 1;
                    if (index == lastIndex) {
                        data.pop();
                    } else {
                        splice.call(data, index, 1);
                    }
                    --this.size;
                    return true;
                }

                /**
                 * Gets the list cache value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf ListCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function listCacheGet(key) {
                    var data = this.__data__,
                        index = assocIndexOf(data, key);

                    return index < 0 ? undefined : data[index][1];
                }

                /**
                 * Checks if a list cache value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf ListCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function listCacheHas(key) {
                    return assocIndexOf(this.__data__, key) > -1;
                }

                /**
                 * Sets the list cache `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf ListCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the list cache instance.
                 */
                function listCacheSet(key, value) {
                    var data = this.__data__,
                        index = assocIndexOf(data, key);

                    if (index < 0) {
                        ++this.size;
                        data.push([key, value]);
                    } else {
                        data[index][1] = value;
                    }
                    return this;
                }

                // Add methods to `ListCache`.
                ListCache.prototype.clear = listCacheClear;
                ListCache.prototype['delete'] = listCacheDelete;
                ListCache.prototype.get = listCacheGet;
                ListCache.prototype.has = listCacheHas;
                ListCache.prototype.set = listCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a map cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function MapCache(entries) {
                    var index = -1,
                        length = entries == null ? 0 : entries.length;

                    this.clear();
                    while (++index < length) {
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }

                /**
                 * Removes all key-value entries from the map.
                 *
                 * @private
                 * @name clear
                 * @memberOf MapCache
                 */
                function mapCacheClear() {
                    this.size = 0;
                    this.__data__ = {
                        'hash': new Hash,
                        'map': new (Map || ListCache),
                        'string': new Hash
                    };
                }

                /**
                 * Removes `key` and its value from the map.
                 *
                 * @private
                 * @name delete
                 * @memberOf MapCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function mapCacheDelete(key) {
                    var result = getMapData(this, key)['delete'](key);
                    this.size -= result ? 1 : 0;
                    return result;
                }

                /**
                 * Gets the map value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf MapCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function mapCacheGet(key) {
                    return getMapData(this, key).get(key);
                }

                /**
                 * Checks if a map value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf MapCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function mapCacheHas(key) {
                    return getMapData(this, key).has(key);
                }

                /**
                 * Sets the map `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf MapCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the map cache instance.
                 */
                function mapCacheSet(key, value) {
                    var data = getMapData(this, key),
                        size = data.size;

                    data.set(key, value);
                    this.size += data.size == size ? 0 : 1;
                    return this;
                }

                // Add methods to `MapCache`.
                MapCache.prototype.clear = mapCacheClear;
                MapCache.prototype['delete'] = mapCacheDelete;
                MapCache.prototype.get = mapCacheGet;
                MapCache.prototype.has = mapCacheHas;
                MapCache.prototype.set = mapCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 *
                 * Creates an array cache object to store unique values.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [values] The values to cache.
                 */
                function SetCache(values) {
                    var index = -1,
                        length = values == null ? 0 : values.length;

                    this.__data__ = new MapCache;
                    while (++index < length) {
                        this.add(values[index]);
                    }
                }

                /**
                 * Adds `value` to the array cache.
                 *
                 * @private
                 * @name add
                 * @memberOf SetCache
                 * @alias push
                 * @param {*} value The value to cache.
                 * @returns {Object} Returns the cache instance.
                 */
                function setCacheAdd(value) {
                    this.__data__.set(value, HASH_UNDEFINED);
                    return this;
                }

                /**
                 * Checks if `value` is in the array cache.
                 *
                 * @private
                 * @name has
                 * @memberOf SetCache
                 * @param {*} value The value to search for.
                 * @returns {number} Returns `true` if `value` is found, else `false`.
                 */
                function setCacheHas(value) {
                    return this.__data__.has(value);
                }

                // Add methods to `SetCache`.
                SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                SetCache.prototype.has = setCacheHas;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a stack cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Stack(entries) {
                    var data = this.__data__ = new ListCache(entries);
                    this.size = data.size;
                }

                /**
                 * Removes all key-value entries from the stack.
                 *
                 * @private
                 * @name clear
                 * @memberOf Stack
                 */
                function stackClear() {
                    this.__data__ = new ListCache;
                    this.size = 0;
                }

                /**
                 * Removes `key` and its value from the stack.
                 *
                 * @private
                 * @name delete
                 * @memberOf Stack
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function stackDelete(key) {
                    var data = this.__data__,
                        result = data['delete'](key);

                    this.size = data.size;
                    return result;
                }

                /**
                 * Gets the stack value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Stack
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function stackGet(key) {
                    return this.__data__.get(key);
                }

                /**
                 * Checks if a stack value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Stack
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function stackHas(key) {
                    return this.__data__.has(key);
                }

                /**
                 * Sets the stack `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Stack
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the stack cache instance.
                 */
                function stackSet(key, value) {
                    var data = this.__data__;
                    if (data instanceof ListCache) {
                        var pairs = data.__data__;
                        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                            pairs.push([key, value]);
                            this.size = ++data.size;
                            return this;
                        }
                        data = this.__data__ = new MapCache(pairs);
                    }
                    data.set(key, value);
                    this.size = data.size;
                    return this;
                }

                // Add methods to `Stack`.
                Stack.prototype.clear = stackClear;
                Stack.prototype['delete'] = stackDelete;
                Stack.prototype.get = stackGet;
                Stack.prototype.has = stackHas;
                Stack.prototype.set = stackSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of the enumerable property names of the array-like `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @param {boolean} inherited Specify returning inherited property names.
                 * @returns {Array} Returns the array of property names.
                 */
                function arrayLikeKeys(value, inherited) {
                    var isArr = isArray(value),
                        isArg = !isArr && isArguments(value),
                        isBuff = !isArr && !isArg && isBuffer(value),
                        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                        skipIndexes = isArr || isArg || isBuff || isType,
                        result = skipIndexes ? baseTimes(value.length, String) : [],
                        length = result.length;

                    for (var key in value) {
                        if ((inherited || hasOwnProperty.call(value, key)) &&
                            !(skipIndexes && (
                                // Safari 9 has enumerable `arguments.length` in strict mode.
                                key == 'length' ||
                                // Node.js 0.10 has enumerable non-index properties on buffers.
                                (isBuff && (key == 'offset' || key == 'parent')) ||
                                // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                                // Skip index properties.
                                isIndex(key, length)
                            ))) {
                            result.push(key);
                        }
                    }
                    return result;
                }

                /**
                 * A specialized version of `_.sample` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @returns {*} Returns the random element.
                 */
                function arraySample(array) {
                    var length = array.length;
                    return length ? array[baseRandom(0, length - 1)] : undefined;
                }

                /**
                 * A specialized version of `_.sampleSize` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function arraySampleSize(array, n) {
                    return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                }

                /**
                 * A specialized version of `_.shuffle` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function arrayShuffle(array) {
                    return shuffleSelf(copyArray(array));
                }

                /**
                 * This function is like `assignValue` except that it doesn't assign
                 * `undefined` values.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignMergeValue(object, key, value) {
                    if ((value !== undefined && !eq(object[key], value)) ||
                        (value === undefined && !(key in object))) {
                        baseAssignValue(object, key, value);
                    }
                }

                /**
                 * Assigns `value` to `key` of `object` if the existing value is not equivalent
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignValue(object, key, value) {
                    var objValue = object[key];
                    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                        (value === undefined && !(key in object))) {
                        baseAssignValue(object, key, value);
                    }
                }

                /**
                 * Gets the index at which the `key` is found in `array` of key-value pairs.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} key The key to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function assocIndexOf(array, key) {
                    var length = array.length;
                    while (length--) {
                        if (eq(array[length][0], key)) {
                            return length;
                        }
                    }
                    return -1;
                }

                /**
                 * Aggregates elements of `collection` on `accumulator` with keys transformed
                 * by `iteratee` and values set by `setter`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform keys.
                 * @param {Object} accumulator The initial aggregated object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseAggregator(collection, setter, iteratee, accumulator) {
                    baseEach(collection, function(value, key, collection) {
                        setter(accumulator, value, iteratee(value), collection);
                    });
                    return accumulator;
                }

                /**
                 * The base implementation of `_.assign` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssign(object, source) {
                    return object && copyObject(source, keys(source), object);
                }

                /**
                 * The base implementation of `_.assignIn` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssignIn(object, source) {
                    return object && copyObject(source, keysIn(source), object);
                }

                /**
                 * The base implementation of `assignValue` and `assignMergeValue` without
                 * value checks.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function baseAssignValue(object, key, value) {
                    if (key == '__proto__' && defineProperty) {
                        defineProperty(object, key, {
                            'configurable': true,
                            'enumerable': true,
                            'value': value,
                            'writable': true
                        });
                    } else {
                        object[key] = value;
                    }
                }

                /**
                 * The base implementation of `_.at` without support for individual paths.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Array} Returns the picked elements.
                 */
                function baseAt(object, paths) {
                    var index = -1,
                        length = paths.length,
                        result = Array(length),
                        skip = object == null;

                    while (++index < length) {
                        result[index] = skip ? undefined : get(object, paths[index]);
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.clamp` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 */
                function baseClamp(number, lower, upper) {
                    if (number === number) {
                        if (upper !== undefined) {
                            number = number <= upper ? number : upper;
                        }
                        if (lower !== undefined) {
                            number = number >= lower ? number : lower;
                        }
                    }
                    return number;
                }

                /**
                 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                 * traversed objects.
                 *
                 * @private
                 * @param {*} value The value to clone.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Deep clone
                 *  2 - Flatten inherited properties
                 *  4 - Clone symbols
                 * @param {Function} [customizer] The function to customize cloning.
                 * @param {string} [key] The key of `value`.
                 * @param {Object} [object] The parent object of `value`.
                 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                 * @returns {*} Returns the cloned value.
                 */
                function baseClone(value, bitmask, customizer, key, object, stack) {
                    var result,
                        isDeep = bitmask & CLONE_DEEP_FLAG,
                        isFlat = bitmask & CLONE_FLAT_FLAG,
                        isFull = bitmask & CLONE_SYMBOLS_FLAG;

                    if (customizer) {
                        result = object ? customizer(value, key, object, stack) : customizer(value);
                    }
                    if (result !== undefined) {
                        return result;
                    }
                    if (!isObject(value)) {
                        return value;
                    }
                    var isArr = isArray(value);
                    if (isArr) {
                        result = initCloneArray(value);
                        if (!isDeep) {
                            return copyArray(value, result);
                        }
                    } else {
                        var tag = getTag(value),
                            isFunc = tag == funcTag || tag == genTag;

                        if (isBuffer(value)) {
                            return cloneBuffer(value, isDeep);
                        }
                        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                            result = (isFlat || isFunc) ? {} : initCloneObject(value);
                            if (!isDeep) {
                                return isFlat
                                    ? copySymbolsIn(value, baseAssignIn(result, value))
                                    : copySymbols(value, baseAssign(result, value));
                            }
                        } else {
                            if (!cloneableTags[tag]) {
                                return object ? value : {};
                            }
                            result = initCloneByTag(value, tag, baseClone, isDeep);
                        }
                    }
                    // Check for circular references and return its corresponding clone.
                    stack || (stack = new Stack);
                    var stacked = stack.get(value);
                    if (stacked) {
                        return stacked;
                    }
                    stack.set(value, result);

                    var keysFunc = isFull
                        ? (isFlat ? getAllKeysIn : getAllKeys)
                        : (isFlat ? keysIn : keys);

                    var props = isArr ? undefined : keysFunc(value);
                    arrayEach(props || value, function(subValue, key) {
                        if (props) {
                            key = subValue;
                            subValue = value[key];
                        }
                        // Recursively populate clone (susceptible to call stack limits).
                        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                    });
                    return result;
                }

                /**
                 * The base implementation of `_.conforms` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseConforms(source) {
                    var props = keys(source);
                    return function(object) {
                        return baseConformsTo(object, source, props);
                    };
                }

                /**
                 * The base implementation of `_.conformsTo` which accepts `props` to check.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 */
                function baseConformsTo(object, source, props) {
                    var length = props.length;
                    if (object == null) {
                        return !length;
                    }
                    object = Object(object);
                    while (length--) {
                        var key = props[length],
                            predicate = source[key],
                            value = object[key];

                        if ((value === undefined && !(key in object)) || !predicate(value)) {
                            return false;
                        }
                    }
                    return true;
                }

                /**
                 * The base implementation of `_.delay` and `_.defer` which accepts `args`
                 * to provide to `func`.
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {Array} args The arguments to provide to `func`.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                function baseDelay(func, wait, args) {
                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return setTimeout(function() { func.apply(undefined, args); }, wait);
                }

                /**
                 * The base implementation of methods like `_.difference` without support
                 * for excluding multiple arrays or iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Array} values The values to exclude.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 */
                function baseDifference(array, values, iteratee, comparator) {
                    var index = -1,
                        includes = arrayIncludes,
                        isCommon = true,
                        length = array.length,
                        result = [],
                        valuesLength = values.length;

                    if (!length) {
                        return result;
                    }
                    if (iteratee) {
                        values = arrayMap(values, baseUnary(iteratee));
                    }
                    if (comparator) {
                        includes = arrayIncludesWith;
                        isCommon = false;
                    }
                    else if (values.length >= LARGE_ARRAY_SIZE) {
                        includes = cacheHas;
                        isCommon = false;
                        values = new SetCache(values);
                    }
                    outer:
                        while (++index < length) {
                            var value = array[index],
                                computed = iteratee == null ? value : iteratee(value);

                            value = (comparator || value !== 0) ? value : 0;
                            if (isCommon && computed === computed) {
                                var valuesIndex = valuesLength;
                                while (valuesIndex--) {
                                    if (values[valuesIndex] === computed) {
                                        continue outer;
                                    }
                                }
                                result.push(value);
                            }
                            else if (!includes(values, computed, comparator)) {
                                result.push(value);
                            }
                        }
                    return result;
                }

                /**
                 * The base implementation of `_.forEach` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEach = createBaseEach(baseForOwn);

                /**
                 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEachRight = createBaseEach(baseForOwnRight, true);

                /**
                 * The base implementation of `_.every` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`
                 */
                function baseEvery(collection, predicate) {
                    var result = true;
                    baseEach(collection, function(value, index, collection) {
                        result = !!predicate(value, index, collection);
                        return result;
                    });
                    return result;
                }

                /**
                 * The base implementation of methods like `_.max` and `_.min` which accepts a
                 * `comparator` to determine the extremum value.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The iteratee invoked per iteration.
                 * @param {Function} comparator The comparator used to compare values.
                 * @returns {*} Returns the extremum value.
                 */
                function baseExtremum(array, iteratee, comparator) {
                    var index = -1,
                        length = array.length;

                    while (++index < length) {
                        var value = array[index],
                            current = iteratee(value);

                        if (current != null && (computed === undefined
                                    ? (current === current && !isSymbol(current))
                                    : comparator(current, computed)
                            )) {
                            var computed = current,
                                result = value;
                        }
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.fill` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 */
                function baseFill(array, value, start, end) {
                    var length = array.length;

                    start = toInteger(start);
                    if (start < 0) {
                        start = -start > length ? 0 : (length + start);
                    }
                    end = (end === undefined || end > length) ? length : toInteger(end);
                    if (end < 0) {
                        end += length;
                    }
                    end = start > end ? 0 : toLength(end);
                    while (start < end) {
                        array[start++] = value;
                    }
                    return array;
                }

                /**
                 * The base implementation of `_.filter` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 */
                function baseFilter(collection, predicate) {
                    var result = [];
                    baseEach(collection, function(value, index, collection) {
                        if (predicate(value, index, collection)) {
                            result.push(value);
                        }
                    });
                    return result;
                }

                /**
                 * The base implementation of `_.flatten` with support for restricting flattening.
                 *
                 * @private
                 * @param {Array} array The array to flatten.
                 * @param {number} depth The maximum recursion depth.
                 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                 * @param {Array} [result=[]] The initial result value.
                 * @returns {Array} Returns the new flattened array.
                 */
                function baseFlatten(array, depth, predicate, isStrict, result) {
                    var index = -1,
                        length = array.length;

                    predicate || (predicate = isFlattenable);
                    result || (result = []);

                    while (++index < length) {
                        var value = array[index];
                        if (depth > 0 && predicate(value)) {
                            if (depth > 1) {
                                // Recursively flatten arrays (susceptible to call stack limits).
                                baseFlatten(value, depth - 1, predicate, isStrict, result);
                            } else {
                                arrayPush(result, value);
                            }
                        } else if (!isStrict) {
                            result[result.length] = value;
                        }
                    }
                    return result;
                }

                /**
                 * The base implementation of `baseForOwn` which iterates over `object`
                 * properties returned by `keysFunc` and invokes `iteratee` for each property.
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseFor = createBaseFor();

                /**
                 * This function is like `baseFor` except that it iterates over properties
                 * in the opposite order.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseForRight = createBaseFor(true);

                /**
                 * The base implementation of `_.forOwn` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwn(object, iteratee) {
                    return object && baseFor(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwnRight(object, iteratee) {
                    return object && baseForRight(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.functions` which creates an array of
                 * `object` function property names filtered from `props`.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Array} props The property names to filter.
                 * @returns {Array} Returns the function names.
                 */
                function baseFunctions(object, props) {
                    return arrayFilter(props, function(key) {
                        return isFunction(object[key]);
                    });
                }

                /**
                 * The base implementation of `_.get` without support for default values.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @returns {*} Returns the resolved value.
                 */
                function baseGet(object, path) {
                    path = castPath(path, object);

                    var index = 0,
                        length = path.length;

                    while (object != null && index < length) {
                        object = object[toKey(path[index++])];
                    }
                    return (index && index == length) ? object : undefined;
                }

                /**
                 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @param {Function} symbolsFunc The function to get the symbols of `object`.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                    var result = keysFunc(object);
                    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                }

                /**
                 * The base implementation of `getTag` without fallbacks for buggy environments.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                function baseGetTag(value) {
                    if (value == null) {
                        return value === undefined ? undefinedTag : nullTag;
                    }
                    return (symToStringTag && symToStringTag in Object(value))
                        ? getRawTag(value)
                        : objectToString(value);
                }

                /**
                 * The base implementation of `_.gt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 */
                function baseGt(value, other) {
                    return value > other;
                }

                /**
                 * The base implementation of `_.has` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHas(object, key) {
                    return object != null && hasOwnProperty.call(object, key);
                }

                /**
                 * The base implementation of `_.hasIn` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHasIn(object, key) {
                    return object != null && key in Object(object);
                }

                /**
                 * The base implementation of `_.inRange` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to check.
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 */
                function baseInRange(number, start, end) {
                    return number >= nativeMin(start, end) && number < nativeMax(start, end);
                }

                /**
                 * The base implementation of methods like `_.intersection`, without support
                 * for iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of shared values.
                 */
                function baseIntersection(arrays, iteratee, comparator) {
                    var includes = comparator ? arrayIncludesWith : arrayIncludes,
                        length = arrays[0].length,
                        othLength = arrays.length,
                        othIndex = othLength,
                        caches = Array(othLength),
                        maxLength = Infinity,
                        result = [];

                    while (othIndex--) {
                        var array = arrays[othIndex];
                        if (othIndex && iteratee) {
                            array = arrayMap(array, baseUnary(iteratee));
                        }
                        maxLength = nativeMin(array.length, maxLength);
                        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
                            ? new SetCache(othIndex && array)
                            : undefined;
                    }
                    array = arrays[0];

                    var index = -1,
                        seen = caches[0];

                    outer:
                        while (++index < length && result.length < maxLength) {
                            var value = array[index],
                                computed = iteratee ? iteratee(value) : value;

                            value = (comparator || value !== 0) ? value : 0;
                            if (!(seen
                                        ? cacheHas(seen, computed)
                                        : includes(result, computed, comparator)
                                )) {
                                othIndex = othLength;
                                while (--othIndex) {
                                    var cache = caches[othIndex];
                                    if (!(cache
                                            ? cacheHas(cache, computed)
                                            : includes(arrays[othIndex], computed, comparator))
                                    ) {
                                        continue outer;
                                    }
                                }
                                if (seen) {
                                    seen.push(computed);
                                }
                                result.push(value);
                            }
                        }
                    return result;
                }

                /**
                 * The base implementation of `_.invert` and `_.invertBy` which inverts
                 * `object` with values transformed by `iteratee` and set by `setter`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform values.
                 * @param {Object} accumulator The initial inverted object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseInverter(object, setter, iteratee, accumulator) {
                    baseForOwn(object, function(value, key, object) {
                        setter(accumulator, iteratee(value), key, object);
                    });
                    return accumulator;
                }

                /**
                 * The base implementation of `_.invoke` without support for individual
                 * method arguments.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {Array} args The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 */
                function baseInvoke(object, path, args) {
                    path = castPath(path, object);
                    object = parent(object, path);
                    var func = object == null ? object : object[toKey(last(path))];
                    return func == null ? undefined : apply(func, object, args);
                }

                /**
                 * The base implementation of `_.isArguments`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 */
                function baseIsArguments(value) {
                    return isObjectLike(value) && baseGetTag(value) == argsTag;
                }

                /**
                 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 */
                function baseIsArrayBuffer(value) {
                    return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                }

                /**
                 * The base implementation of `_.isDate` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 */
                function baseIsDate(value) {
                    return isObjectLike(value) && baseGetTag(value) == dateTag;
                }

                /**
                 * The base implementation of `_.isEqual` which supports partial comparisons
                 * and tracks traversed objects.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Unordered comparison
                 *  2 - Partial comparison
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 */
                function baseIsEqual(value, other, bitmask, customizer, stack) {
                    if (value === other) {
                        return true;
                    }
                    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                        return value !== value && other !== other;
                    }
                    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                }

                /**
                 * A specialized version of `baseIsEqual` for arrays and objects which performs
                 * deep comparisons and tracks traversed objects enabling objects with circular
                 * references to be compared.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                    var objIsArr = isArray(object),
                        othIsArr = isArray(other),
                        objTag = objIsArr ? arrayTag : getTag(object),
                        othTag = othIsArr ? arrayTag : getTag(other);

                    objTag = objTag == argsTag ? objectTag : objTag;
                    othTag = othTag == argsTag ? objectTag : othTag;

                    var objIsObj = objTag == objectTag,
                        othIsObj = othTag == objectTag,
                        isSameTag = objTag == othTag;

                    if (isSameTag && isBuffer(object)) {
                        if (!isBuffer(other)) {
                            return false;
                        }
                        objIsArr = true;
                        objIsObj = false;
                    }
                    if (isSameTag && !objIsObj) {
                        stack || (stack = new Stack);
                        return (objIsArr || isTypedArray(object))
                            ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                            : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                    }
                    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                        if (objIsWrapped || othIsWrapped) {
                            var objUnwrapped = objIsWrapped ? object.value() : object,
                                othUnwrapped = othIsWrapped ? other.value() : other;

                            stack || (stack = new Stack);
                            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                        }
                    }
                    if (!isSameTag) {
                        return false;
                    }
                    stack || (stack = new Stack);
                    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                }

                /**
                 * The base implementation of `_.isMap` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 */
                function baseIsMap(value) {
                    return isObjectLike(value) && getTag(value) == mapTag;
                }

                /**
                 * The base implementation of `_.isMatch` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Array} matchData The property names, values, and compare flags to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 */
                function baseIsMatch(object, source, matchData, customizer) {
                    var index = matchData.length,
                        length = index,
                        noCustomizer = !customizer;

                    if (object == null) {
                        return !length;
                    }
                    object = Object(object);
                    while (index--) {
                        var data = matchData[index];
                        if ((noCustomizer && data[2])
                                ? data[1] !== object[data[0]]
                                : !(data[0] in object)
                        ) {
                            return false;
                        }
                    }
                    while (++index < length) {
                        data = matchData[index];
                        var key = data[0],
                            objValue = object[key],
                            srcValue = data[1];

                        if (noCustomizer && data[2]) {
                            if (objValue === undefined && !(key in object)) {
                                return false;
                            }
                        } else {
                            var stack = new Stack;
                            if (customizer) {
                                var result = customizer(objValue, srcValue, key, object, source, stack);
                            }
                            if (!(result === undefined
                                        ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                                        : result
                                )) {
                                return false;
                            }
                        }
                    }
                    return true;
                }

                /**
                 * The base implementation of `_.isNative` without bad shim checks.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 */
                function baseIsNative(value) {
                    if (!isObject(value) || isMasked(value)) {
                        return false;
                    }
                    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                    return pattern.test(toSource(value));
                }

                /**
                 * The base implementation of `_.isRegExp` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 */
                function baseIsRegExp(value) {
                    return isObjectLike(value) && baseGetTag(value) == regexpTag;
                }

                /**
                 * The base implementation of `_.isSet` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 */
                function baseIsSet(value) {
                    return isObjectLike(value) && getTag(value) == setTag;
                }

                /**
                 * The base implementation of `_.isTypedArray` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 */
                function baseIsTypedArray(value) {
                    return isObjectLike(value) &&
                        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                }

                /**
                 * The base implementation of `_.iteratee`.
                 *
                 * @private
                 * @param {*} [value=_.identity] The value to convert to an iteratee.
                 * @returns {Function} Returns the iteratee.
                 */
                function baseIteratee(value) {
                    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                    if (typeof value == 'function') {
                        return value;
                    }
                    if (value == null) {
                        return identity;
                    }
                    if (typeof value == 'object') {
                        return isArray(value)
                            ? baseMatchesProperty(value[0], value[1])
                            : baseMatches(value);
                    }
                    return property(value);
                }

                /**
                 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeys(object) {
                    if (!isPrototype(object)) {
                        return nativeKeys(object);
                    }
                    var result = [];
                    for (var key in Object(object)) {
                        if (hasOwnProperty.call(object, key) && key != 'constructor') {
                            result.push(key);
                        }
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeysIn(object) {
                    if (!isObject(object)) {
                        return nativeKeysIn(object);
                    }
                    var isProto = isPrototype(object),
                        result = [];

                    for (var key in object) {
                        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                            result.push(key);
                        }
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.lt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 */
                function baseLt(value, other) {
                    return value < other;
                }

                /**
                 * The base implementation of `_.map` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 */
                function baseMap(collection, iteratee) {
                    var index = -1,
                        result = isArrayLike(collection) ? Array(collection.length) : [];

                    baseEach(collection, function(value, key, collection) {
                        result[++index] = iteratee(value, key, collection);
                    });
                    return result;
                }

                /**
                 * The base implementation of `_.matches` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatches(source) {
                    var matchData = getMatchData(source);
                    if (matchData.length == 1 && matchData[0][2]) {
                        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                    }
                    return function(object) {
                        return object === source || baseIsMatch(object, source, matchData);
                    };
                }

                /**
                 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                 *
                 * @private
                 * @param {string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatchesProperty(path, srcValue) {
                    if (isKey(path) && isStrictComparable(srcValue)) {
                        return matchesStrictComparable(toKey(path), srcValue);
                    }
                    return function(object) {
                        var objValue = get(object, path);
                        return (objValue === undefined && objValue === srcValue)
                            ? hasIn(object, path)
                            : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                    };
                }

                /**
                 * The base implementation of `_.merge` without support for multiple sources.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} [customizer] The function to customize merged values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMerge(object, source, srcIndex, customizer, stack) {
                    if (object === source) {
                        return;
                    }
                    baseFor(source, function(srcValue, key) {
                        if (isObject(srcValue)) {
                            stack || (stack = new Stack);
                            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                        }
                        else {
                            var newValue = customizer
                                ? customizer(object[key], srcValue, (key + ''), object, source, stack)
                                : undefined;

                            if (newValue === undefined) {
                                newValue = srcValue;
                            }
                            assignMergeValue(object, key, newValue);
                        }
                    }, keysIn);
                }

                /**
                 * A specialized version of `baseMerge` for arrays and objects which performs
                 * deep merges and tracks traversed objects enabling objects with circular
                 * references to be merged.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {string} key The key of the value to merge.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} mergeFunc The function to merge values.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                    var objValue = object[key],
                        srcValue = source[key],
                        stacked = stack.get(srcValue);

                    if (stacked) {
                        assignMergeValue(object, key, stacked);
                        return;
                    }
                    var newValue = customizer
                        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                        : undefined;

                    var isCommon = newValue === undefined;

                    if (isCommon) {
                        var isArr = isArray(srcValue),
                            isBuff = !isArr && isBuffer(srcValue),
                            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                        newValue = srcValue;
                        if (isArr || isBuff || isTyped) {
                            if (isArray(objValue)) {
                                newValue = objValue;
                            }
                            else if (isArrayLikeObject(objValue)) {
                                newValue = copyArray(objValue);
                            }
                            else if (isBuff) {
                                isCommon = false;
                                newValue = cloneBuffer(srcValue, true);
                            }
                            else if (isTyped) {
                                isCommon = false;
                                newValue = cloneTypedArray(srcValue, true);
                            }
                            else {
                                newValue = [];
                            }
                        }
                        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                            newValue = objValue;
                            if (isArguments(objValue)) {
                                newValue = toPlainObject(objValue);
                            }
                            else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
                                newValue = initCloneObject(srcValue);
                            }
                        }
                        else {
                            isCommon = false;
                        }
                    }
                    if (isCommon) {
                        // Recursively merge objects and arrays (susceptible to call stack limits).
                        stack.set(srcValue, newValue);
                        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                        stack['delete'](srcValue);
                    }
                    assignMergeValue(object, key, newValue);
                }

                /**
                 * The base implementation of `_.nth` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {number} n The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 */
                function baseNth(array, n) {
                    var length = array.length;
                    if (!length) {
                        return;
                    }
                    n += n < 0 ? length : 0;
                    return isIndex(n, length) ? array[n] : undefined;
                }

                /**
                 * The base implementation of `_.orderBy` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                 * @param {string[]} orders The sort orders of `iteratees`.
                 * @returns {Array} Returns the new sorted array.
                 */
                function baseOrderBy(collection, iteratees, orders) {
                    var index = -1;
                    iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

                    var result = baseMap(collection, function(value, key, collection) {
                        var criteria = arrayMap(iteratees, function(iteratee) {
                            return iteratee(value);
                        });
                        return { 'criteria': criteria, 'index': ++index, 'value': value };
                    });

                    return baseSortBy(result, function(object, other) {
                        return compareMultiple(object, other, orders);
                    });
                }

                /**
                 * The base implementation of `_.pick` without support for individual
                 * property identifiers.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Object} Returns the new object.
                 */
                function basePick(object, paths) {
                    return basePickBy(object, paths, function(value, path) {
                        return hasIn(object, path);
                    });
                }

                /**
                 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @param {Function} predicate The function invoked per property.
                 * @returns {Object} Returns the new object.
                 */
                function basePickBy(object, paths, predicate) {
                    var index = -1,
                        length = paths.length,
                        result = {};

                    while (++index < length) {
                        var path = paths[index],
                            value = baseGet(object, path);

                        if (predicate(value, path)) {
                            baseSet(result, castPath(path, object), value);
                        }
                    }
                    return result;
                }

                /**
                 * A specialized version of `baseProperty` which supports deep paths.
                 *
                 * @private
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 */
                function basePropertyDeep(path) {
                    return function(object) {
                        return baseGet(object, path);
                    };
                }

                /**
                 * The base implementation of `_.pullAllBy` without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAll(array, values, iteratee, comparator) {
                    var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                        index = -1,
                        length = values.length,
                        seen = array;

                    if (array === values) {
                        values = copyArray(values);
                    }
                    if (iteratee) {
                        seen = arrayMap(array, baseUnary(iteratee));
                    }
                    while (++index < length) {
                        var fromIndex = 0,
                            value = values[index],
                            computed = iteratee ? iteratee(value) : value;

                        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                            if (seen !== array) {
                                splice.call(seen, fromIndex, 1);
                            }
                            splice.call(array, fromIndex, 1);
                        }
                    }
                    return array;
                }

                /**
                 * The base implementation of `_.pullAt` without support for individual
                 * indexes or capturing the removed elements.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {number[]} indexes The indexes of elements to remove.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAt(array, indexes) {
                    var length = array ? indexes.length : 0,
                        lastIndex = length - 1;

                    while (length--) {
                        var index = indexes[length];
                        if (length == lastIndex || index !== previous) {
                            var previous = index;
                            if (isIndex(index)) {
                                splice.call(array, index, 1);
                            } else {
                                baseUnset(array, index);
                            }
                        }
                    }
                    return array;
                }

                /**
                 * The base implementation of `_.random` without support for returning
                 * floating-point numbers.
                 *
                 * @private
                 * @param {number} lower The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the random number.
                 */
                function baseRandom(lower, upper) {
                    return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                }

                /**
                 * The base implementation of `_.range` and `_.rangeRight` which doesn't
                 * coerce arguments.
                 *
                 * @private
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} step The value to increment or decrement by.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the range of numbers.
                 */
                function baseRange(start, end, step, fromRight) {
                    var index = -1,
                        length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                        result = Array(length);

                    while (length--) {
                        result[fromRight ? length : ++index] = start;
                        start += step;
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.repeat` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {string} string The string to repeat.
                 * @param {number} n The number of times to repeat the string.
                 * @returns {string} Returns the repeated string.
                 */
                function baseRepeat(string, n) {
                    var result = '';
                    if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                        return result;
                    }
                    // Leverage the exponentiation by squaring algorithm for a faster repeat.
                    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                    do {
                        if (n % 2) {
                            result += string;
                        }
                        n = nativeFloor(n / 2);
                        if (n) {
                            string += string;
                        }
                    } while (n);

                    return result;
                }

                /**
                 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 */
                function baseRest(func, start) {
                    return setToString(overRest(func, start, identity), func + '');
                }

                /**
                 * The base implementation of `_.sample`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 */
                function baseSample(collection) {
                    return arraySample(values(collection));
                }

                /**
                 * The base implementation of `_.sampleSize` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function baseSampleSize(collection, n) {
                    var array = values(collection);
                    return shuffleSelf(array, baseClamp(n, 0, array.length));
                }

                /**
                 * The base implementation of `_.set`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseSet(object, path, value, customizer) {
                    if (!isObject(object)) {
                        return object;
                    }
                    path = castPath(path, object);

                    var index = -1,
                        length = path.length,
                        lastIndex = length - 1,
                        nested = object;

                    while (nested != null && ++index < length) {
                        var key = toKey(path[index]),
                            newValue = value;

                        if (index != lastIndex) {
                            var objValue = nested[key];
                            newValue = customizer ? customizer(objValue, key, nested) : undefined;
                            if (newValue === undefined) {
                                newValue = isObject(objValue)
                                    ? objValue
                                    : (isIndex(path[index + 1]) ? [] : {});
                            }
                        }
                        assignValue(nested, key, newValue);
                        nested = nested[key];
                    }
                    return object;
                }

                /**
                 * The base implementation of `setData` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetData = !metaMap ? identity : function(func, data) {
                    metaMap.set(func, data);
                    return func;
                };

                /**
                 * The base implementation of `setToString` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetToString = !defineProperty ? identity : function(func, string) {
                    return defineProperty(func, 'toString', {
                        'configurable': true,
                        'enumerable': false,
                        'value': constant(string),
                        'writable': true
                    });
                };

                /**
                 * The base implementation of `_.shuffle`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function baseShuffle(collection) {
                    return shuffleSelf(values(collection));
                }

                /**
                 * The base implementation of `_.slice` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseSlice(array, start, end) {
                    var index = -1,
                        length = array.length;

                    if (start < 0) {
                        start = -start > length ? 0 : (length + start);
                    }
                    end = end > length ? length : end;
                    if (end < 0) {
                        end += length;
                    }
                    length = start > end ? 0 : ((end - start) >>> 0);
                    start >>>= 0;

                    var result = Array(length);
                    while (++index < length) {
                        result[index] = array[index + start];
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.some` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 */
                function baseSome(collection, predicate) {
                    var result;

                    baseEach(collection, function(value, index, collection) {
                        result = predicate(value, index, collection);
                        return !result;
                    });
                    return !!result;
                }

                /**
                 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                 * performs a binary search of `array` to determine the index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndex(array, value, retHighest) {
                    var low = 0,
                        high = array == null ? low : array.length;

                    if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                        while (low < high) {
                            var mid = (low + high) >>> 1,
                                computed = array[mid];

                            if (computed !== null && !isSymbol(computed) &&
                                (retHighest ? (computed <= value) : (computed < value))) {
                                low = mid + 1;
                            } else {
                                high = mid;
                            }
                        }
                        return high;
                    }
                    return baseSortedIndexBy(array, value, identity, retHighest);
                }

                /**
                 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                 * which invokes `iteratee` for `value` and each element of `array` to compute
                 * their sort ranking. The iteratee is invoked with one argument; (value).
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} iteratee The iteratee invoked per element.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndexBy(array, value, iteratee, retHighest) {
                    value = iteratee(value);

                    var low = 0,
                        high = array == null ? 0 : array.length,
                        valIsNaN = value !== value,
                        valIsNull = value === null,
                        valIsSymbol = isSymbol(value),
                        valIsUndefined = value === undefined;

                    while (low < high) {
                        var mid = nativeFloor((low + high) / 2),
                            computed = iteratee(array[mid]),
                            othIsDefined = computed !== undefined,
                            othIsNull = computed === null,
                            othIsReflexive = computed === computed,
                            othIsSymbol = isSymbol(computed);

                        if (valIsNaN) {
                            var setLow = retHighest || othIsReflexive;
                        } else if (valIsUndefined) {
                            setLow = othIsReflexive && (retHighest || othIsDefined);
                        } else if (valIsNull) {
                            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                        } else if (valIsSymbol) {
                            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                        } else if (othIsNull || othIsSymbol) {
                            setLow = false;
                        } else {
                            setLow = retHighest ? (computed <= value) : (computed < value);
                        }
                        if (setLow) {
                            low = mid + 1;
                        } else {
                            high = mid;
                        }
                    }
                    return nativeMin(high, MAX_ARRAY_INDEX);
                }

                /**
                 * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                 * support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseSortedUniq(array, iteratee) {
                    var index = -1,
                        length = array.length,
                        resIndex = 0,
                        result = [];

                    while (++index < length) {
                        var value = array[index],
                            computed = iteratee ? iteratee(value) : value;

                        if (!index || !eq(computed, seen)) {
                            var seen = computed;
                            result[resIndex++] = value === 0 ? 0 : value;
                        }
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.toNumber` which doesn't ensure correct
                 * conversions of binary, hexadecimal, or octal string values.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 */
                function baseToNumber(value) {
                    if (typeof value == 'number') {
                        return value;
                    }
                    if (isSymbol(value)) {
                        return NAN;
                    }
                    return +value;
                }

                /**
                 * The base implementation of `_.toString` which doesn't convert nullish
                 * values to empty strings.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {string} Returns the string.
                 */
                function baseToString(value) {
                    // Exit early for strings to avoid a performance hit in some environments.
                    if (typeof value == 'string') {
                        return value;
                    }
                    if (isArray(value)) {
                        // Recursively convert values (susceptible to call stack limits).
                        return arrayMap(value, baseToString) + '';
                    }
                    if (isSymbol(value)) {
                        return symbolToString ? symbolToString.call(value) : '';
                    }
                    var result = (value + '');
                    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                }

                /**
                 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseUniq(array, iteratee, comparator) {
                    var index = -1,
                        includes = arrayIncludes,
                        length = array.length,
                        isCommon = true,
                        result = [],
                        seen = result;

                    if (comparator) {
                        isCommon = false;
                        includes = arrayIncludesWith;
                    }
                    else if (length >= LARGE_ARRAY_SIZE) {
                        var set = iteratee ? null : createSet(array);
                        if (set) {
                            return setToArray(set);
                        }
                        isCommon = false;
                        includes = cacheHas;
                        seen = new SetCache;
                    }
                    else {
                        seen = iteratee ? [] : result;
                    }
                    outer:
                        while (++index < length) {
                            var value = array[index],
                                computed = iteratee ? iteratee(value) : value;

                            value = (comparator || value !== 0) ? value : 0;
                            if (isCommon && computed === computed) {
                                var seenIndex = seen.length;
                                while (seenIndex--) {
                                    if (seen[seenIndex] === computed) {
                                        continue outer;
                                    }
                                }
                                if (iteratee) {
                                    seen.push(computed);
                                }
                                result.push(value);
                            }
                            else if (!includes(seen, computed, comparator)) {
                                if (seen !== result) {
                                    seen.push(computed);
                                }
                                result.push(value);
                            }
                        }
                    return result;
                }

                /**
                 * The base implementation of `_.unset`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The property path to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 */
                function baseUnset(object, path) {
                    path = castPath(path, object);
                    object = parent(object, path);
                    return object == null || delete object[toKey(last(path))];
                }

                /**
                 * The base implementation of `_.update`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to update.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseUpdate(object, path, updater, customizer) {
                    return baseSet(object, path, updater(baseGet(object, path)), customizer);
                }

                /**
                 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                 * without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseWhile(array, predicate, isDrop, fromRight) {
                    var length = array.length,
                        index = fromRight ? length : -1;

                    while ((fromRight ? index-- : ++index < length) &&
                    predicate(array[index], index, array)) {}

                    return isDrop
                        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
                        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
                }

                /**
                 * The base implementation of `wrapperValue` which returns the result of
                 * performing a sequence of actions on the unwrapped `value`, where each
                 * successive action is supplied the return value of the previous.
                 *
                 * @private
                 * @param {*} value The unwrapped value.
                 * @param {Array} actions Actions to perform to resolve the unwrapped value.
                 * @returns {*} Returns the resolved value.
                 */
                function baseWrapperValue(value, actions) {
                    var result = value;
                    if (result instanceof LazyWrapper) {
                        result = result.value();
                    }
                    return arrayReduce(actions, function(result, action) {
                        return action.func.apply(action.thisArg, arrayPush([result], action.args));
                    }, result);
                }

                /**
                 * The base implementation of methods like `_.xor`, without support for
                 * iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of values.
                 */
                function baseXor(arrays, iteratee, comparator) {
                    var length = arrays.length;
                    if (length < 2) {
                        return length ? baseUniq(arrays[0]) : [];
                    }
                    var index = -1,
                        result = Array(length);

                    while (++index < length) {
                        var array = arrays[index],
                            othIndex = -1;

                        while (++othIndex < length) {
                            if (othIndex != index) {
                                result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                            }
                        }
                    }
                    return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                }

                /**
                 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                 *
                 * @private
                 * @param {Array} props The property identifiers.
                 * @param {Array} values The property values.
                 * @param {Function} assignFunc The function to assign values.
                 * @returns {Object} Returns the new object.
                 */
                function baseZipObject(props, values, assignFunc) {
                    var index = -1,
                        length = props.length,
                        valsLength = values.length,
                        result = {};

                    while (++index < length) {
                        var value = index < valsLength ? values[index] : undefined;
                        assignFunc(result, props[index], value);
                    }
                    return result;
                }

                /**
                 * Casts `value` to an empty array if it's not an array like object.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Array|Object} Returns the cast array-like object.
                 */
                function castArrayLikeObject(value) {
                    return isArrayLikeObject(value) ? value : [];
                }

                /**
                 * Casts `value` to `identity` if it's not a function.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Function} Returns cast function.
                 */
                function castFunction(value) {
                    return typeof value == 'function' ? value : identity;
                }

                /**
                 * Casts `value` to a path array if it's not one.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {Array} Returns the cast property path array.
                 */
                function castPath(value, object) {
                    if (isArray(value)) {
                        return value;
                    }
                    return isKey(value, object) ? [value] : stringToPath(toString(value));
                }

                /**
                 * A `baseRest` alias which can be replaced with `identity` by module
                 * replacement plugins.
                 *
                 * @private
                 * @type {Function}
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                var castRest = baseRest;

                /**
                 * Casts `array` to a slice if it's needed.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {number} start The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the cast slice.
                 */
                function castSlice(array, start, end) {
                    var length = array.length;
                    end = end === undefined ? length : end;
                    return (!start && end >= length) ? array : baseSlice(array, start, end);
                }

                /**
                 * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                 *
                 * @private
                 * @param {number|Object} id The timer id or timeout object of the timer to clear.
                 */
                var clearTimeout = ctxClearTimeout || function(id) {
                        return root.clearTimeout(id);
                    };

                /**
                 * Creates a clone of  `buffer`.
                 *
                 * @private
                 * @param {Buffer} buffer The buffer to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Buffer} Returns the cloned buffer.
                 */
                function cloneBuffer(buffer, isDeep) {
                    if (isDeep) {
                        return buffer.slice();
                    }
                    var length = buffer.length,
                        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                    buffer.copy(result);
                    return result;
                }

                /**
                 * Creates a clone of `arrayBuffer`.
                 *
                 * @private
                 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                 * @returns {ArrayBuffer} Returns the cloned array buffer.
                 */
                function cloneArrayBuffer(arrayBuffer) {
                    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                    return result;
                }

                /**
                 * Creates a clone of `dataView`.
                 *
                 * @private
                 * @param {Object} dataView The data view to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned data view.
                 */
                function cloneDataView(dataView, isDeep) {
                    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                }

                /**
                 * Creates a clone of `map`.
                 *
                 * @private
                 * @param {Object} map The map to clone.
                 * @param {Function} cloneFunc The function to clone values.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned map.
                 */
                function cloneMap(map, isDeep, cloneFunc) {
                    var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
                    return arrayReduce(array, addMapEntry, new map.constructor);
                }

                /**
                 * Creates a clone of `regexp`.
                 *
                 * @private
                 * @param {Object} regexp The regexp to clone.
                 * @returns {Object} Returns the cloned regexp.
                 */
                function cloneRegExp(regexp) {
                    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                    result.lastIndex = regexp.lastIndex;
                    return result;
                }

                /**
                 * Creates a clone of `set`.
                 *
                 * @private
                 * @param {Object} set The set to clone.
                 * @param {Function} cloneFunc The function to clone values.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned set.
                 */
                function cloneSet(set, isDeep, cloneFunc) {
                    var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
                    return arrayReduce(array, addSetEntry, new set.constructor);
                }

                /**
                 * Creates a clone of the `symbol` object.
                 *
                 * @private
                 * @param {Object} symbol The symbol object to clone.
                 * @returns {Object} Returns the cloned symbol object.
                 */
                function cloneSymbol(symbol) {
                    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                }

                /**
                 * Creates a clone of `typedArray`.
                 *
                 * @private
                 * @param {Object} typedArray The typed array to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned typed array.
                 */
                function cloneTypedArray(typedArray, isDeep) {
                    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                }

                /**
                 * Compares values to sort them in ascending order.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {number} Returns the sort order indicator for `value`.
                 */
                function compareAscending(value, other) {
                    if (value !== other) {
                        var valIsDefined = value !== undefined,
                            valIsNull = value === null,
                            valIsReflexive = value === value,
                            valIsSymbol = isSymbol(value);

                        var othIsDefined = other !== undefined,
                            othIsNull = other === null,
                            othIsReflexive = other === other,
                            othIsSymbol = isSymbol(other);

                        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                            (valIsNull && othIsDefined && othIsReflexive) ||
                            (!valIsDefined && othIsReflexive) ||
                            !valIsReflexive) {
                            return 1;
                        }
                        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                            (othIsNull && valIsDefined && valIsReflexive) ||
                            (!othIsDefined && valIsReflexive) ||
                            !othIsReflexive) {
                            return -1;
                        }
                    }
                    return 0;
                }

                /**
                 * Used by `_.orderBy` to compare multiple properties of a value to another
                 * and stable sort them.
                 *
                 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                 * specify an order of "desc" for descending or "asc" for ascending sort order
                 * of corresponding values.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {boolean[]|string[]} orders The order to sort by for each property.
                 * @returns {number} Returns the sort order indicator for `object`.
                 */
                function compareMultiple(object, other, orders) {
                    var index = -1,
                        objCriteria = object.criteria,
                        othCriteria = other.criteria,
                        length = objCriteria.length,
                        ordersLength = orders.length;

                    while (++index < length) {
                        var result = compareAscending(objCriteria[index], othCriteria[index]);
                        if (result) {
                            if (index >= ordersLength) {
                                return result;
                            }
                            var order = orders[index];
                            return result * (order == 'desc' ? -1 : 1);
                        }
                    }
                    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                    // that causes it, under certain circumstances, to provide the same value for
                    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                    // for more details.
                    //
                    // This also ensures a stable sort in V8 and other engines.
                    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                    return object.index - other.index;
                }

                /**
                 * Creates an array that is the composition of partially applied arguments,
                 * placeholders, and provided arguments into a single array of arguments.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to prepend to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgs(args, partials, holders, isCurried) {
                    var argsIndex = -1,
                        argsLength = args.length,
                        holdersLength = holders.length,
                        leftIndex = -1,
                        leftLength = partials.length,
                        rangeLength = nativeMax(argsLength - holdersLength, 0),
                        result = Array(leftLength + rangeLength),
                        isUncurried = !isCurried;

                    while (++leftIndex < leftLength) {
                        result[leftIndex] = partials[leftIndex];
                    }
                    while (++argsIndex < holdersLength) {
                        if (isUncurried || argsIndex < argsLength) {
                            result[holders[argsIndex]] = args[argsIndex];
                        }
                    }
                    while (rangeLength--) {
                        result[leftIndex++] = args[argsIndex++];
                    }
                    return result;
                }

                /**
                 * This function is like `composeArgs` except that the arguments composition
                 * is tailored for `_.partialRight`.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to append to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgsRight(args, partials, holders, isCurried) {
                    var argsIndex = -1,
                        argsLength = args.length,
                        holdersIndex = -1,
                        holdersLength = holders.length,
                        rightIndex = -1,
                        rightLength = partials.length,
                        rangeLength = nativeMax(argsLength - holdersLength, 0),
                        result = Array(rangeLength + rightLength),
                        isUncurried = !isCurried;

                    while (++argsIndex < rangeLength) {
                        result[argsIndex] = args[argsIndex];
                    }
                    var offset = argsIndex;
                    while (++rightIndex < rightLength) {
                        result[offset + rightIndex] = partials[rightIndex];
                    }
                    while (++holdersIndex < holdersLength) {
                        if (isUncurried || argsIndex < argsLength) {
                            result[offset + holders[holdersIndex]] = args[argsIndex++];
                        }
                    }
                    return result;
                }

                /**
                 * Copies the values of `source` to `array`.
                 *
                 * @private
                 * @param {Array} source The array to copy values from.
                 * @param {Array} [array=[]] The array to copy values to.
                 * @returns {Array} Returns `array`.
                 */
                function copyArray(source, array) {
                    var index = -1,
                        length = source.length;

                    array || (array = Array(length));
                    while (++index < length) {
                        array[index] = source[index];
                    }
                    return array;
                }

                /**
                 * Copies properties of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy properties from.
                 * @param {Array} props The property identifiers to copy.
                 * @param {Object} [object={}] The object to copy properties to.
                 * @param {Function} [customizer] The function to customize copied values.
                 * @returns {Object} Returns `object`.
                 */
                function copyObject(source, props, object, customizer) {
                    var isNew = !object;
                    object || (object = {});

                    var index = -1,
                        length = props.length;

                    while (++index < length) {
                        var key = props[index];

                        var newValue = customizer
                            ? customizer(object[key], source[key], key, object, source)
                            : undefined;

                        if (newValue === undefined) {
                            newValue = source[key];
                        }
                        if (isNew) {
                            baseAssignValue(object, key, newValue);
                        } else {
                            assignValue(object, key, newValue);
                        }
                    }
                    return object;
                }

                /**
                 * Copies own symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbols(source, object) {
                    return copyObject(source, getSymbols(source), object);
                }

                /**
                 * Copies own and inherited symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbolsIn(source, object) {
                    return copyObject(source, getSymbolsIn(source), object);
                }

                /**
                 * Creates a function like `_.groupBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} [initializer] The accumulator object initializer.
                 * @returns {Function} Returns the new aggregator function.
                 */
                function createAggregator(setter, initializer) {
                    return function(collection, iteratee) {
                        var func = isArray(collection) ? arrayAggregator : baseAggregator,
                            accumulator = initializer ? initializer() : {};

                        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                    };
                }

                /**
                 * Creates a function like `_.assign`.
                 *
                 * @private
                 * @param {Function} assigner The function to assign values.
                 * @returns {Function} Returns the new assigner function.
                 */
                function createAssigner(assigner) {
                    return baseRest(function(object, sources) {
                        var index = -1,
                            length = sources.length,
                            customizer = length > 1 ? sources[length - 1] : undefined,
                            guard = length > 2 ? sources[2] : undefined;

                        customizer = (assigner.length > 3 && typeof customizer == 'function')
                            ? (length--, customizer)
                            : undefined;

                        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                            customizer = length < 3 ? undefined : customizer;
                            length = 1;
                        }
                        object = Object(object);
                        while (++index < length) {
                            var source = sources[index];
                            if (source) {
                                assigner(object, source, index, customizer);
                            }
                        }
                        return object;
                    });
                }

                /**
                 * Creates a `baseEach` or `baseEachRight` function.
                 *
                 * @private
                 * @param {Function} eachFunc The function to iterate over a collection.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseEach(eachFunc, fromRight) {
                    return function(collection, iteratee) {
                        if (collection == null) {
                            return collection;
                        }
                        if (!isArrayLike(collection)) {
                            return eachFunc(collection, iteratee);
                        }
                        var length = collection.length,
                            index = fromRight ? length : -1,
                            iterable = Object(collection);

                        while ((fromRight ? index-- : ++index < length)) {
                            if (iteratee(iterable[index], index, iterable) === false) {
                                break;
                            }
                        }
                        return collection;
                    };
                }

                /**
                 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseFor(fromRight) {
                    return function(object, iteratee, keysFunc) {
                        var index = -1,
                            iterable = Object(object),
                            props = keysFunc(object),
                            length = props.length;

                        while (length--) {
                            var key = props[fromRight ? length : ++index];
                            if (iteratee(iterable[key], key, iterable) === false) {
                                break;
                            }
                        }
                        return object;
                    };
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the optional `this`
                 * binding of `thisArg`.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createBind(func, bitmask, thisArg) {
                    var isBind = bitmask & WRAP_BIND_FLAG,
                        Ctor = createCtor(func);

                    function wrapper() {
                        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                        return fn.apply(isBind ? thisArg : this, arguments);
                    }
                    return wrapper;
                }

                /**
                 * Creates a function like `_.lowerFirst`.
                 *
                 * @private
                 * @param {string} methodName The name of the `String` case method to use.
                 * @returns {Function} Returns the new case function.
                 */
                function createCaseFirst(methodName) {
                    return function(string) {
                        string = toString(string);

                        var strSymbols = hasUnicode(string)
                            ? stringToArray(string)
                            : undefined;

                        var chr = strSymbols
                            ? strSymbols[0]
                            : string.charAt(0);

                        var trailing = strSymbols
                            ? castSlice(strSymbols, 1).join('')
                            : string.slice(1);

                        return chr[methodName]() + trailing;
                    };
                }

                /**
                 * Creates a function like `_.camelCase`.
                 *
                 * @private
                 * @param {Function} callback The function to combine each word.
                 * @returns {Function} Returns the new compounder function.
                 */
                function createCompounder(callback) {
                    return function(string) {
                        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                    };
                }

                /**
                 * Creates a function that produces an instance of `Ctor` regardless of
                 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                 *
                 * @private
                 * @param {Function} Ctor The constructor to wrap.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCtor(Ctor) {
                    return function() {
                        // Use a `switch` statement to work with class constructors. See
                        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                        // for more details.
                        var args = arguments;
                        switch (args.length) {
                            case 0: return new Ctor;
                            case 1: return new Ctor(args[0]);
                            case 2: return new Ctor(args[0], args[1]);
                            case 3: return new Ctor(args[0], args[1], args[2]);
                            case 4: return new Ctor(args[0], args[1], args[2], args[3]);
                            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                        }
                        var thisBinding = baseCreate(Ctor.prototype),
                            result = Ctor.apply(thisBinding, args);

                        // Mimic the constructor's `return` behavior.
                        // See https://es5.github.io/#x13.2.2 for more details.
                        return isObject(result) ? result : thisBinding;
                    };
                }

                /**
                 * Creates a function that wraps `func` to enable currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {number} arity The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCurry(func, bitmask, arity) {
                    var Ctor = createCtor(func);

                    function wrapper() {
                        var length = arguments.length,
                            args = Array(length),
                            index = length,
                            placeholder = getHolder(wrapper);

                        while (index--) {
                            args[index] = arguments[index];
                        }
                        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
                            ? []
                            : replaceHolders(args, placeholder);

                        length -= holders.length;
                        if (length < arity) {
                            return createRecurry(
                                func, bitmask, createHybrid, wrapper.placeholder, undefined,
                                args, holders, undefined, undefined, arity - length);
                        }
                        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                        return apply(fn, this, args);
                    }
                    return wrapper;
                }

                /**
                 * Creates a `_.find` or `_.findLast` function.
                 *
                 * @private
                 * @param {Function} findIndexFunc The function to find the collection index.
                 * @returns {Function} Returns the new find function.
                 */
                function createFind(findIndexFunc) {
                    return function(collection, predicate, fromIndex) {
                        var iterable = Object(collection);
                        if (!isArrayLike(collection)) {
                            var iteratee = getIteratee(predicate, 3);
                            collection = keys(collection);
                            predicate = function(key) { return iteratee(iterable[key], key, iterable); };
                        }
                        var index = findIndexFunc(collection, predicate, fromIndex);
                        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
                    };
                }

                /**
                 * Creates a `_.flow` or `_.flowRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new flow function.
                 */
                function createFlow(fromRight) {
                    return flatRest(function(funcs) {
                        var length = funcs.length,
                            index = length,
                            prereq = LodashWrapper.prototype.thru;

                        if (fromRight) {
                            funcs.reverse();
                        }
                        while (index--) {
                            var func = funcs[index];
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                                var wrapper = new LodashWrapper([], true);
                            }
                        }
                        index = wrapper ? index : length;
                        while (++index < length) {
                            func = funcs[index];

                            var funcName = getFuncName(func),
                                data = funcName == 'wrapper' ? getData(func) : undefined;

                            if (data && isLaziable(data[0]) &&
                                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                                !data[4].length && data[9] == 1
                            ) {
                                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                            } else {
                                wrapper = (func.length == 1 && isLaziable(func))
                                    ? wrapper[funcName]()
                                    : wrapper.thru(func);
                            }
                        }
                        return function() {
                            var args = arguments,
                                value = args[0];

                            if (wrapper && args.length == 1 && isArray(value)) {
                                return wrapper.plant(value).value();
                            }
                            var index = 0,
                                result = length ? funcs[index].apply(this, args) : value;

                            while (++index < length) {
                                result = funcs[index].call(this, result);
                            }
                            return result;
                        };
                    });
                }

                /**
                 * Creates a function that wraps `func` to invoke it with optional `this`
                 * binding of `thisArg`, partial application, and currying.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [partialsRight] The arguments to append to those provided
                 *  to the new function.
                 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                    var isAry = bitmask & WRAP_ARY_FLAG,
                        isBind = bitmask & WRAP_BIND_FLAG,
                        isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                        isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                        isFlip = bitmask & WRAP_FLIP_FLAG,
                        Ctor = isBindKey ? undefined : createCtor(func);

                    function wrapper() {
                        var length = arguments.length,
                            args = Array(length),
                            index = length;

                        while (index--) {
                            args[index] = arguments[index];
                        }
                        if (isCurried) {
                            var placeholder = getHolder(wrapper),
                                holdersCount = countHolders(args, placeholder);
                        }
                        if (partials) {
                            args = composeArgs(args, partials, holders, isCurried);
                        }
                        if (partialsRight) {
                            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                        }
                        length -= holdersCount;
                        if (isCurried && length < arity) {
                            var newHolders = replaceHolders(args, placeholder);
                            return createRecurry(
                                func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                                args, newHolders, argPos, ary, arity - length
                            );
                        }
                        var thisBinding = isBind ? thisArg : this,
                            fn = isBindKey ? thisBinding[func] : func;

                        length = args.length;
                        if (argPos) {
                            args = reorder(args, argPos);
                        } else if (isFlip && length > 1) {
                            args.reverse();
                        }
                        if (isAry && ary < length) {
                            args.length = ary;
                        }
                        if (this && this !== root && this instanceof wrapper) {
                            fn = Ctor || createCtor(fn);
                        }
                        return fn.apply(thisBinding, args);
                    }
                    return wrapper;
                }

                /**
                 * Creates a function like `_.invertBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} toIteratee The function to resolve iteratees.
                 * @returns {Function} Returns the new inverter function.
                 */
                function createInverter(setter, toIteratee) {
                    return function(object, iteratee) {
                        return baseInverter(object, setter, toIteratee(iteratee), {});
                    };
                }

                /**
                 * Creates a function that performs a mathematical operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @param {number} [defaultValue] The value used for `undefined` arguments.
                 * @returns {Function} Returns the new mathematical operation function.
                 */
                function createMathOperation(operator, defaultValue) {
                    return function(value, other) {
                        var result;
                        if (value === undefined && other === undefined) {
                            return defaultValue;
                        }
                        if (value !== undefined) {
                            result = value;
                        }
                        if (other !== undefined) {
                            if (result === undefined) {
                                return other;
                            }
                            if (typeof value == 'string' || typeof other == 'string') {
                                value = baseToString(value);
                                other = baseToString(other);
                            } else {
                                value = baseToNumber(value);
                                other = baseToNumber(other);
                            }
                            result = operator(value, other);
                        }
                        return result;
                    };
                }

                /**
                 * Creates a function like `_.over`.
                 *
                 * @private
                 * @param {Function} arrayFunc The function to iterate over iteratees.
                 * @returns {Function} Returns the new over function.
                 */
                function createOver(arrayFunc) {
                    return flatRest(function(iteratees) {
                        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                        return baseRest(function(args) {
                            var thisArg = this;
                            return arrayFunc(iteratees, function(iteratee) {
                                return apply(iteratee, thisArg, args);
                            });
                        });
                    });
                }

                /**
                 * Creates the padding for `string` based on `length`. The `chars` string
                 * is truncated if the number of characters exceeds `length`.
                 *
                 * @private
                 * @param {number} length The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padding for `string`.
                 */
                function createPadding(length, chars) {
                    chars = chars === undefined ? ' ' : baseToString(chars);

                    var charsLength = chars.length;
                    if (charsLength < 2) {
                        return charsLength ? baseRepeat(chars, length) : chars;
                    }
                    var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                    return hasUnicode(chars)
                        ? castSlice(stringToArray(result), 0, length).join('')
                        : result.slice(0, length);
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the `this` binding
                 * of `thisArg` and `partials` prepended to the arguments it receives.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} partials The arguments to prepend to those provided to
                 *  the new function.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createPartial(func, bitmask, thisArg, partials) {
                    var isBind = bitmask & WRAP_BIND_FLAG,
                        Ctor = createCtor(func);

                    function wrapper() {
                        var argsIndex = -1,
                            argsLength = arguments.length,
                            leftIndex = -1,
                            leftLength = partials.length,
                            args = Array(leftLength + argsLength),
                            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

                        while (++leftIndex < leftLength) {
                            args[leftIndex] = partials[leftIndex];
                        }
                        while (argsLength--) {
                            args[leftIndex++] = arguments[++argsIndex];
                        }
                        return apply(fn, isBind ? thisArg : this, args);
                    }
                    return wrapper;
                }

                /**
                 * Creates a `_.range` or `_.rangeRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new range function.
                 */
                function createRange(fromRight) {
                    return function(start, end, step) {
                        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                            end = step = undefined;
                        }
                        // Ensure the sign of `-0` is preserved.
                        start = toFinite(start);
                        if (end === undefined) {
                            end = start;
                            start = 0;
                        } else {
                            end = toFinite(end);
                        }
                        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                        return baseRange(start, end, step, fromRight);
                    };
                }

                /**
                 * Creates a function that performs a relational operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @returns {Function} Returns the new relational operation function.
                 */
                function createRelationalOperation(operator) {
                    return function(value, other) {
                        if (!(typeof value == 'string' && typeof other == 'string')) {
                            value = toNumber(value);
                            other = toNumber(other);
                        }
                        return operator(value, other);
                    };
                }

                /**
                 * Creates a function that wraps `func` to continue currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {Function} wrapFunc The function to create the `func` wrapper.
                 * @param {*} placeholder The placeholder value.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                    var isCurry = bitmask & WRAP_CURRY_FLAG,
                        newHolders = isCurry ? holders : undefined,
                        newHoldersRight = isCurry ? undefined : holders,
                        newPartials = isCurry ? partials : undefined,
                        newPartialsRight = isCurry ? undefined : partials;

                    bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                    bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                    if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                    }
                    var newData = [
                        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                        newHoldersRight, argPos, ary, arity
                    ];

                    var result = wrapFunc.apply(undefined, newData);
                    if (isLaziable(func)) {
                        setData(result, newData);
                    }
                    result.placeholder = placeholder;
                    return setWrapToString(result, func, bitmask);
                }

                /**
                 * Creates a function like `_.round`.
                 *
                 * @private
                 * @param {string} methodName The name of the `Math` method to use when rounding.
                 * @returns {Function} Returns the new round function.
                 */
                function createRound(methodName) {
                    var func = Math[methodName];
                    return function(number, precision) {
                        number = toNumber(number);
                        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                        if (precision) {
                            // Shift with exponential notation to avoid floating-point issues.
                            // See [MDN](https://mdn.io/round#Examples) for more details.
                            var pair = (toString(number) + 'e').split('e'),
                                value = func(pair[0] + 'e' + (+pair[1] + precision));

                            pair = (toString(value) + 'e').split('e');
                            return +(pair[0] + 'e' + (+pair[1] - precision));
                        }
                        return func(number);
                    };
                }

                /**
                 * Creates a set object of `values`.
                 *
                 * @private
                 * @param {Array} values The values to add to the set.
                 * @returns {Object} Returns the new set.
                 */
                var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
                    return new Set(values);
                };

                /**
                 * Creates a `_.toPairs` or `_.toPairsIn` function.
                 *
                 * @private
                 * @param {Function} keysFunc The function to get the keys of a given object.
                 * @returns {Function} Returns the new pairs function.
                 */
                function createToPairs(keysFunc) {
                    return function(object) {
                        var tag = getTag(object);
                        if (tag == mapTag) {
                            return mapToArray(object);
                        }
                        if (tag == setTag) {
                            return setToPairs(object);
                        }
                        return baseToPairs(object, keysFunc(object));
                    };
                }

                /**
                 * Creates a function that either curries or invokes `func` with optional
                 * `this` binding and partially applied arguments.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags.
                 *    1 - `_.bind`
                 *    2 - `_.bindKey`
                 *    4 - `_.curry` or `_.curryRight` of a bound function
                 *    8 - `_.curry`
                 *   16 - `_.curryRight`
                 *   32 - `_.partial`
                 *   64 - `_.partialRight`
                 *  128 - `_.rearg`
                 *  256 - `_.ary`
                 *  512 - `_.flip`
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to be partially applied.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                    var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                    if (!isBindKey && typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    var length = partials ? partials.length : 0;
                    if (!length) {
                        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                        partials = holders = undefined;
                    }
                    ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                    arity = arity === undefined ? arity : toInteger(arity);
                    length -= holders ? holders.length : 0;

                    if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                        var partialsRight = partials,
                            holdersRight = holders;

                        partials = holders = undefined;
                    }
                    var data = isBindKey ? undefined : getData(func);

                    var newData = [
                        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                        argPos, ary, arity
                    ];

                    if (data) {
                        mergeData(newData, data);
                    }
                    func = newData[0];
                    bitmask = newData[1];
                    thisArg = newData[2];
                    partials = newData[3];
                    holders = newData[4];
                    arity = newData[9] = newData[9] === undefined
                        ? (isBindKey ? 0 : func.length)
                        : nativeMax(newData[9] - length, 0);

                    if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                    }
                    if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                        var result = createBind(func, bitmask, thisArg);
                    } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                        result = createCurry(func, bitmask, arity);
                    } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                        result = createPartial(func, bitmask, thisArg, partials);
                    } else {
                        result = createHybrid.apply(undefined, newData);
                    }
                    var setter = data ? baseSetData : setData;
                    return setWrapToString(setter(result, newData), func, bitmask);
                }

                /**
                 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                 * of source objects to the destination object for all destination properties
                 * that resolve to `undefined`.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to assign.
                 * @param {Object} object The parent object of `objValue`.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsAssignIn(objValue, srcValue, key, object) {
                    if (objValue === undefined ||
                        (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                        return srcValue;
                    }
                    return objValue;
                }

                /**
                 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                 * objects into destination objects that are passed thru.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to merge.
                 * @param {Object} object The parent object of `objValue`.
                 * @param {Object} source The parent object of `srcValue`.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                    if (isObject(objValue) && isObject(srcValue)) {
                        // Recursively merge objects and arrays (susceptible to call stack limits).
                        stack.set(srcValue, objValue);
                        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                        stack['delete'](srcValue);
                    }
                    return objValue;
                }

                /**
                 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                 * objects.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {string} key The key of the property to inspect.
                 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                 */
                function customOmitClone(value) {
                    return isPlainObject(value) ? undefined : value;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for arrays with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Array} array The array to compare.
                 * @param {Array} other The other array to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `array` and `other` objects.
                 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                 */
                function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                        arrLength = array.length,
                        othLength = other.length;

                    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                        return false;
                    }
                    // Assume cyclic values are equal.
                    var stacked = stack.get(array);
                    if (stacked && stack.get(other)) {
                        return stacked == other;
                    }
                    var index = -1,
                        result = true,
                        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                    stack.set(array, other);
                    stack.set(other, array);

                    // Ignore non-index properties.
                    while (++index < arrLength) {
                        var arrValue = array[index],
                            othValue = other[index];

                        if (customizer) {
                            var compared = isPartial
                                ? customizer(othValue, arrValue, index, other, array, stack)
                                : customizer(arrValue, othValue, index, array, other, stack);
                        }
                        if (compared !== undefined) {
                            if (compared) {
                                continue;
                            }
                            result = false;
                            break;
                        }
                        // Recursively compare arrays (susceptible to call stack limits).
                        if (seen) {
                            if (!arraySome(other, function(othValue, othIndex) {
                                    if (!cacheHas(seen, othIndex) &&
                                        (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                        return seen.push(othIndex);
                                    }
                                })) {
                                result = false;
                                break;
                            }
                        } else if (!(
                                arrValue === othValue ||
                                equalFunc(arrValue, othValue, bitmask, customizer, stack)
                            )) {
                            result = false;
                            break;
                        }
                    }
                    stack['delete'](array);
                    stack['delete'](other);
                    return result;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for comparing objects of
                 * the same `toStringTag`.
                 *
                 * **Note:** This function only supports comparing values with tags of
                 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {string} tag The `toStringTag` of the objects to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                    switch (tag) {
                        case dataViewTag:
                            if ((object.byteLength != other.byteLength) ||
                                (object.byteOffset != other.byteOffset)) {
                                return false;
                            }
                            object = object.buffer;
                            other = other.buffer;

                        case arrayBufferTag:
                            if ((object.byteLength != other.byteLength) ||
                                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                                return false;
                            }
                            return true;

                        case boolTag:
                        case dateTag:
                        case numberTag:
                            // Coerce booleans to `1` or `0` and dates to milliseconds.
                            // Invalid dates are coerced to `NaN`.
                            return eq(+object, +other);

                        case errorTag:
                            return object.name == other.name && object.message == other.message;

                        case regexpTag:
                        case stringTag:
                            // Coerce regexes to strings and treat strings, primitives and objects,
                            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                            // for more details.
                            return object == (other + '');

                        case mapTag:
                            var convert = mapToArray;

                        case setTag:
                            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                            convert || (convert = setToArray);

                            if (object.size != other.size && !isPartial) {
                                return false;
                            }
                            // Assume cyclic values are equal.
                            var stacked = stack.get(object);
                            if (stacked) {
                                return stacked == other;
                            }
                            bitmask |= COMPARE_UNORDERED_FLAG;

                            // Recursively compare objects (susceptible to call stack limits).
                            stack.set(object, other);
                            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                            stack['delete'](object);
                            return result;

                        case symbolTag:
                            if (symbolValueOf) {
                                return symbolValueOf.call(object) == symbolValueOf.call(other);
                            }
                    }
                    return false;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for objects with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                        objProps = getAllKeys(object),
                        objLength = objProps.length,
                        othProps = getAllKeys(other),
                        othLength = othProps.length;

                    if (objLength != othLength && !isPartial) {
                        return false;
                    }
                    var index = objLength;
                    while (index--) {
                        var key = objProps[index];
                        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                            return false;
                        }
                    }
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked && stack.get(other)) {
                        return stacked == other;
                    }
                    var result = true;
                    stack.set(object, other);
                    stack.set(other, object);

                    var skipCtor = isPartial;
                    while (++index < objLength) {
                        key = objProps[index];
                        var objValue = object[key],
                            othValue = other[key];

                        if (customizer) {
                            var compared = isPartial
                                ? customizer(othValue, objValue, key, other, object, stack)
                                : customizer(objValue, othValue, key, object, other, stack);
                        }
                        // Recursively compare objects (susceptible to call stack limits).
                        if (!(compared === undefined
                                    ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                                    : compared
                            )) {
                            result = false;
                            break;
                        }
                        skipCtor || (skipCtor = key == 'constructor');
                    }
                    if (result && !skipCtor) {
                        var objCtor = object.constructor,
                            othCtor = other.constructor;

                        // Non `Object` object instances with different constructors are not equal.
                        if (objCtor != othCtor &&
                            ('constructor' in object && 'constructor' in other) &&
                            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                            result = false;
                        }
                    }
                    stack['delete'](object);
                    stack['delete'](other);
                    return result;
                }

                /**
                 * A specialized version of `baseRest` which flattens the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                function flatRest(func) {
                    return setToString(overRest(func, undefined, flatten), func + '');
                }

                /**
                 * Creates an array of own enumerable property names and symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeys(object) {
                    return baseGetAllKeys(object, keys, getSymbols);
                }

                /**
                 * Creates an array of own and inherited enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeysIn(object) {
                    return baseGetAllKeys(object, keysIn, getSymbolsIn);
                }

                /**
                 * Gets metadata for `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {*} Returns the metadata for `func`.
                 */
                var getData = !metaMap ? noop : function(func) {
                    return metaMap.get(func);
                };

                /**
                 * Gets the name of `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {string} Returns the function name.
                 */
                function getFuncName(func) {
                    var result = (func.name + ''),
                        array = realNames[result],
                        length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                    while (length--) {
                        var data = array[length],
                            otherFunc = data.func;
                        if (otherFunc == null || otherFunc == func) {
                            return data.name;
                        }
                    }
                    return result;
                }

                /**
                 * Gets the argument placeholder value for `func`.
                 *
                 * @private
                 * @param {Function} func The function to inspect.
                 * @returns {*} Returns the placeholder value.
                 */
                function getHolder(func) {
                    var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                    return object.placeholder;
                }

                /**
                 * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                 * this function returns the custom method, otherwise it returns `baseIteratee`.
                 * If arguments are provided, the chosen function is invoked with them and
                 * its result is returned.
                 *
                 * @private
                 * @param {*} [value] The value to convert to an iteratee.
                 * @param {number} [arity] The arity of the created iteratee.
                 * @returns {Function} Returns the chosen function or its result.
                 */
                function getIteratee() {
                    var result = lodash.iteratee || iteratee;
                    result = result === iteratee ? baseIteratee : result;
                    return arguments.length ? result(arguments[0], arguments[1]) : result;
                }

                /**
                 * Gets the data for `map`.
                 *
                 * @private
                 * @param {Object} map The map to query.
                 * @param {string} key The reference key.
                 * @returns {*} Returns the map data.
                 */
                function getMapData(map, key) {
                    var data = map.__data__;
                    return isKeyable(key)
                        ? data[typeof key == 'string' ? 'string' : 'hash']
                        : data.map;
                }

                /**
                 * Gets the property names, values, and compare flags of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the match data of `object`.
                 */
                function getMatchData(object) {
                    var result = keys(object),
                        length = result.length;

                    while (length--) {
                        var key = result[length],
                            value = object[key];

                        result[length] = [key, value, isStrictComparable(value)];
                    }
                    return result;
                }

                /**
                 * Gets the native function at `key` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the method to get.
                 * @returns {*} Returns the function if it's native, else `undefined`.
                 */
                function getNative(object, key) {
                    var value = getValue(object, key);
                    return baseIsNative(value) ? value : undefined;
                }

                /**
                 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the raw `toStringTag`.
                 */
                function getRawTag(value) {
                    var isOwn = hasOwnProperty.call(value, symToStringTag),
                        tag = value[symToStringTag];

                    try {
                        value[symToStringTag] = undefined;
                        var unmasked = true;
                    } catch (e) {}

                    var result = nativeObjectToString.call(value);
                    if (unmasked) {
                        if (isOwn) {
                            value[symToStringTag] = tag;
                        } else {
                            delete value[symToStringTag];
                        }
                    }
                    return result;
                }

                /**
                 * Creates an array of the own enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
                    if (object == null) {
                        return [];
                    }
                    object = Object(object);
                    return arrayFilter(nativeGetSymbols(object), function(symbol) {
                        return propertyIsEnumerable.call(object, symbol);
                    });
                };

                /**
                 * Creates an array of the own and inherited enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
                    var result = [];
                    while (object) {
                        arrayPush(result, getSymbols(object));
                        object = getPrototype(object);
                    }
                    return result;
                };

                /**
                 * Gets the `toStringTag` of `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                var getTag = baseGetTag;

                // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                    (Map && getTag(new Map) != mapTag) ||
                    (Promise && getTag(Promise.resolve()) != promiseTag) ||
                    (Set && getTag(new Set) != setTag) ||
                    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                    getTag = function(value) {
                        var result = baseGetTag(value),
                            Ctor = result == objectTag ? value.constructor : undefined,
                            ctorString = Ctor ? toSource(Ctor) : '';

                        if (ctorString) {
                            switch (ctorString) {
                                case dataViewCtorString: return dataViewTag;
                                case mapCtorString: return mapTag;
                                case promiseCtorString: return promiseTag;
                                case setCtorString: return setTag;
                                case weakMapCtorString: return weakMapTag;
                            }
                        }
                        return result;
                    };
                }

                /**
                 * Gets the view, applying any `transforms` to the `start` and `end` positions.
                 *
                 * @private
                 * @param {number} start The start of the view.
                 * @param {number} end The end of the view.
                 * @param {Array} transforms The transformations to apply to the view.
                 * @returns {Object} Returns an object containing the `start` and `end`
                 *  positions of the view.
                 */
                function getView(start, end, transforms) {
                    var index = -1,
                        length = transforms.length;

                    while (++index < length) {
                        var data = transforms[index],
                            size = data.size;

                        switch (data.type) {
                            case 'drop':      start += size; break;
                            case 'dropRight': end -= size; break;
                            case 'take':      end = nativeMin(end, start + size); break;
                            case 'takeRight': start = nativeMax(start, end - size); break;
                        }
                    }
                    return { 'start': start, 'end': end };
                }

                /**
                 * Extracts wrapper details from the `source` body comment.
                 *
                 * @private
                 * @param {string} source The source to inspect.
                 * @returns {Array} Returns the wrapper details.
                 */
                function getWrapDetails(source) {
                    var match = source.match(reWrapDetails);
                    return match ? match[1].split(reSplitDetails) : [];
                }

                /**
                 * Checks if `path` exists on `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @param {Function} hasFunc The function to check properties.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 */
                function hasPath(object, path, hasFunc) {
                    path = castPath(path, object);

                    var index = -1,
                        length = path.length,
                        result = false;

                    while (++index < length) {
                        var key = toKey(path[index]);
                        if (!(result = object != null && hasFunc(object, key))) {
                            break;
                        }
                        object = object[key];
                    }
                    if (result || ++index != length) {
                        return result;
                    }
                    length = object == null ? 0 : object.length;
                    return !!length && isLength(length) && isIndex(key, length) &&
                        (isArray(object) || isArguments(object));
                }

                /**
                 * Initializes an array clone.
                 *
                 * @private
                 * @param {Array} array The array to clone.
                 * @returns {Array} Returns the initialized clone.
                 */
                function initCloneArray(array) {
                    var length = array.length,
                        result = array.constructor(length);

                    // Add properties assigned by `RegExp#exec`.
                    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                        result.index = array.index;
                        result.input = array.input;
                    }
                    return result;
                }

                /**
                 * Initializes an object clone.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneObject(object) {
                    return (typeof object.constructor == 'function' && !isPrototype(object))
                        ? baseCreate(getPrototype(object))
                        : {};
                }

                /**
                 * Initializes an object clone based on its `toStringTag`.
                 *
                 * **Note:** This function only supports cloning values with tags of
                 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @param {string} tag The `toStringTag` of the object to clone.
                 * @param {Function} cloneFunc The function to clone values.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneByTag(object, tag, cloneFunc, isDeep) {
                    var Ctor = object.constructor;
                    switch (tag) {
                        case arrayBufferTag:
                            return cloneArrayBuffer(object);

                        case boolTag:
                        case dateTag:
                            return new Ctor(+object);

                        case dataViewTag:
                            return cloneDataView(object, isDeep);

                        case float32Tag: case float64Tag:
                        case int8Tag: case int16Tag: case int32Tag:
                        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
                        return cloneTypedArray(object, isDeep);

                        case mapTag:
                            return cloneMap(object, isDeep, cloneFunc);

                        case numberTag:
                        case stringTag:
                            return new Ctor(object);

                        case regexpTag:
                            return cloneRegExp(object);

                        case setTag:
                            return cloneSet(object, isDeep, cloneFunc);

                        case symbolTag:
                            return cloneSymbol(object);
                    }
                }

                /**
                 * Inserts wrapper `details` in a comment at the top of the `source` body.
                 *
                 * @private
                 * @param {string} source The source to modify.
                 * @returns {Array} details The details to insert.
                 * @returns {string} Returns the modified source.
                 */
                function insertWrapDetails(source, details) {
                    var length = details.length;
                    if (!length) {
                        return source;
                    }
                    var lastIndex = length - 1;
                    details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                    details = details.join(length > 2 ? ', ' : ' ');
                    return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
                }

                /**
                 * Checks if `value` is a flattenable `arguments` object or array.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                 */
                function isFlattenable(value) {
                    return isArray(value) || isArguments(value) ||
                        !!(spreadableSymbol && value && value[spreadableSymbol]);
                }

                /**
                 * Checks if `value` is a valid array-like index.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                 */
                function isIndex(value, length) {
                    length = length == null ? MAX_SAFE_INTEGER : length;
                    return !!length &&
                        (typeof value == 'number' || reIsUint.test(value)) &&
                        (value > -1 && value % 1 == 0 && value < length);
                }

                /**
                 * Checks if the given arguments are from an iteratee call.
                 *
                 * @private
                 * @param {*} value The potential iteratee value argument.
                 * @param {*} index The potential iteratee index or key argument.
                 * @param {*} object The potential iteratee object argument.
                 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                 *  else `false`.
                 */
                function isIterateeCall(value, index, object) {
                    if (!isObject(object)) {
                        return false;
                    }
                    var type = typeof index;
                    if (type == 'number'
                            ? (isArrayLike(object) && isIndex(index, object.length))
                            : (type == 'string' && index in object)
                    ) {
                        return eq(object[index], value);
                    }
                    return false;
                }

                /**
                 * Checks if `value` is a property name and not a property path.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                 */
                function isKey(value, object) {
                    if (isArray(value)) {
                        return false;
                    }
                    var type = typeof value;
                    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                        value == null || isSymbol(value)) {
                        return true;
                    }
                    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                        (object != null && value in Object(object));
                }

                /**
                 * Checks if `value` is suitable for use as unique object key.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                 */
                function isKeyable(value) {
                    var type = typeof value;
                    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                        ? (value !== '__proto__')
                        : (value === null);
                }

                /**
                 * Checks if `func` has a lazy counterpart.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                 *  else `false`.
                 */
                function isLaziable(func) {
                    var funcName = getFuncName(func),
                        other = lodash[funcName];

                    if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                        return false;
                    }
                    if (func === other) {
                        return true;
                    }
                    var data = getData(other);
                    return !!data && func === data[0];
                }

                /**
                 * Checks if `func` has its source masked.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                 */
                function isMasked(func) {
                    return !!maskSrcKey && (maskSrcKey in func);
                }

                /**
                 * Checks if `func` is capable of being masked.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                 */
                var isMaskable = coreJsData ? isFunction : stubFalse;

                /**
                 * Checks if `value` is likely a prototype object.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                 */
                function isPrototype(value) {
                    var Ctor = value && value.constructor,
                        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                    return value === proto;
                }

                /**
                 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` if suitable for strict
                 *  equality comparisons, else `false`.
                 */
                function isStrictComparable(value) {
                    return value === value && !isObject(value);
                }

                /**
                 * A specialized version of `matchesProperty` for source values suitable
                 * for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {string} key The key of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function matchesStrictComparable(key, srcValue) {
                    return function(object) {
                        if (object == null) {
                            return false;
                        }
                        return object[key] === srcValue &&
                            (srcValue !== undefined || (key in Object(object)));
                    };
                }

                /**
                 * A specialized version of `_.memoize` which clears the memoized function's
                 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                 *
                 * @private
                 * @param {Function} func The function to have its output memoized.
                 * @returns {Function} Returns the new memoized function.
                 */
                function memoizeCapped(func) {
                    var result = memoize(func, function(key) {
                        if (cache.size === MAX_MEMOIZE_SIZE) {
                            cache.clear();
                        }
                        return key;
                    });

                    var cache = result.cache;
                    return result;
                }

                /**
                 * Merges the function metadata of `source` into `data`.
                 *
                 * Merging metadata reduces the number of wrappers used to invoke a function.
                 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                 * may be applied regardless of execution order. Methods like `_.ary` and
                 * `_.rearg` modify function arguments, making the order in which they are
                 * executed important, preventing the merging of metadata. However, we make
                 * an exception for a safe combined case where curried functions have `_.ary`
                 * and or `_.rearg` applied.
                 *
                 * @private
                 * @param {Array} data The destination metadata.
                 * @param {Array} source The source metadata.
                 * @returns {Array} Returns `data`.
                 */
                function mergeData(data, source) {
                    var bitmask = data[1],
                        srcBitmask = source[1],
                        newBitmask = bitmask | srcBitmask,
                        isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                    var isCombo =
                        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

                    // Exit early if metadata can't be merged.
                    if (!(isCommon || isCombo)) {
                        return data;
                    }
                    // Use source `thisArg` if available.
                    if (srcBitmask & WRAP_BIND_FLAG) {
                        data[2] = source[2];
                        // Set when currying a bound function.
                        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                    }
                    // Compose partial arguments.
                    var value = source[3];
                    if (value) {
                        var partials = data[3];
                        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                    }
                    // Compose partial right arguments.
                    value = source[5];
                    if (value) {
                        partials = data[5];
                        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                    }
                    // Use source `argPos` if available.
                    value = source[7];
                    if (value) {
                        data[7] = value;
                    }
                    // Use source `ary` if it's smaller.
                    if (srcBitmask & WRAP_ARY_FLAG) {
                        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                    }
                    // Use source `arity` if one is not provided.
                    if (data[9] == null) {
                        data[9] = source[9];
                    }
                    // Use source `func` and merge bitmasks.
                    data[0] = source[0];
                    data[1] = newBitmask;

                    return data;
                }

                /**
                 * This function is like
                 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * except that it includes inherited enumerable properties.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function nativeKeysIn(object) {
                    var result = [];
                    if (object != null) {
                        for (var key in Object(object)) {
                            result.push(key);
                        }
                    }
                    return result;
                }

                /**
                 * Converts `value` to a string using `Object.prototype.toString`.
                 *
                 * @private
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 */
                function objectToString(value) {
                    return nativeObjectToString.call(value);
                }

                /**
                 * A specialized version of `baseRest` which transforms the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @param {Function} transform The rest array transform.
                 * @returns {Function} Returns the new function.
                 */
                function overRest(func, start, transform) {
                    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                    return function() {
                        var args = arguments,
                            index = -1,
                            length = nativeMax(args.length - start, 0),
                            array = Array(length);

                        while (++index < length) {
                            array[index] = args[start + index];
                        }
                        index = -1;
                        var otherArgs = Array(start + 1);
                        while (++index < start) {
                            otherArgs[index] = args[index];
                        }
                        otherArgs[start] = transform(array);
                        return apply(func, this, otherArgs);
                    };
                }

                /**
                 * Gets the parent value at `path` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} path The path to get the parent value of.
                 * @returns {*} Returns the parent value.
                 */
                function parent(object, path) {
                    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                }

                /**
                 * Reorder `array` according to the specified indexes where the element at
                 * the first index is assigned as the first element, the element at
                 * the second index is assigned as the second element, and so on.
                 *
                 * @private
                 * @param {Array} array The array to reorder.
                 * @param {Array} indexes The arranged array indexes.
                 * @returns {Array} Returns `array`.
                 */
                function reorder(array, indexes) {
                    var arrLength = array.length,
                        length = nativeMin(indexes.length, arrLength),
                        oldArray = copyArray(array);

                    while (length--) {
                        var index = indexes[length];
                        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                    }
                    return array;
                }

                /**
                 * Sets metadata for `func`.
                 *
                 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                 * period of time, it will trip its breaker and transition to an identity
                 * function to avoid garbage collection pauses in V8. See
                 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                 * for more details.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var setData = shortOut(baseSetData);

                /**
                 * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                var setTimeout = ctxSetTimeout || function(func, wait) {
                        return root.setTimeout(func, wait);
                    };

                /**
                 * Sets the `toString` method of `func` to return `string`.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var setToString = shortOut(baseSetToString);

                /**
                 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                 * with wrapper details in a comment at the top of the source body.
                 *
                 * @private
                 * @param {Function} wrapper The function to modify.
                 * @param {Function} reference The reference function.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Function} Returns `wrapper`.
                 */
                function setWrapToString(wrapper, reference, bitmask) {
                    var source = (reference + '');
                    return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                }

                /**
                 * Creates a function that'll short out and invoke `identity` instead
                 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                 * milliseconds.
                 *
                 * @private
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new shortable function.
                 */
                function shortOut(func) {
                    var count = 0,
                        lastCalled = 0;

                    return function() {
                        var stamp = nativeNow(),
                            remaining = HOT_SPAN - (stamp - lastCalled);

                        lastCalled = stamp;
                        if (remaining > 0) {
                            if (++count >= HOT_COUNT) {
                                return arguments[0];
                            }
                        } else {
                            count = 0;
                        }
                        return func.apply(undefined, arguments);
                    };
                }

                /**
                 * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @param {number} [size=array.length] The size of `array`.
                 * @returns {Array} Returns `array`.
                 */
                function shuffleSelf(array, size) {
                    var index = -1,
                        length = array.length,
                        lastIndex = length - 1;

                    size = size === undefined ? length : size;
                    while (++index < size) {
                        var rand = baseRandom(index, lastIndex),
                            value = array[rand];

                        array[rand] = array[index];
                        array[index] = value;
                    }
                    array.length = size;
                    return array;
                }

                /**
                 * Converts `string` to a property path array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the property path array.
                 */
                var stringToPath = memoizeCapped(function(string) {
                    var result = [];
                    if (reLeadingDot.test(string)) {
                        result.push('');
                    }
                    string.replace(rePropName, function(match, number, quote, string) {
                        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
                    });
                    return result;
                });

                /**
                 * Converts `value` to a string key if it's not a string or symbol.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {string|symbol} Returns the key.
                 */
                function toKey(value) {
                    if (typeof value == 'string' || isSymbol(value)) {
                        return value;
                    }
                    var result = (value + '');
                    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                }

                /**
                 * Converts `func` to its source code.
                 *
                 * @private
                 * @param {Function} func The function to convert.
                 * @returns {string} Returns the source code.
                 */
                function toSource(func) {
                    if (func != null) {
                        try {
                            return funcToString.call(func);
                        } catch (e) {}
                        try {
                            return (func + '');
                        } catch (e) {}
                    }
                    return '';
                }

                /**
                 * Updates wrapper `details` based on `bitmask` flags.
                 *
                 * @private
                 * @returns {Array} details The details to modify.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Array} Returns `details`.
                 */
                function updateWrapDetails(details, bitmask) {
                    arrayEach(wrapFlags, function(pair) {
                        var value = '_.' + pair[0];
                        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                            details.push(value);
                        }
                    });
                    return details.sort();
                }

                /**
                 * Creates a clone of `wrapper`.
                 *
                 * @private
                 * @param {Object} wrapper The wrapper to clone.
                 * @returns {Object} Returns the cloned wrapper.
                 */
                function wrapperClone(wrapper) {
                    if (wrapper instanceof LazyWrapper) {
                        return wrapper.clone();
                    }
                    var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                    result.__actions__ = copyArray(wrapper.__actions__);
                    result.__index__  = wrapper.__index__;
                    result.__values__ = wrapper.__values__;
                    return result;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of elements split into groups the length of `size`.
                 * If `array` can't be split evenly, the final chunk will be the remaining
                 * elements.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to process.
                 * @param {number} [size=1] The length of each chunk
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the new array of chunks.
                 * @example
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 2);
                 * // => [['a', 'b'], ['c', 'd']]
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 3);
                 * // => [['a', 'b', 'c'], ['d']]
                 */
                function chunk(array, size, guard) {
                    if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
                        size = 1;
                    } else {
                        size = nativeMax(toInteger(size), 0);
                    }
                    var length = array == null ? 0 : array.length;
                    if (!length || size < 1) {
                        return [];
                    }
                    var index = 0,
                        resIndex = 0,
                        result = Array(nativeCeil(length / size));

                    while (index < length) {
                        result[resIndex++] = baseSlice(array, index, (index += size));
                    }
                    return result;
                }

                /**
                 * Creates an array with all falsey values removed. The values `false`, `null`,
                 * `0`, `""`, `undefined`, and `NaN` are falsey.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to compact.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.compact([0, 1, false, 2, '', 3]);
                 * // => [1, 2, 3]
                 */
                function compact(array) {
                    var index = -1,
                        length = array == null ? 0 : array.length,
                        resIndex = 0,
                        result = [];

                    while (++index < length) {
                        var value = array[index];
                        if (value) {
                            result[resIndex++] = value;
                        }
                    }
                    return result;
                }

                /**
                 * Creates a new array concatenating `array` with any additional arrays
                 * and/or values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to concatenate.
                 * @param {...*} [values] The values to concatenate.
                 * @returns {Array} Returns the new concatenated array.
                 * @example
                 *
                 * var array = [1];
                 * var other = _.concat(array, 2, [3], [[4]]);
                 *
                 * console.log(other);
                 * // => [1, 2, 3, [4]]
                 *
                 * console.log(array);
                 * // => [1]
                 */
                function concat() {
                    var length = arguments.length;
                    if (!length) {
                        return [];
                    }
                    var args = Array(length - 1),
                        array = arguments[0],
                        index = length;

                    while (index--) {
                        args[index - 1] = arguments[index];
                    }
                    return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                }

                /**
                 * Creates an array of `array` values not included in the other given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * **Note:** Unlike `_.pullAll`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.without, _.xor
                 * @example
                 *
                 * _.difference([2, 1], [2, 3]);
                 * // => [1]
                 */
                var difference = baseRest(function(array, values) {
                    return isArrayLikeObject(array)
                        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                        : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `iteratee` which
                 * is invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var differenceBy = baseRest(function(array, values) {
                    var iteratee = last(values);
                    if (isArrayLikeObject(iteratee)) {
                        iteratee = undefined;
                    }
                    return isArrayLikeObject(array)
                        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
                        : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `comparator`
                 * which is invoked to compare elements of `array` to `values`. The order and
                 * references of result values are determined by the first array. The comparator
                 * is invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 *
                 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }]
                 */
                var differenceWith = baseRest(function(array, values) {
                    var comparator = last(values);
                    if (isArrayLikeObject(comparator)) {
                        comparator = undefined;
                    }
                    return isArrayLikeObject(array)
                        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
                        : [];
                });

                /**
                 * Creates a slice of `array` with `n` elements dropped from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.drop([1, 2, 3]);
                 * // => [2, 3]
                 *
                 * _.drop([1, 2, 3], 2);
                 * // => [3]
                 *
                 * _.drop([1, 2, 3], 5);
                 * // => []
                 *
                 * _.drop([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function drop(array, n, guard) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    n = (guard || n === undefined) ? 1 : toInteger(n);
                    return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with `n` elements dropped from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.dropRight([1, 2, 3]);
                 * // => [1, 2]
                 *
                 * _.dropRight([1, 2, 3], 2);
                 * // => [1]
                 *
                 * _.dropRight([1, 2, 3], 5);
                 * // => []
                 *
                 * _.dropRight([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function dropRight(array, n, guard) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    n = (guard || n === undefined) ? 1 : toInteger(n);
                    n = length - n;
                    return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the end.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.dropRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropRightWhile(users, ['active', false]);
                 * // => objects for ['barney']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropRightWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropRightWhile(array, predicate) {
                    return (array && array.length)
                        ? baseWhile(array, getIteratee(predicate, 3), true, true)
                        : [];
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the beginning.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.dropWhile(users, function(o) { return !o.active; });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropWhile(users, ['active', false]);
                 * // => objects for ['pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropWhile(array, predicate) {
                    return (array && array.length)
                        ? baseWhile(array, getIteratee(predicate, 3), true)
                        : [];
                }

                /**
                 * Fills elements of `array` with `value` from `start` up to, but not
                 * including, `end`.
                 *
                 * **Note:** This method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Array
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.fill(array, 'a');
                 * console.log(array);
                 * // => ['a', 'a', 'a']
                 *
                 * _.fill(Array(3), 2);
                 * // => [2, 2, 2]
                 *
                 * _.fill([4, 6, 8, 10], '*', 1, 3);
                 * // => [4, '*', '*', 10]
                 */
                function fill(array, value, start, end) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                        start = 0;
                        end = length;
                    }
                    return baseFill(array, value, start, end);
                }

                /**
                 * This method is like `_.find` except that it returns the index of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.findIndex(users, function(o) { return o.user == 'barney'; });
                 * // => 0
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findIndex(users, { 'user': 'fred', 'active': false });
                 * // => 1
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findIndex(users, ['active', false]);
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findIndex(users, 'active');
                 * // => 2
                 */
                function findIndex(array, predicate, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return -1;
                    }
                    var index = fromIndex == null ? 0 : toInteger(fromIndex);
                    if (index < 0) {
                        index = nativeMax(length + index, 0);
                    }
                    return baseFindIndex(array, getIteratee(predicate, 3), index);
                }

                /**
                 * This method is like `_.findIndex` except that it iterates over elements
                 * of `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                 * // => 2
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                 * // => 0
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastIndex(users, ['active', false]);
                 * // => 2
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastIndex(users, 'active');
                 * // => 0
                 */
                function findLastIndex(array, predicate, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return -1;
                    }
                    var index = length - 1;
                    if (fromIndex !== undefined) {
                        index = toInteger(fromIndex);
                        index = fromIndex < 0
                            ? nativeMax(length + index, 0)
                            : nativeMin(index, length - 1);
                    }
                    return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                }

                /**
                 * Flattens `array` a single level deep.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flatten([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, [3, [4]], 5]
                 */
                function flatten(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseFlatten(array, 1) : [];
                }

                /**
                 * Recursively flattens `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flattenDeep([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, 3, 4, 5]
                 */
                function flattenDeep(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseFlatten(array, INFINITY) : [];
                }

                /**
                 * Recursively flatten `array` up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * var array = [1, [2, [3, [4]], 5]];
                 *
                 * _.flattenDepth(array, 1);
                 * // => [1, 2, [3, [4]], 5]
                 *
                 * _.flattenDepth(array, 2);
                 * // => [1, 2, 3, [4], 5]
                 */
                function flattenDepth(array, depth) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    depth = depth === undefined ? 1 : toInteger(depth);
                    return baseFlatten(array, depth);
                }

                /**
                 * The inverse of `_.toPairs`; this method returns an object composed
                 * from key-value `pairs`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} pairs The key-value pairs.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.fromPairs([['a', 1], ['b', 2]]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function fromPairs(pairs) {
                    var index = -1,
                        length = pairs == null ? 0 : pairs.length,
                        result = {};

                    while (++index < length) {
                        var pair = pairs[index];
                        result[pair[0]] = pair[1];
                    }
                    return result;
                }

                /**
                 * Gets the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias first
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the first element of `array`.
                 * @example
                 *
                 * _.head([1, 2, 3]);
                 * // => 1
                 *
                 * _.head([]);
                 * // => undefined
                 */
                function head(array) {
                    return (array && array.length) ? array[0] : undefined;
                }

                /**
                 * Gets the index at which the first occurrence of `value` is found in `array`
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. If `fromIndex` is negative, it's used as the
                 * offset from the end of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.indexOf([1, 2, 1, 2], 2);
                 * // => 1
                 *
                 * // Search from the `fromIndex`.
                 * _.indexOf([1, 2, 1, 2], 2, 2);
                 * // => 3
                 */
                function indexOf(array, value, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return -1;
                    }
                    var index = fromIndex == null ? 0 : toInteger(fromIndex);
                    if (index < 0) {
                        index = nativeMax(length + index, 0);
                    }
                    return baseIndexOf(array, value, index);
                }

                /**
                 * Gets all but the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.initial([1, 2, 3]);
                 * // => [1, 2]
                 */
                function initial(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseSlice(array, 0, -1) : [];
                }

                /**
                 * Creates an array of unique values that are included in all given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersection([2, 1], [2, 3]);
                 * // => [2]
                 */
                var intersection = baseRest(function(arrays) {
                    var mapped = arrayMap(arrays, castArrayLikeObject);
                    return (mapped.length && mapped[0] === arrays[0])
                        ? baseIntersection(mapped)
                        : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `iteratee`
                 * which is invoked for each element of each `arrays` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [2.1]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }]
                 */
                var intersectionBy = baseRest(function(arrays) {
                    var iteratee = last(arrays),
                        mapped = arrayMap(arrays, castArrayLikeObject);

                    if (iteratee === last(mapped)) {
                        iteratee = undefined;
                    } else {
                        mapped.pop();
                    }
                    return (mapped.length && mapped[0] === arrays[0])
                        ? baseIntersection(mapped, getIteratee(iteratee, 2))
                        : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `comparator`
                 * which is invoked to compare elements of `arrays`. The order and references
                 * of result values are determined by the first array. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.intersectionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }]
                 */
                var intersectionWith = baseRest(function(arrays) {
                    var comparator = last(arrays),
                        mapped = arrayMap(arrays, castArrayLikeObject);

                    comparator = typeof comparator == 'function' ? comparator : undefined;
                    if (comparator) {
                        mapped.pop();
                    }
                    return (mapped.length && mapped[0] === arrays[0])
                        ? baseIntersection(mapped, undefined, comparator)
                        : [];
                });

                /**
                 * Converts all elements in `array` into a string separated by `separator`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to convert.
                 * @param {string} [separator=','] The element separator.
                 * @returns {string} Returns the joined string.
                 * @example
                 *
                 * _.join(['a', 'b', 'c'], '~');
                 * // => 'a~b~c'
                 */
                function join(array, separator) {
                    return array == null ? '' : nativeJoin.call(array, separator);
                }

                /**
                 * Gets the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the last element of `array`.
                 * @example
                 *
                 * _.last([1, 2, 3]);
                 * // => 3
                 */
                function last(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? array[length - 1] : undefined;
                }

                /**
                 * This method is like `_.indexOf` except that it iterates over elements of
                 * `array` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.lastIndexOf([1, 2, 1, 2], 2);
                 * // => 3
                 *
                 * // Search from the `fromIndex`.
                 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                 * // => 1
                 */
                function lastIndexOf(array, value, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return -1;
                    }
                    var index = length;
                    if (fromIndex !== undefined) {
                        index = toInteger(fromIndex);
                        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                    }
                    return value === value
                        ? strictLastIndexOf(array, value, index)
                        : baseFindIndex(array, baseIsNaN, index, true);
                }

                /**
                 * Gets the element at index `n` of `array`. If `n` is negative, the nth
                 * element from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.11.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=0] The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 *
                 * _.nth(array, 1);
                 * // => 'b'
                 *
                 * _.nth(array, -2);
                 * // => 'c';
                 */
                function nth(array, n) {
                    return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
                }

                /**
                 * Removes all given values from `array` using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                 * to remove elements from an array by predicate.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...*} [values] The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pull(array, 'a', 'c');
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                var pull = baseRest(pullAll);

                /**
                 * This method is like `_.pull` except that it accepts an array of values to remove.
                 *
                 * **Note:** Unlike `_.difference`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pullAll(array, ['a', 'c']);
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                function pullAll(array, values) {
                    return (array && array.length && values && values.length)
                        ? basePullAll(array, values)
                        : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `iteratee` which is
                 * invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The iteratee is invoked with one argument: (value).
                 *
                 * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                 *
                 * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                 * console.log(array);
                 * // => [{ 'x': 2 }]
                 */
                function pullAllBy(array, values, iteratee) {
                    return (array && array.length && values && values.length)
                        ? basePullAll(array, values, getIteratee(iteratee, 2))
                        : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `comparator` which
                 * is invoked to compare elements of `array` to `values`. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                 *
                 * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                 * console.log(array);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                 */
                function pullAllWith(array, values, comparator) {
                    return (array && array.length && values && values.length)
                        ? basePullAll(array, values, undefined, comparator)
                        : array;
                }

                /**
                 * Removes elements from `array` corresponding to `indexes` and returns an
                 * array of removed elements.
                 *
                 * **Note:** Unlike `_.at`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 * var pulled = _.pullAt(array, [1, 3]);
                 *
                 * console.log(array);
                 * // => ['a', 'c']
                 *
                 * console.log(pulled);
                 * // => ['b', 'd']
                 */
                var pullAt = flatRest(function(array, indexes) {
                    var length = array == null ? 0 : array.length,
                        result = baseAt(array, indexes);

                    basePullAt(array, arrayMap(indexes, function(index) {
                        return isIndex(index, length) ? +index : index;
                    }).sort(compareAscending));

                    return result;
                });

                /**
                 * Removes all elements from `array` that `predicate` returns truthy for
                 * and returns an array of the removed elements. The predicate is invoked
                 * with three arguments: (value, index, array).
                 *
                 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                 * to pull elements from an array by value.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = [1, 2, 3, 4];
                 * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
                 *
                 * console.log(array);
                 * // => [1, 3]
                 *
                 * console.log(evens);
                 * // => [2, 4]
                 */
                function remove(array, predicate) {
                    var result = [];
                    if (!(array && array.length)) {
                        return result;
                    }
                    var index = -1,
                        indexes = [],
                        length = array.length;

                    predicate = getIteratee(predicate, 3);
                    while (++index < length) {
                        var value = array[index];
                        if (predicate(value, index, array)) {
                            result.push(value);
                            indexes.push(index);
                        }
                    }
                    basePullAt(array, indexes);
                    return result;
                }

                /**
                 * Reverses `array` so that the first element becomes the last, the second
                 * element becomes the second to last, and so on.
                 *
                 * **Note:** This method mutates `array` and is based on
                 * [`Array#reverse`](https://mdn.io/Array/reverse).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.reverse(array);
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function reverse(array) {
                    return array == null ? array : nativeReverse.call(array);
                }

                /**
                 * Creates a slice of `array` from `start` up to, but not including, `end`.
                 *
                 * **Note:** This method is used instead of
                 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                 * returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function slice(array, start, end) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                        start = 0;
                        end = length;
                    }
                    else {
                        start = start == null ? 0 : toInteger(start);
                        end = end === undefined ? length : toInteger(end);
                    }
                    return baseSlice(array, start, end);
                }

                /**
                 * Uses a binary search to determine the lowest index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedIndex([30, 50], 40);
                 * // => 1
                 */
                function sortedIndex(array, value) {
                    return baseSortedIndex(array, value);
                }

                /**
                 * This method is like `_.sortedIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 0
                 */
                function sortedIndexBy(array, value, iteratee) {
                    return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
                }

                /**
                 * This method is like `_.indexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 1
                 */
                function sortedIndexOf(array, value) {
                    var length = array == null ? 0 : array.length;
                    if (length) {
                        var index = baseSortedIndex(array, value);
                        if (index < length && eq(array[index], value)) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * This method is like `_.sortedIndex` except that it returns the highest
                 * index at which `value` should be inserted into `array` in order to
                 * maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                 * // => 4
                 */
                function sortedLastIndex(array, value) {
                    return baseSortedIndex(array, value, true);
                }

                /**
                 * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 1
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 1
                 */
                function sortedLastIndexBy(array, value, iteratee) {
                    return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
                }

                /**
                 * This method is like `_.lastIndexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 3
                 */
                function sortedLastIndexOf(array, value) {
                    var length = array == null ? 0 : array.length;
                    if (length) {
                        var index = baseSortedIndex(array, value, true) - 1;
                        if (eq(array[index], value)) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * This method is like `_.uniq` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniq([1, 1, 2]);
                 * // => [1, 2]
                 */
                function sortedUniq(array) {
                    return (array && array.length)
                        ? baseSortedUniq(array)
                        : [];
                }

                /**
                 * This method is like `_.uniqBy` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                 * // => [1.1, 2.3]
                 */
                function sortedUniqBy(array, iteratee) {
                    return (array && array.length)
                        ? baseSortedUniq(array, getIteratee(iteratee, 2))
                        : [];
                }

                /**
                 * Gets all but the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.tail([1, 2, 3]);
                 * // => [2, 3]
                 */
                function tail(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseSlice(array, 1, length) : [];
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.take([1, 2, 3]);
                 * // => [1]
                 *
                 * _.take([1, 2, 3], 2);
                 * // => [1, 2]
                 *
                 * _.take([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.take([1, 2, 3], 0);
                 * // => []
                 */
                function take(array, n, guard) {
                    if (!(array && array.length)) {
                        return [];
                    }
                    n = (guard || n === undefined) ? 1 : toInteger(n);
                    return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.takeRight([1, 2, 3]);
                 * // => [3]
                 *
                 * _.takeRight([1, 2, 3], 2);
                 * // => [2, 3]
                 *
                 * _.takeRight([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.takeRight([1, 2, 3], 0);
                 * // => []
                 */
                function takeRight(array, n, guard) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    n = (guard || n === undefined) ? 1 : toInteger(n);
                    n = length - n;
                    return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with elements taken from the end. Elements are
                 * taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.takeRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeRightWhile(users, ['active', false]);
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeRightWhile(users, 'active');
                 * // => []
                 */
                function takeRightWhile(array, predicate) {
                    return (array && array.length)
                        ? baseWhile(array, getIteratee(predicate, 3), false, true)
                        : [];
                }

                /**
                 * Creates a slice of `array` with elements taken from the beginning. Elements
                 * are taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.takeWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeWhile(users, ['active', false]);
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeWhile(users, 'active');
                 * // => []
                 */
                function takeWhile(array, predicate) {
                    return (array && array.length)
                        ? baseWhile(array, getIteratee(predicate, 3))
                        : [];
                }

                /**
                 * Creates an array of unique values, in order, from all given arrays using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.union([2], [1, 2]);
                 * // => [2, 1]
                 */
                var union = baseRest(function(arrays) {
                    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                });

                /**
                 * This method is like `_.union` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which uniqueness is computed. Result values are chosen from the first
                 * array in which the value occurs. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                var unionBy = baseRest(function(arrays) {
                    var iteratee = last(arrays);
                    if (isArrayLikeObject(iteratee)) {
                        iteratee = undefined;
                    }
                    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
                });

                /**
                 * This method is like `_.union` except that it accepts `comparator` which
                 * is invoked to compare elements of `arrays`. Result values are chosen from
                 * the first array in which the value occurs. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.unionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var unionWith = baseRest(function(arrays) {
                    var comparator = last(arrays);
                    comparator = typeof comparator == 'function' ? comparator : undefined;
                    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
                });

                /**
                 * Creates a duplicate-free version of an array, using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons, in which only the first occurrence of each element
                 * is kept. The order of result values is determined by the order they occur
                 * in the array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniq([2, 1, 2]);
                 * // => [2, 1]
                 */
                function uniq(array) {
                    return (array && array.length) ? baseUniq(array) : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * uniqueness is computed. The order of result values is determined by the
                 * order they occur in the array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                function uniqBy(array, iteratee) {
                    return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `comparator` which
                 * is invoked to compare elements of `array`. The order of result values is
                 * determined by the order they occur in the array.The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.uniqWith(objects, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                 */
                function uniqWith(array, comparator) {
                    comparator = typeof comparator == 'function' ? comparator : undefined;
                    return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
                }

                /**
                 * This method is like `_.zip` except that it accepts an array of grouped
                 * elements and creates an array regrouping the elements to their pre-zip
                 * configuration.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.2.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 *
                 * _.unzip(zipped);
                 * // => [['a', 'b'], [1, 2], [true, false]]
                 */
                function unzip(array) {
                    if (!(array && array.length)) {
                        return [];
                    }
                    var length = 0;
                    array = arrayFilter(array, function(group) {
                        if (isArrayLikeObject(group)) {
                            length = nativeMax(group.length, length);
                            return true;
                        }
                    });
                    return baseTimes(length, function(index) {
                        return arrayMap(array, baseProperty(index));
                    });
                }

                /**
                 * This method is like `_.unzip` except that it accepts `iteratee` to specify
                 * how regrouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  regrouped values.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                 * // => [[1, 10, 100], [2, 20, 200]]
                 *
                 * _.unzipWith(zipped, _.add);
                 * // => [3, 30, 300]
                 */
                function unzipWith(array, iteratee) {
                    if (!(array && array.length)) {
                        return [];
                    }
                    var result = unzip(array);
                    if (iteratee == null) {
                        return result;
                    }
                    return arrayMap(result, function(group) {
                        return apply(iteratee, undefined, group);
                    });
                }

                /**
                 * Creates an array excluding all given values using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.pull`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...*} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.xor
                 * @example
                 *
                 * _.without([2, 1, 2, 3], 1, 2);
                 * // => [3]
                 */
                var without = baseRest(function(array, values) {
                    return isArrayLikeObject(array)
                        ? baseDifference(array, values)
                        : [];
                });

                /**
                 * Creates an array of unique values that is the
                 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                 * of the given arrays. The order of result values is determined by the order
                 * they occur in the arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.without
                 * @example
                 *
                 * _.xor([2, 1], [2, 3]);
                 * // => [1, 3]
                 */
                var xor = baseRest(function(arrays) {
                    return baseXor(arrayFilter(arrays, isArrayLikeObject));
                });

                /**
                 * This method is like `_.xor` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which by which they're compared. The order of result values is determined
                 * by the order they occur in the arrays. The iteratee is invoked with one
                 * argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2, 3.4]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var xorBy = baseRest(function(arrays) {
                    var iteratee = last(arrays);
                    if (isArrayLikeObject(iteratee)) {
                        iteratee = undefined;
                    }
                    return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
                });

                /**
                 * This method is like `_.xor` except that it accepts `comparator` which is
                 * invoked to compare elements of `arrays`. The order of result values is
                 * determined by the order they occur in the arrays. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.xorWith(objects, others, _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var xorWith = baseRest(function(arrays) {
                    var comparator = last(arrays);
                    comparator = typeof comparator == 'function' ? comparator : undefined;
                    return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
                });

                /**
                 * Creates an array of grouped elements, the first of which contains the
                 * first elements of the given arrays, the second of which contains the
                 * second elements of the given arrays, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 */
                var zip = baseRest(unzip);

                /**
                 * This method is like `_.fromPairs` except that it accepts two arrays,
                 * one of property identifiers and one of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.4.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObject(['a', 'b'], [1, 2]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function zipObject(props, values) {
                    return baseZipObject(props || [], values || [], assignValue);
                }

                /**
                 * This method is like `_.zipObject` except that it supports property paths.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                 * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                 */
                function zipObjectDeep(props, values) {
                    return baseZipObject(props || [], values || [], baseSet);
                }

                /**
                 * This method is like `_.zip` except that it accepts `iteratee` to specify
                 * how grouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  grouped values.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
                 * // => [111, 222]
                 */
                var zipWith = baseRest(function(arrays) {
                    var length = arrays.length,
                        iteratee = length > 1 ? arrays[length - 1] : undefined;

                    iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
                    return unzipWith(arrays, iteratee);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                 * chain sequences enabled. The result of such sequences must be unwrapped
                 * with `_#value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Seq
                 * @param {*} value The value to wrap.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36 },
                 *   { 'user': 'fred',    'age': 40 },
                 *   { 'user': 'pebbles', 'age': 1 }
                 * ];
                 *
                 * var youngest = _
                 *   .chain(users)
                 *   .sortBy('age')
                 *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
                 *   .head()
                 *   .value();
                 * // => 'pebbles is 1'
                 */
                function chain(value) {
                    var result = lodash(value);
                    result.__chain__ = true;
                    return result;
                }

                /**
                 * This method invokes `interceptor` and returns `value`. The interceptor
                 * is invoked with one argument; (value). The purpose of this method is to
                 * "tap into" a method chain sequence in order to modify intermediate results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * _([1, 2, 3])
                 *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
                 *  .reverse()
                 *  .value();
                 * // => [2, 1]
                 */
                function tap(value, interceptor) {
                    interceptor(value);
                    return value;
                }

                /**
                 * This method is like `_.tap` except that it returns the result of `interceptor`.
                 * The purpose of this method is to "pass thru" values replacing intermediate
                 * results in a method chain sequence.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns the result of `interceptor`.
                 * @example
                 *
                 * _('  abc  ')
                 *  .chain()
                 *  .trim()
                 *  .thru(function(value) {
     *    return [value];
     *  })
                 *  .value();
                 * // => ['abc']
                 */
                function thru(value, interceptor) {
                    return interceptor(value);
                }

                /**
                 * This method is the wrapper version of `_.at`.
                 *
                 * @name at
                 * @memberOf _
                 * @since 1.0.0
                 * @category Seq
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _(object).at(['a[0].b.c', 'a[1]']).value();
                 * // => [3, 4]
                 */
                var wrapperAt = flatRest(function(paths) {
                    var length = paths.length,
                        start = length ? paths[0] : 0,
                        value = this.__wrapped__,
                        interceptor = function(object) { return baseAt(object, paths); };

                    if (length > 1 || this.__actions__.length ||
                        !(value instanceof LazyWrapper) || !isIndex(start)) {
                        return this.thru(interceptor);
                    }
                    value = value.slice(start, +start + (length ? 1 : 0));
                    value.__actions__.push({
                        'func': thru,
                        'args': [interceptor],
                        'thisArg': undefined
                    });
                    return new LodashWrapper(value, this.__chain__).thru(function(array) {
                        if (length && !array.length) {
                            array.push(undefined);
                        }
                        return array;
                    });
                });

                /**
                 * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                 *
                 * @name chain
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 40 }
                 * ];
                 *
                 * // A sequence without explicit chaining.
                 * _(users).head();
                 * // => { 'user': 'barney', 'age': 36 }
                 *
                 * // A sequence with explicit chaining.
                 * _(users)
                 *   .chain()
                 *   .head()
                 *   .pick('user')
                 *   .value();
                 * // => { 'user': 'barney' }
                 */
                function wrapperChain() {
                    return chain(this);
                }

                /**
                 * Executes the chain sequence and returns the wrapped result.
                 *
                 * @name commit
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2];
                 * var wrapped = _(array).push(3);
                 *
                 * console.log(array);
                 * // => [1, 2]
                 *
                 * wrapped = wrapped.commit();
                 * console.log(array);
                 * // => [1, 2, 3]
                 *
                 * wrapped.last();
                 * // => 3
                 *
                 * console.log(array);
                 * // => [1, 2, 3]
                 */
                function wrapperCommit() {
                    return new LodashWrapper(this.value(), this.__chain__);
                }

                /**
                 * Gets the next value on a wrapped object following the
                 * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                 *
                 * @name next
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the next iterator value.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 1 }
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 2 }
                 *
                 * wrapped.next();
                 * // => { 'done': true, 'value': undefined }
                 */
                function wrapperNext() {
                    if (this.__values__ === undefined) {
                        this.__values__ = toArray(this.value());
                    }
                    var done = this.__index__ >= this.__values__.length,
                        value = done ? undefined : this.__values__[this.__index__++];

                    return { 'done': done, 'value': value };
                }

                /**
                 * Enables the wrapper to be iterable.
                 *
                 * @name Symbol.iterator
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the wrapper object.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped[Symbol.iterator]() === wrapped;
                 * // => true
                 *
                 * Array.from(wrapped);
                 * // => [1, 2]
                 */
                function wrapperToIterator() {
                    return this;
                }

                /**
                 * Creates a clone of the chain sequence planting `value` as the wrapped value.
                 *
                 * @name plant
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @param {*} value The value to plant.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
     *   return n * n;
     * }
                 *
                 * var wrapped = _([1, 2]).map(square);
                 * var other = wrapped.plant([3, 4]);
                 *
                 * other.value();
                 * // => [9, 16]
                 *
                 * wrapped.value();
                 * // => [1, 4]
                 */
                function wrapperPlant(value) {
                    var result,
                        parent = this;

                    while (parent instanceof baseLodash) {
                        var clone = wrapperClone(parent);
                        clone.__index__ = 0;
                        clone.__values__ = undefined;
                        if (result) {
                            previous.__wrapped__ = clone;
                        } else {
                            result = clone;
                        }
                        var previous = clone;
                        parent = parent.__wrapped__;
                    }
                    previous.__wrapped__ = value;
                    return result;
                }

                /**
                 * This method is the wrapper version of `_.reverse`.
                 *
                 * **Note:** This method mutates the wrapped array.
                 *
                 * @name reverse
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _(array).reverse().value()
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function wrapperReverse() {
                    var value = this.__wrapped__;
                    if (value instanceof LazyWrapper) {
                        var wrapped = value;
                        if (this.__actions__.length) {
                            wrapped = new LazyWrapper(this);
                        }
                        wrapped = wrapped.reverse();
                        wrapped.__actions__.push({
                            'func': thru,
                            'args': [reverse],
                            'thisArg': undefined
                        });
                        return new LodashWrapper(wrapped, this.__chain__);
                    }
                    return this.thru(reverse);
                }

                /**
                 * Executes the chain sequence to resolve the unwrapped value.
                 *
                 * @name value
                 * @memberOf _
                 * @since 0.1.0
                 * @alias toJSON, valueOf
                 * @category Seq
                 * @returns {*} Returns the resolved unwrapped value.
                 * @example
                 *
                 * _([1, 2, 3]).value();
                 * // => [1, 2, 3]
                 */
                function wrapperValue() {
                    return baseWrapperValue(this.__wrapped__, this.__actions__);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the number of times the key was returned by `iteratee`. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.countBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': 1, '6': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.countBy(['one', 'two', 'three'], 'length');
                 * // => { '3': 2, '5': 1 }
                 */
                var countBy = createAggregator(function(result, value, key) {
                    if (hasOwnProperty.call(result, key)) {
                        ++result[key];
                    } else {
                        baseAssignValue(result, key, 1);
                    }
                });

                /**
                 * Checks if `predicate` returns truthy for **all** elements of `collection`.
                 * Iteration is stopped once `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * **Note:** This method returns `true` for
                 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                 * elements of empty collections.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.every([true, 1, null, 'yes'], Boolean);
                 * // => false
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.every(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.every(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.every(users, 'active');
                 * // => false
                 */
                function every(collection, predicate, guard) {
                    var func = isArray(collection) ? arrayEvery : baseEvery;
                    if (guard && isIterateeCall(collection, predicate, guard)) {
                        predicate = undefined;
                    }
                    return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning an array of all elements
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * **Note:** Unlike `_.remove`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.reject
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * _.filter(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, { 'age': 36, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.filter(users, 'active');
                 * // => objects for ['barney']
                 */
                function filter(collection, predicate) {
                    var func = isArray(collection) ? arrayFilter : baseFilter;
                    return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning the first element
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': true },
                 *   { 'user': 'fred',    'age': 40, 'active': false },
                 *   { 'user': 'pebbles', 'age': 1,  'active': true }
                 * ];
                 *
                 * _.find(users, function(o) { return o.age < 40; });
                 * // => object for 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.find(users, { 'age': 1, 'active': true });
                 * // => object for 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.find(users, ['active', false]);
                 * // => object for 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.find(users, 'active');
                 * // => object for 'barney'
                 */
                var find = createFind(findIndex);

                /**
                 * This method is like `_.find` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=collection.length-1] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
                 * // => 3
                 */
                var findLast = createFind(findLastIndex);

                /**
                 * Creates a flattened array of values by running each element in `collection`
                 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                 * with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
     *   return [n, n];
     * }
                 *
                 * _.flatMap([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMap(collection, iteratee) {
                    return baseFlatten(map(collection, iteratee), 1);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
     *   return [[[n, n]]];
     * }
                 *
                 * _.flatMapDeep([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMapDeep(collection, iteratee) {
                    return baseFlatten(map(collection, iteratee), INFINITY);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
     *   return [[[n, n]]];
     * }
                 *
                 * _.flatMapDepth([1, 2], duplicate, 2);
                 * // => [[1, 1], [2, 2]]
                 */
                function flatMapDepth(collection, iteratee, depth) {
                    depth = depth === undefined ? 1 : toInteger(depth);
                    return baseFlatten(map(collection, iteratee), depth);
                }

                /**
                 * Iterates over elements of `collection` and invokes `iteratee` for each element.
                 * The iteratee is invoked with three arguments: (value, index|key, collection).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * **Note:** As with other "Collections" methods, objects with a "length"
                 * property are iterated like arrays. To avoid this behavior use `_.forIn`
                 * or `_.forOwn` for object iteration.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias each
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEachRight
                 * @example
                 *
                 * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
                 * // => Logs `1` then `2`.
                 *
                 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forEach(collection, iteratee) {
                    var func = isArray(collection) ? arrayEach : baseEach;
                    return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forEach` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @alias eachRight
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEach
                 * @example
                 *
                 * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
                 * // => Logs `2` then `1`.
                 */
                function forEachRight(collection, iteratee) {
                    var func = isArray(collection) ? arrayEachRight : baseEachRight;
                    return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The order of grouped values
                 * is determined by the order they occur in `collection`. The corresponding
                 * value of each key is an array of elements responsible for generating the
                 * key. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': [4.2], '6': [6.1, 6.3] }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.groupBy(['one', 'two', 'three'], 'length');
                 * // => { '3': ['one', 'two'], '5': ['three'] }
                 */
                var groupBy = createAggregator(function(result, value, key) {
                    if (hasOwnProperty.call(result, key)) {
                        result[key].push(value);
                    } else {
                        baseAssignValue(result, key, [value]);
                    }
                });

                /**
                 * Checks if `value` is in `collection`. If `collection` is a string, it's
                 * checked for a substring of `value`, otherwise
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * is used for equality comparisons. If `fromIndex` is negative, it's used as
                 * the offset from the end of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {boolean} Returns `true` if `value` is found, else `false`.
                 * @example
                 *
                 * _.includes([1, 2, 3], 1);
                 * // => true
                 *
                 * _.includes([1, 2, 3], 1, 2);
                 * // => false
                 *
                 * _.includes({ 'a': 1, 'b': 2 }, 1);
                 * // => true
                 *
                 * _.includes('abcd', 'bc');
                 * // => true
                 */
                function includes(collection, value, fromIndex, guard) {
                    collection = isArrayLike(collection) ? collection : values(collection);
                    fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

                    var length = collection.length;
                    if (fromIndex < 0) {
                        fromIndex = nativeMax(length + fromIndex, 0);
                    }
                    return isString(collection)
                        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
                        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
                }

                /**
                 * Invokes the method at `path` of each element in `collection`, returning
                 * an array of the results of each invoked method. Any additional arguments
                 * are provided to each invoked method. If `path` is a function, it's invoked
                 * for, and `this` bound to, each element in `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array|Function|string} path The path of the method to invoke or
                 *  the function invoked per iteration.
                 * @param {...*} [args] The arguments to invoke each method with.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                 * // => [[1, 5, 7], [1, 2, 3]]
                 *
                 * _.invokeMap([123, 456], String.prototype.split, '');
                 * // => [['1', '2', '3'], ['4', '5', '6']]
                 */
                var invokeMap = baseRest(function(collection, path, args) {
                    var index = -1,
                        isFunc = typeof path == 'function',
                        result = isArrayLike(collection) ? Array(collection.length) : [];

                    baseEach(collection, function(value) {
                        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                    });
                    return result;
                });

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the last element responsible for generating the key. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * var array = [
                 *   { 'dir': 'left', 'code': 97 },
                 *   { 'dir': 'right', 'code': 100 }
                 * ];
                 *
                 * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
                 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                 *
                 * _.keyBy(array, 'dir');
                 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                 */
                var keyBy = createAggregator(function(result, value, key) {
                    baseAssignValue(result, key, value);
                });

                /**
                 * Creates an array of values by running each element in `collection` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                 *
                 * The guarded methods are:
                 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 * @example
                 *
                 * function square(n) {
     *   return n * n;
     * }
                 *
                 * _.map([4, 8], square);
                 * // => [16, 64]
                 *
                 * _.map({ 'a': 4, 'b': 8 }, square);
                 * // => [16, 64] (iteration order is not guaranteed)
                 *
                 * var users = [
                 *   { 'user': 'barney' },
                 *   { 'user': 'fred' }
                 * ];
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, 'user');
                 * // => ['barney', 'fred']
                 */
                function map(collection, iteratee) {
                    var func = isArray(collection) ? arrayMap : baseMap;
                    return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.sortBy` except that it allows specifying the sort
                 * orders of the iteratees to sort by. If `orders` is unspecified, all values
                 * are sorted in ascending order. Otherwise, specify an order of "desc" for
                 * descending or "asc" for ascending sort order of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @param {string[]} [orders] The sort orders of `iteratees`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 34 },
                 *   { 'user': 'fred',   'age': 40 },
                 *   { 'user': 'barney', 'age': 36 }
                 * ];
                 *
                 * // Sort by `user` in ascending order and by `age` in descending order.
                 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                 */
                function orderBy(collection, iteratees, orders, guard) {
                    if (collection == null) {
                        return [];
                    }
                    if (!isArray(iteratees)) {
                        iteratees = iteratees == null ? [] : [iteratees];
                    }
                    orders = guard ? undefined : orders;
                    if (!isArray(orders)) {
                        orders = orders == null ? [] : [orders];
                    }
                    return baseOrderBy(collection, iteratees, orders);
                }

                /**
                 * Creates an array of elements split into two groups, the first of which
                 * contains elements `predicate` returns truthy for, the second of which
                 * contains elements `predicate` returns falsey for. The predicate is
                 * invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of grouped elements.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': false },
                 *   { 'user': 'fred',    'age': 40, 'active': true },
                 *   { 'user': 'pebbles', 'age': 1,  'active': false }
                 * ];
                 *
                 * _.partition(users, function(o) { return o.active; });
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.partition(users, { 'age': 1, 'active': false });
                 * // => objects for [['pebbles'], ['barney', 'fred']]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.partition(users, ['active', false]);
                 * // => objects for [['barney', 'pebbles'], ['fred']]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.partition(users, 'active');
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 */
                var partition = createAggregator(function(result, value, key) {
                    result[key ? 0 : 1].push(value);
                }, function() { return [[], []]; });

                /**
                 * Reduces `collection` to a value which is the accumulated result of running
                 * each element in `collection` thru `iteratee`, where each successive
                 * invocation is supplied the return value of the previous. If `accumulator`
                 * is not given, the first element of `collection` is used as the initial
                 * value. The iteratee is invoked with four arguments:
                 * (accumulator, value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.reduce`, `_.reduceRight`, and `_.transform`.
                 *
                 * The guarded methods are:
                 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                 * and `sortBy`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduceRight
                 * @example
                 *
                 * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
                 * // => 3
                 *
                 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                 */
                function reduce(collection, iteratee, accumulator) {
                    var func = isArray(collection) ? arrayReduce : baseReduce,
                        initAccum = arguments.length < 3;

                    return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
                }

                /**
                 * This method is like `_.reduce` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduce
                 * @example
                 *
                 * var array = [[0, 1], [2, 3], [4, 5]];
                 *
                 * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
                 * // => [4, 5, 2, 3, 0, 1]
                 */
                function reduceRight(collection, iteratee, accumulator) {
                    var func = isArray(collection) ? arrayReduceRight : baseReduce,
                        initAccum = arguments.length < 3;

                    return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
                }

                /**
                 * The opposite of `_.filter`; this method returns the elements of `collection`
                 * that `predicate` does **not** return truthy for.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.filter
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': true }
                 * ];
                 *
                 * _.reject(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.reject(users, { 'age': 40, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.reject(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.reject(users, 'active');
                 * // => objects for ['barney']
                 */
                function reject(collection, predicate) {
                    var func = isArray(collection) ? arrayFilter : baseFilter;
                    return func(collection, negate(getIteratee(predicate, 3)));
                }

                /**
                 * Gets a random element from `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 * @example
                 *
                 * _.sample([1, 2, 3, 4]);
                 * // => 2
                 */
                function sample(collection) {
                    var func = isArray(collection) ? arraySample : baseSample;
                    return func(collection);
                }

                /**
                 * Gets `n` random elements at unique keys from `collection` up to the
                 * size of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} [n=1] The number of elements to sample.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the random elements.
                 * @example
                 *
                 * _.sampleSize([1, 2, 3], 2);
                 * // => [3, 1]
                 *
                 * _.sampleSize([1, 2, 3], 4);
                 * // => [2, 3, 1]
                 */
                function sampleSize(collection, n, guard) {
                    if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
                        n = 1;
                    } else {
                        n = toInteger(n);
                    }
                    var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                    return func(collection, n);
                }

                /**
                 * Creates an array of shuffled values, using a version of the
                 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 * @example
                 *
                 * _.shuffle([1, 2, 3, 4]);
                 * // => [4, 1, 3, 2]
                 */
                function shuffle(collection) {
                    var func = isArray(collection) ? arrayShuffle : baseShuffle;
                    return func(collection);
                }

                /**
                 * Gets the size of `collection` by returning its length for array-like
                 * values or the number of own enumerable string keyed properties for objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @returns {number} Returns the collection size.
                 * @example
                 *
                 * _.size([1, 2, 3]);
                 * // => 3
                 *
                 * _.size({ 'a': 1, 'b': 2 });
                 * // => 2
                 *
                 * _.size('pebbles');
                 * // => 7
                 */
                function size(collection) {
                    if (collection == null) {
                        return 0;
                    }
                    if (isArrayLike(collection)) {
                        return isString(collection) ? stringSize(collection) : collection.length;
                    }
                    var tag = getTag(collection);
                    if (tag == mapTag || tag == setTag) {
                        return collection.size;
                    }
                    return baseKeys(collection).length;
                }

                /**
                 * Checks if `predicate` returns truthy for **any** element of `collection`.
                 * Iteration is stopped once `predicate` returns truthy. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.some([null, 0, 'yes', false], Boolean);
                 * // => true
                 *
                 * var users = [
                 *   { 'user': 'barney', 'active': true },
                 *   { 'user': 'fred',   'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.some(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.some(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.some(users, 'active');
                 * // => true
                 */
                function some(collection, predicate, guard) {
                    var func = isArray(collection) ? arraySome : baseSome;
                    if (guard && isIterateeCall(collection, predicate, guard)) {
                        predicate = undefined;
                    }
                    return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Creates an array of elements, sorted in ascending order by the results of
                 * running each element in a collection thru each iteratee. This method
                 * performs a stable sort, that is, it preserves the original sort order of
                 * equal elements. The iteratees are invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 40 },
                 *   { 'user': 'barney', 'age': 34 }
                 * ];
                 *
                 * _.sortBy(users, [function(o) { return o.user; }]);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                 *
                 * _.sortBy(users, ['user', 'age']);
                 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
                 */
                var sortBy = baseRest(function(collection, iteratees) {
                    if (collection == null) {
                        return [];
                    }
                    var length = iteratees.length;
                    if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                        iteratees = [];
                    } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                        iteratees = [iteratees[0]];
                    }
                    return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Gets the timestamp of the number of milliseconds that have elapsed since
                 * the Unix epoch (1 January 1970 00:00:00 UTC).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Date
                 * @returns {number} Returns the timestamp.
                 * @example
                 *
                 * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
                 * // => Logs the number of milliseconds it took for the deferred invocation.
                 */
                var now = ctxNow || function() {
                        return root.Date.now();
                    };

                /*------------------------------------------------------------------------*/

                /**
                 * The opposite of `_.before`; this method creates a function that invokes
                 * `func` once it's called `n` or more times.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {number} n The number of calls before `func` is invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var saves = ['profile', 'settings'];
                 *
                 * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
                 *
                 * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
                 * // => Logs 'done saving!' after the two async saves have completed.
                 */
                function after(n, func) {
                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    n = toInteger(n);
                    return function() {
                        if (--n < 1) {
                            return func.apply(this, arguments);
                        }
                    };
                }

                /**
                 * Creates a function that invokes `func`, with up to `n` arguments,
                 * ignoring any additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @param {number} [n=func.length] The arity cap.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                 * // => [6, 8, 10]
                 */
                function ary(func, n, guard) {
                    n = guard ? undefined : n;
                    n = (func && n == null) ? func.length : n;
                    return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
                }

                /**
                 * Creates a function that invokes `func`, with the `this` binding and arguments
                 * of the created function, while it's called less than `n` times. Subsequent
                 * calls to the created function return the result of the last `func` invocation.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {number} n The number of calls at which `func` is no longer invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * jQuery(element).on('click', _.before(5, addContactToList));
                 * // => Allows adding up to 4 contacts to the list.
                 */
                function before(n, func) {
                    var result;
                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    n = toInteger(n);
                    return function() {
                        if (--n > 0) {
                            result = func.apply(this, arguments);
                        }
                        if (n <= 1) {
                            func = undefined;
                        }
                        return result;
                    };
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of `thisArg`
                 * and `partials` prepended to the arguments it receives.
                 *
                 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                 * property of bound functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to bind.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
                 *
                 * var object = { 'user': 'fred' };
                 *
                 * var bound = _.bind(greet, object, 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bind(greet, object, _, '!');
                 * bound('hi');
                 * // => 'hi fred!'
                 */
                var bind = baseRest(function(func, thisArg, partials) {
                    var bitmask = WRAP_BIND_FLAG;
                    if (partials.length) {
                        var holders = replaceHolders(partials, getHolder(bind));
                        bitmask |= WRAP_PARTIAL_FLAG;
                    }
                    return createWrap(func, bitmask, thisArg, partials, holders);
                });

                /**
                 * Creates a function that invokes the method at `object[key]` with `partials`
                 * prepended to the arguments it receives.
                 *
                 * This method differs from `_.bind` by allowing bound functions to reference
                 * methods that may be redefined or don't yet exist. See
                 * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                 * for more details.
                 *
                 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Function
                 * @param {Object} object The object to invoke the method on.
                 * @param {string} key The key of the method.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
                 *
                 * var bound = _.bindKey(object, 'greet', 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
                 *
                 * bound('!');
                 * // => 'hiya fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bindKey(object, 'greet', _, '!');
                 * bound('hi');
                 * // => 'hiya fred!'
                 */
                var bindKey = baseRest(function(object, key, partials) {
                    var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                    if (partials.length) {
                        var holders = replaceHolders(partials, getHolder(bindKey));
                        bitmask |= WRAP_PARTIAL_FLAG;
                    }
                    return createWrap(key, bitmask, object, partials, holders);
                });

                /**
                 * Creates a function that accepts arguments of `func` and either invokes
                 * `func` returning its result, if at least `arity` number of arguments have
                 * been provided, or returns a function that accepts the remaining `func`
                 * arguments, and so on. The arity of `func` may be specified if `func.length`
                 * is not sufficient.
                 *
                 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
                 *
                 * var curried = _.curry(abc);
                 *
                 * curried(1)(2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(1)(_, 3)(2);
                 * // => [1, 2, 3]
                 */
                function curry(func, arity, guard) {
                    arity = guard ? undefined : arity;
                    var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                    result.placeholder = curry.placeholder;
                    return result;
                }

                /**
                 * This method is like `_.curry` except that arguments are applied to `func`
                 * in the manner of `_.partialRight` instead of `_.partial`.
                 *
                 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
                 *
                 * var curried = _.curryRight(abc);
                 *
                 * curried(3)(2)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(2, 3)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(3)(1, _)(2);
                 * // => [1, 2, 3]
                 */
                function curryRight(func, arity, guard) {
                    arity = guard ? undefined : arity;
                    var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                    result.placeholder = curryRight.placeholder;
                    return result;
                }

                /**
                 * Creates a debounced function that delays invoking `func` until after `wait`
                 * milliseconds have elapsed since the last time the debounced function was
                 * invoked. The debounced function comes with a `cancel` method to cancel
                 * delayed `func` invocations and a `flush` method to immediately invoke them.
                 * Provide `options` to indicate whether `func` should be invoked on the
                 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                 * with the last arguments provided to the debounced function. Subsequent
                 * calls to the debounced function return the result of the last `func`
                 * invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the debounced function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.debounce` and `_.throttle`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to debounce.
                 * @param {number} [wait=0] The number of milliseconds to delay.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=false]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {number} [options.maxWait]
                 *  The maximum time `func` is allowed to be delayed before it's invoked.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new debounced function.
                 * @example
                 *
                 * // Avoid costly calculations while the window size is in flux.
                 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                 *
                 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                 * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
                 *
                 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                 * var source = new EventSource('/stream');
                 * jQuery(source).on('message', debounced);
                 *
                 * // Cancel the trailing debounced invocation.
                 * jQuery(window).on('popstate', debounced.cancel);
                 */
                function debounce(func, wait, options) {
                    var lastArgs,
                        lastThis,
                        maxWait,
                        result,
                        timerId,
                        lastCallTime,
                        lastInvokeTime = 0,
                        leading = false,
                        maxing = false,
                        trailing = true;

                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    wait = toNumber(wait) || 0;
                    if (isObject(options)) {
                        leading = !!options.leading;
                        maxing = 'maxWait' in options;
                        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                        trailing = 'trailing' in options ? !!options.trailing : trailing;
                    }

                    function invokeFunc(time) {
                        var args = lastArgs,
                            thisArg = lastThis;

                        lastArgs = lastThis = undefined;
                        lastInvokeTime = time;
                        result = func.apply(thisArg, args);
                        return result;
                    }

                    function leadingEdge(time) {
                        // Reset any `maxWait` timer.
                        lastInvokeTime = time;
                        // Start the timer for the trailing edge.
                        timerId = setTimeout(timerExpired, wait);
                        // Invoke the leading edge.
                        return leading ? invokeFunc(time) : result;
                    }

                    function remainingWait(time) {
                        var timeSinceLastCall = time - lastCallTime,
                            timeSinceLastInvoke = time - lastInvokeTime,
                            result = wait - timeSinceLastCall;

                        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
                    }

                    function shouldInvoke(time) {
                        var timeSinceLastCall = time - lastCallTime,
                            timeSinceLastInvoke = time - lastInvokeTime;

                        // Either this is the first call, activity has stopped and we're at the
                        // trailing edge, the system time has gone backwards and we're treating
                        // it as the trailing edge, or we've hit the `maxWait` limit.
                        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                    }

                    function timerExpired() {
                        var time = now();
                        if (shouldInvoke(time)) {
                            return trailingEdge(time);
                        }
                        // Restart the timer.
                        timerId = setTimeout(timerExpired, remainingWait(time));
                    }

                    function trailingEdge(time) {
                        timerId = undefined;

                        // Only invoke if we have `lastArgs` which means `func` has been
                        // debounced at least once.
                        if (trailing && lastArgs) {
                            return invokeFunc(time);
                        }
                        lastArgs = lastThis = undefined;
                        return result;
                    }

                    function cancel() {
                        if (timerId !== undefined) {
                            clearTimeout(timerId);
                        }
                        lastInvokeTime = 0;
                        lastArgs = lastCallTime = lastThis = timerId = undefined;
                    }

                    function flush() {
                        return timerId === undefined ? result : trailingEdge(now());
                    }

                    function debounced() {
                        var time = now(),
                            isInvoking = shouldInvoke(time);

                        lastArgs = arguments;
                        lastThis = this;
                        lastCallTime = time;

                        if (isInvoking) {
                            if (timerId === undefined) {
                                return leadingEdge(lastCallTime);
                            }
                            if (maxing) {
                                // Handle invocations in a tight loop.
                                timerId = setTimeout(timerExpired, wait);
                                return invokeFunc(lastCallTime);
                            }
                        }
                        if (timerId === undefined) {
                            timerId = setTimeout(timerExpired, wait);
                        }
                        return result;
                    }
                    debounced.cancel = cancel;
                    debounced.flush = flush;
                    return debounced;
                }

                /**
                 * Defers invoking the `func` until the current call stack has cleared. Any
                 * additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to defer.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
                 * // => Logs 'deferred' after one millisecond.
                 */
                var defer = baseRest(function(func, args) {
                    return baseDelay(func, 1, args);
                });

                /**
                 * Invokes `func` after `wait` milliseconds. Any additional arguments are
                 * provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
                 * // => Logs 'later' after one second.
                 */
                var delay = baseRest(function(func, wait, args) {
                    return baseDelay(func, toNumber(wait) || 0, args);
                });

                /**
                 * Creates a function that invokes `func` with arguments reversed.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to flip arguments for.
                 * @returns {Function} Returns the new flipped function.
                 * @example
                 *
                 * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
                 *
                 * flipped('a', 'b', 'c', 'd');
                 * // => ['d', 'c', 'b', 'a']
                 */
                function flip(func) {
                    return createWrap(func, WRAP_FLIP_FLAG);
                }

                /**
                 * Creates a function that memoizes the result of `func`. If `resolver` is
                 * provided, it determines the cache key for storing the result based on the
                 * arguments provided to the memoized function. By default, the first argument
                 * provided to the memoized function is used as the map cache key. The `func`
                 * is invoked with the `this` binding of the memoized function.
                 *
                 * **Note:** The cache is exposed as the `cache` property on the memoized
                 * function. Its creation may be customized by replacing the `_.memoize.Cache`
                 * constructor with one whose instances implement the
                 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to have its output memoized.
                 * @param {Function} [resolver] The function to resolve the cache key.
                 * @returns {Function} Returns the new memoized function.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 * var other = { 'c': 3, 'd': 4 };
                 *
                 * var values = _.memoize(_.values);
                 * values(object);
                 * // => [1, 2]
                 *
                 * values(other);
                 * // => [3, 4]
                 *
                 * object.a = 2;
                 * values(object);
                 * // => [1, 2]
                 *
                 * // Modify the result cache.
                 * values.cache.set(object, ['a', 'b']);
                 * values(object);
                 * // => ['a', 'b']
                 *
                 * // Replace `_.memoize.Cache`.
                 * _.memoize.Cache = WeakMap;
                 */
                function memoize(func, resolver) {
                    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    var memoized = function() {
                        var args = arguments,
                            key = resolver ? resolver.apply(this, args) : args[0],
                            cache = memoized.cache;

                        if (cache.has(key)) {
                            return cache.get(key);
                        }
                        var result = func.apply(this, args);
                        memoized.cache = cache.set(key, result) || cache;
                        return result;
                    };
                    memoized.cache = new (memoize.Cache || MapCache);
                    return memoized;
                }

                // Expose `MapCache`.
                memoize.Cache = MapCache;

                /**
                 * Creates a function that negates the result of the predicate `func`. The
                 * `func` predicate is invoked with the `this` binding and arguments of the
                 * created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} predicate The predicate to negate.
                 * @returns {Function} Returns the new negated function.
                 * @example
                 *
                 * function isEven(n) {
     *   return n % 2 == 0;
     * }
                 *
                 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                 * // => [1, 3, 5]
                 */
                function negate(predicate) {
                    if (typeof predicate != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return function() {
                        var args = arguments;
                        switch (args.length) {
                            case 0: return !predicate.call(this);
                            case 1: return !predicate.call(this, args[0]);
                            case 2: return !predicate.call(this, args[0], args[1]);
                            case 3: return !predicate.call(this, args[0], args[1], args[2]);
                        }
                        return !predicate.apply(this, args);
                    };
                }

                /**
                 * Creates a function that is restricted to invoking `func` once. Repeat calls
                 * to the function return the value of the first invocation. The `func` is
                 * invoked with the `this` binding and arguments of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var initialize = _.once(createApplication);
                 * initialize();
                 * initialize();
                 * // => `createApplication` is invoked once
                 */
                function once(func) {
                    return before(2, func);
                }

                /**
                 * Creates a function that invokes `func` with its arguments transformed.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Function
                 * @param {Function} func The function to wrap.
                 * @param {...(Function|Function[])} [transforms=[_.identity]]
                 *  The argument transforms.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * function doubled(n) {
     *   return n * 2;
     * }
                 *
                 * function square(n) {
     *   return n * n;
     * }
                 *
                 * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
                 *
                 * func(9, 3);
                 * // => [81, 6]
                 *
                 * func(10, 5);
                 * // => [100, 10]
                 */
                var overArgs = castRest(function(func, transforms) {
                    transforms = (transforms.length == 1 && isArray(transforms[0]))
                        ? arrayMap(transforms[0], baseUnary(getIteratee()))
                        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                    var funcsLength = transforms.length;
                    return baseRest(function(args) {
                        var index = -1,
                            length = nativeMin(args.length, funcsLength);

                        while (++index < length) {
                            args[index] = transforms[index].call(this, args[index]);
                        }
                        return apply(func, this, args);
                    });
                });

                /**
                 * Creates a function that invokes `func` with `partials` prepended to the
                 * arguments it receives. This method is like `_.bind` except it does **not**
                 * alter the `this` binding.
                 *
                 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.2.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
                 *
                 * var sayHelloTo = _.partial(greet, 'hello');
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 *
                 * // Partially applied with placeholders.
                 * var greetFred = _.partial(greet, _, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 */
                var partial = baseRest(function(func, partials) {
                    var holders = replaceHolders(partials, getHolder(partial));
                    return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
                });

                /**
                 * This method is like `_.partial` except that partially applied arguments
                 * are appended to the arguments it receives.
                 *
                 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
                 *
                 * var greetFred = _.partialRight(greet, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 *
                 * // Partially applied with placeholders.
                 * var sayHelloTo = _.partialRight(greet, 'hello', _);
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 */
                var partialRight = baseRest(function(func, partials) {
                    var holders = replaceHolders(partials, getHolder(partialRight));
                    return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
                });

                /**
                 * Creates a function that invokes `func` with arguments arranged according
                 * to the specified `indexes` where the argument value at the first index is
                 * provided as the first argument, the argument value at the second index is
                 * provided as the second argument, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to rearrange arguments for.
                 * @param {...(number|number[])} indexes The arranged argument indexes.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
                 *
                 * rearged('b', 'c', 'a')
                 * // => ['a', 'b', 'c']
                 */
                var rearg = flatRest(function(func, indexes) {
                    return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
                });

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * created function and arguments from `start` and beyond provided as
                 * an array.
                 *
                 * **Note:** This method is based on the
                 * [rest parameter](https://mdn.io/rest_parameters).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
                 *
                 * say('hello', 'fred', 'barney', 'pebbles');
                 * // => 'hello fred, barney, & pebbles'
                 */
                function rest(func, start) {
                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    start = start === undefined ? start : toInteger(start);
                    return baseRest(func, start);
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * create function and an array of arguments much like
                 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                 *
                 * **Note:** This method is based on the
                 * [spread operator](https://mdn.io/spread_operator).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Function
                 * @param {Function} func The function to spread arguments over.
                 * @param {number} [start=0] The start position of the spread.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
                 *
                 * say(['fred', 'hello']);
                 * // => 'fred says hello'
                 *
                 * var numbers = Promise.all([
                 *   Promise.resolve(40),
                 *   Promise.resolve(36)
                 * ]);
                 *
                 * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
                 * // => a Promise of 76
                 */
                function spread(func, start) {
                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    start = start == null ? 0 : nativeMax(toInteger(start), 0);
                    return baseRest(function(args) {
                        var array = args[start],
                            otherArgs = castSlice(args, 0, start);

                        if (array) {
                            arrayPush(otherArgs, array);
                        }
                        return apply(func, this, otherArgs);
                    });
                }

                /**
                 * Creates a throttled function that only invokes `func` at most once per
                 * every `wait` milliseconds. The throttled function comes with a `cancel`
                 * method to cancel delayed `func` invocations and a `flush` method to
                 * immediately invoke them. Provide `options` to indicate whether `func`
                 * should be invoked on the leading and/or trailing edge of the `wait`
                 * timeout. The `func` is invoked with the last arguments provided to the
                 * throttled function. Subsequent calls to the throttled function return the
                 * result of the last `func` invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the throttled function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.throttle` and `_.debounce`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to throttle.
                 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=true]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new throttled function.
                 * @example
                 *
                 * // Avoid excessively updating the position while scrolling.
                 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                 *
                 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                 * jQuery(element).on('click', throttled);
                 *
                 * // Cancel the trailing throttled invocation.
                 * jQuery(window).on('popstate', throttled.cancel);
                 */
                function throttle(func, wait, options) {
                    var leading = true,
                        trailing = true;

                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    if (isObject(options)) {
                        leading = 'leading' in options ? !!options.leading : leading;
                        trailing = 'trailing' in options ? !!options.trailing : trailing;
                    }
                    return debounce(func, wait, {
                        'leading': leading,
                        'maxWait': wait,
                        'trailing': trailing
                    });
                }

                /**
                 * Creates a function that accepts up to one argument, ignoring any
                 * additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.unary(parseInt));
                 * // => [6, 8, 10]
                 */
                function unary(func) {
                    return ary(func, 1);
                }

                /**
                 * Creates a function that provides `value` to `wrapper` as its first
                 * argument. Any additional arguments provided to the function are appended
                 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                 * binding of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {*} value The value to wrap.
                 * @param {Function} [wrapper=identity] The wrapper function.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
                 *
                 * p('fred, barney, & pebbles');
                 * // => '<p>fred, barney, &amp; pebbles</p>'
                 */
                function wrap(value, wrapper) {
                    return partial(castFunction(wrapper), value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Casts `value` as an array if it's not one.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Lang
                 * @param {*} value The value to inspect.
                 * @returns {Array} Returns the cast array.
                 * @example
                 *
                 * _.castArray(1);
                 * // => [1]
                 *
                 * _.castArray({ 'a': 1 });
                 * // => [{ 'a': 1 }]
                 *
                 * _.castArray('abc');
                 * // => ['abc']
                 *
                 * _.castArray(null);
                 * // => [null]
                 *
                 * _.castArray(undefined);
                 * // => [undefined]
                 *
                 * _.castArray();
                 * // => []
                 *
                 * var array = [1, 2, 3];
                 * console.log(_.castArray(array) === array);
                 * // => true
                 */
                function castArray() {
                    if (!arguments.length) {
                        return [];
                    }
                    var value = arguments[0];
                    return isArray(value) ? value : [value];
                }

                /**
                 * Creates a shallow clone of `value`.
                 *
                 * **Note:** This method is loosely based on the
                 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                 * and supports cloning arrays, array buffers, booleans, date objects, maps,
                 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                 * arrays. The own enumerable properties of `arguments` objects are cloned
                 * as plain objects. An empty object is returned for uncloneable values such
                 * as error objects, functions, DOM nodes, and WeakMaps.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeep
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var shallow = _.clone(objects);
                 * console.log(shallow[0] === objects[0]);
                 * // => true
                 */
                function clone(value) {
                    return baseClone(value, CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.clone` except that it accepts `customizer` which
                 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                 * cloning is handled by the method instead. The `customizer` is invoked with
                 * up to four arguments; (value [, index|key, object, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeepWith
                 * @example
                 *
                 * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
                 *
                 * var el = _.cloneWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 0
                 */
                function cloneWith(value, customizer) {
                    customizer = typeof customizer == 'function' ? customizer : undefined;
                    return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                }

                /**
                 * This method is like `_.clone` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.clone
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var deep = _.cloneDeep(objects);
                 * console.log(deep[0] === objects[0]);
                 * // => false
                 */
                function cloneDeep(value) {
                    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.cloneWith` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.cloneWith
                 * @example
                 *
                 * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
                 *
                 * var el = _.cloneDeepWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 20
                 */
                function cloneDeepWith(value, customizer) {
                    customizer = typeof customizer == 'function' ? customizer : undefined;
                    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                }

                /**
                 * Checks if `object` conforms to `source` by invoking the predicate
                 * properties of `source` with the corresponding property values of `object`.
                 *
                 * **Note:** This method is equivalent to `_.conforms` when `source` is
                 * partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                 * // => true
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                 * // => false
                 */
                function conformsTo(object, source) {
                    return source == null || baseConformsTo(object, source, keys(source));
                }

                /**
                 * Performs a
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * comparison between two values to determine if they are equivalent.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.eq(object, object);
                 * // => true
                 *
                 * _.eq(object, other);
                 * // => false
                 *
                 * _.eq('a', 'a');
                 * // => true
                 *
                 * _.eq('a', Object('a'));
                 * // => false
                 *
                 * _.eq(NaN, NaN);
                 * // => true
                 */
                function eq(value, other) {
                    return value === other || (value !== value && other !== other);
                }

                /**
                 * Checks if `value` is greater than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 * @see _.lt
                 * @example
                 *
                 * _.gt(3, 1);
                 * // => true
                 *
                 * _.gt(3, 3);
                 * // => false
                 *
                 * _.gt(1, 3);
                 * // => false
                 */
                var gt = createRelationalOperation(baseGt);

                /**
                 * Checks if `value` is greater than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than or equal to
                 *  `other`, else `false`.
                 * @see _.lte
                 * @example
                 *
                 * _.gte(3, 1);
                 * // => true
                 *
                 * _.gte(3, 3);
                 * // => true
                 *
                 * _.gte(1, 3);
                 * // => false
                 */
                var gte = createRelationalOperation(function(value, other) {
                    return value >= other;
                });

                /**
                 * Checks if `value` is likely an `arguments` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArguments(function() { return arguments; }());
                 * // => true
                 *
                 * _.isArguments([1, 2, 3]);
                 * // => false
                 */
                var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
                    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                        !propertyIsEnumerable.call(value, 'callee');
                };

                /**
                 * Checks if `value` is classified as an `Array` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                 * @example
                 *
                 * _.isArray([1, 2, 3]);
                 * // => true
                 *
                 * _.isArray(document.body.children);
                 * // => false
                 *
                 * _.isArray('abc');
                 * // => false
                 *
                 * _.isArray(_.noop);
                 * // => false
                 */
                var isArray = Array.isArray;

                /**
                 * Checks if `value` is classified as an `ArrayBuffer` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 * @example
                 *
                 * _.isArrayBuffer(new ArrayBuffer(2));
                 * // => true
                 *
                 * _.isArrayBuffer(new Array(2));
                 * // => false
                 */
                var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

                /**
                 * Checks if `value` is array-like. A value is considered array-like if it's
                 * not a function and has a `value.length` that's an integer greater than or
                 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                 * @example
                 *
                 * _.isArrayLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLike(document.body.children);
                 * // => true
                 *
                 * _.isArrayLike('abc');
                 * // => true
                 *
                 * _.isArrayLike(_.noop);
                 * // => false
                 */
                function isArrayLike(value) {
                    return value != null && isLength(value.length) && !isFunction(value);
                }

                /**
                 * This method is like `_.isArrayLike` except that it also checks if `value`
                 * is an object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array-like object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArrayLikeObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLikeObject(document.body.children);
                 * // => true
                 *
                 * _.isArrayLikeObject('abc');
                 * // => false
                 *
                 * _.isArrayLikeObject(_.noop);
                 * // => false
                 */
                function isArrayLikeObject(value) {
                    return isObjectLike(value) && isArrayLike(value);
                }

                /**
                 * Checks if `value` is classified as a boolean primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                 * @example
                 *
                 * _.isBoolean(false);
                 * // => true
                 *
                 * _.isBoolean(null);
                 * // => false
                 */
                function isBoolean(value) {
                    return value === true || value === false ||
                        (isObjectLike(value) && baseGetTag(value) == boolTag);
                }

                /**
                 * Checks if `value` is a buffer.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                 * @example
                 *
                 * _.isBuffer(new Buffer(2));
                 * // => true
                 *
                 * _.isBuffer(new Uint8Array(2));
                 * // => false
                 */
                var isBuffer = nativeIsBuffer || stubFalse;

                /**
                 * Checks if `value` is classified as a `Date` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 * @example
                 *
                 * _.isDate(new Date);
                 * // => true
                 *
                 * _.isDate('Mon April 23 2012');
                 * // => false
                 */
                var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                /**
                 * Checks if `value` is likely a DOM element.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                 * @example
                 *
                 * _.isElement(document.body);
                 * // => true
                 *
                 * _.isElement('<body>');
                 * // => false
                 */
                function isElement(value) {
                    return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                }

                /**
                 * Checks if `value` is an empty object, collection, map, or set.
                 *
                 * Objects are considered empty if they have no own enumerable string keyed
                 * properties.
                 *
                 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                 * jQuery-like collections are considered empty if they have a `length` of `0`.
                 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                 * @example
                 *
                 * _.isEmpty(null);
                 * // => true
                 *
                 * _.isEmpty(true);
                 * // => true
                 *
                 * _.isEmpty(1);
                 * // => true
                 *
                 * _.isEmpty([1, 2, 3]);
                 * // => false
                 *
                 * _.isEmpty({ 'a': 1 });
                 * // => false
                 */
                function isEmpty(value) {
                    if (value == null) {
                        return true;
                    }
                    if (isArrayLike(value) &&
                        (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                        return !value.length;
                    }
                    var tag = getTag(value);
                    if (tag == mapTag || tag == setTag) {
                        return !value.size;
                    }
                    if (isPrototype(value)) {
                        return !baseKeys(value).length;
                    }
                    for (var key in value) {
                        if (hasOwnProperty.call(value, key)) {
                            return false;
                        }
                    }
                    return true;
                }

                /**
                 * Performs a deep comparison between two values to determine if they are
                 * equivalent.
                 *
                 * **Note:** This method supports comparing arrays, array buffers, booleans,
                 * date objects, error objects, maps, numbers, `Object` objects, regexes,
                 * sets, strings, symbols, and typed arrays. `Object` objects are compared
                 * by their own, not inherited, enumerable properties. Functions and DOM
                 * nodes are compared by strict equality, i.e. `===`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.isEqual(object, other);
                 * // => true
                 *
                 * object === other;
                 * // => false
                 */
                function isEqual(value, other) {
                    return baseIsEqual(value, other);
                }

                /**
                 * This method is like `_.isEqual` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with up to
                 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
                 *
                 * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
                 *
                 * var array = ['hello', 'goodbye'];
                 * var other = ['hi', 'goodbye'];
                 *
                 * _.isEqualWith(array, other, customizer);
                 * // => true
                 */
                function isEqualWith(value, other, customizer) {
                    customizer = typeof customizer == 'function' ? customizer : undefined;
                    var result = customizer ? customizer(value, other) : undefined;
                    return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
                }

                /**
                 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                 * `SyntaxError`, `TypeError`, or `URIError` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                 * @example
                 *
                 * _.isError(new Error);
                 * // => true
                 *
                 * _.isError(Error);
                 * // => false
                 */
                function isError(value) {
                    if (!isObjectLike(value)) {
                        return false;
                    }
                    var tag = baseGetTag(value);
                    return tag == errorTag || tag == domExcTag ||
                        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
                }

                /**
                 * Checks if `value` is a finite primitive number.
                 *
                 * **Note:** This method is based on
                 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                 * @example
                 *
                 * _.isFinite(3);
                 * // => true
                 *
                 * _.isFinite(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isFinite(Infinity);
                 * // => false
                 *
                 * _.isFinite('3');
                 * // => false
                 */
                function isFinite(value) {
                    return typeof value == 'number' && nativeIsFinite(value);
                }

                /**
                 * Checks if `value` is classified as a `Function` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                 * @example
                 *
                 * _.isFunction(_);
                 * // => true
                 *
                 * _.isFunction(/abc/);
                 * // => false
                 */
                function isFunction(value) {
                    if (!isObject(value)) {
                        return false;
                    }
                    // The use of `Object#toString` avoids issues with the `typeof` operator
                    // in Safari 9 which returns 'object' for typed arrays and other constructors.
                    var tag = baseGetTag(value);
                    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                }

                /**
                 * Checks if `value` is an integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                 * @example
                 *
                 * _.isInteger(3);
                 * // => true
                 *
                 * _.isInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isInteger(Infinity);
                 * // => false
                 *
                 * _.isInteger('3');
                 * // => false
                 */
                function isInteger(value) {
                    return typeof value == 'number' && value == toInteger(value);
                }

                /**
                 * Checks if `value` is a valid array-like length.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                 * @example
                 *
                 * _.isLength(3);
                 * // => true
                 *
                 * _.isLength(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isLength(Infinity);
                 * // => false
                 *
                 * _.isLength('3');
                 * // => false
                 */
                function isLength(value) {
                    return typeof value == 'number' &&
                        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                }

                /**
                 * Checks if `value` is the
                 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                 * @example
                 *
                 * _.isObject({});
                 * // => true
                 *
                 * _.isObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isObject(_.noop);
                 * // => true
                 *
                 * _.isObject(null);
                 * // => false
                 */
                function isObject(value) {
                    var type = typeof value;
                    return value != null && (type == 'object' || type == 'function');
                }

                /**
                 * Checks if `value` is object-like. A value is object-like if it's not `null`
                 * and has a `typeof` result of "object".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                 * @example
                 *
                 * _.isObjectLike({});
                 * // => true
                 *
                 * _.isObjectLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isObjectLike(_.noop);
                 * // => false
                 *
                 * _.isObjectLike(null);
                 * // => false
                 */
                function isObjectLike(value) {
                    return value != null && typeof value == 'object';
                }

                /**
                 * Checks if `value` is classified as a `Map` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 * @example
                 *
                 * _.isMap(new Map);
                 * // => true
                 *
                 * _.isMap(new WeakMap);
                 * // => false
                 */
                var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                /**
                 * Performs a partial deep comparison between `object` and `source` to
                 * determine if `object` contains equivalent property values.
                 *
                 * **Note:** This method is equivalent to `_.matches` when `source` is
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.isMatch(object, { 'b': 2 });
                 * // => true
                 *
                 * _.isMatch(object, { 'b': 1 });
                 * // => false
                 */
                function isMatch(object, source) {
                    return object === source || baseIsMatch(object, source, getMatchData(source));
                }

                /**
                 * This method is like `_.isMatch` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with five
                 * arguments: (objValue, srcValue, index|key, object, source).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
                 *
                 * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
                 *
                 * var object = { 'greeting': 'hello' };
                 * var source = { 'greeting': 'hi' };
                 *
                 * _.isMatchWith(object, source, customizer);
                 * // => true
                 */
                function isMatchWith(object, source, customizer) {
                    customizer = typeof customizer == 'function' ? customizer : undefined;
                    return baseIsMatch(object, source, getMatchData(source), customizer);
                }

                /**
                 * Checks if `value` is `NaN`.
                 *
                 * **Note:** This method is based on
                 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                 * `undefined` and other non-number values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                 * @example
                 *
                 * _.isNaN(NaN);
                 * // => true
                 *
                 * _.isNaN(new Number(NaN));
                 * // => true
                 *
                 * isNaN(undefined);
                 * // => true
                 *
                 * _.isNaN(undefined);
                 * // => false
                 */
                function isNaN(value) {
                    // An `NaN` primitive is the only value that is not equal to itself.
                    // Perform the `toStringTag` check first to avoid errors with some
                    // ActiveX objects in IE.
                    return isNumber(value) && value != +value;
                }

                /**
                 * Checks if `value` is a pristine native function.
                 *
                 * **Note:** This method can't reliably detect native functions in the presence
                 * of the core-js package because core-js circumvents this kind of detection.
                 * Despite multiple requests, the core-js maintainer has made it clear: any
                 * attempt to fix the detection will be obstructed. As a result, we're left
                 * with little choice but to throw an error. Unfortunately, this also affects
                 * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                 * which rely on core-js.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 * @example
                 *
                 * _.isNative(Array.prototype.push);
                 * // => true
                 *
                 * _.isNative(_);
                 * // => false
                 */
                function isNative(value) {
                    if (isMaskable(value)) {
                        throw new Error(CORE_ERROR_TEXT);
                    }
                    return baseIsNative(value);
                }

                /**
                 * Checks if `value` is `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                 * @example
                 *
                 * _.isNull(null);
                 * // => true
                 *
                 * _.isNull(void 0);
                 * // => false
                 */
                function isNull(value) {
                    return value === null;
                }

                /**
                 * Checks if `value` is `null` or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                 * @example
                 *
                 * _.isNil(null);
                 * // => true
                 *
                 * _.isNil(void 0);
                 * // => true
                 *
                 * _.isNil(NaN);
                 * // => false
                 */
                function isNil(value) {
                    return value == null;
                }

                /**
                 * Checks if `value` is classified as a `Number` primitive or object.
                 *
                 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                 * classified as numbers, use the `_.isFinite` method.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                 * @example
                 *
                 * _.isNumber(3);
                 * // => true
                 *
                 * _.isNumber(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isNumber(Infinity);
                 * // => true
                 *
                 * _.isNumber('3');
                 * // => false
                 */
                function isNumber(value) {
                    return typeof value == 'number' ||
                        (isObjectLike(value) && baseGetTag(value) == numberTag);
                }

                /**
                 * Checks if `value` is a plain object, that is, an object created by the
                 * `Object` constructor or one with a `[[Prototype]]` of `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.8.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     * }
                 *
                 * _.isPlainObject(new Foo);
                 * // => false
                 *
                 * _.isPlainObject([1, 2, 3]);
                 * // => false
                 *
                 * _.isPlainObject({ 'x': 0, 'y': 0 });
                 * // => true
                 *
                 * _.isPlainObject(Object.create(null));
                 * // => true
                 */
                function isPlainObject(value) {
                    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                        return false;
                    }
                    var proto = getPrototype(value);
                    if (proto === null) {
                        return true;
                    }
                    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                        funcToString.call(Ctor) == objectCtorString;
                }

                /**
                 * Checks if `value` is classified as a `RegExp` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 * @example
                 *
                 * _.isRegExp(/abc/);
                 * // => true
                 *
                 * _.isRegExp('/abc/');
                 * // => false
                 */
                var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

                /**
                 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                 * double precision number which isn't the result of a rounded unsafe integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                 * @example
                 *
                 * _.isSafeInteger(3);
                 * // => true
                 *
                 * _.isSafeInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isSafeInteger(Infinity);
                 * // => false
                 *
                 * _.isSafeInteger('3');
                 * // => false
                 */
                function isSafeInteger(value) {
                    return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                }

                /**
                 * Checks if `value` is classified as a `Set` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 * @example
                 *
                 * _.isSet(new Set);
                 * // => true
                 *
                 * _.isSet(new WeakSet);
                 * // => false
                 */
                var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                /**
                 * Checks if `value` is classified as a `String` primitive or object.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                 * @example
                 *
                 * _.isString('abc');
                 * // => true
                 *
                 * _.isString(1);
                 * // => false
                 */
                function isString(value) {
                    return typeof value == 'string' ||
                        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
                }

                /**
                 * Checks if `value` is classified as a `Symbol` primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                 * @example
                 *
                 * _.isSymbol(Symbol.iterator);
                 * // => true
                 *
                 * _.isSymbol('abc');
                 * // => false
                 */
                function isSymbol(value) {
                    return typeof value == 'symbol' ||
                        (isObjectLike(value) && baseGetTag(value) == symbolTag);
                }

                /**
                 * Checks if `value` is classified as a typed array.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 * @example
                 *
                 * _.isTypedArray(new Uint8Array);
                 * // => true
                 *
                 * _.isTypedArray([]);
                 * // => false
                 */
                var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                /**
                 * Checks if `value` is `undefined`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                 * @example
                 *
                 * _.isUndefined(void 0);
                 * // => true
                 *
                 * _.isUndefined(null);
                 * // => false
                 */
                function isUndefined(value) {
                    return value === undefined;
                }

                /**
                 * Checks if `value` is classified as a `WeakMap` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                 * @example
                 *
                 * _.isWeakMap(new WeakMap);
                 * // => true
                 *
                 * _.isWeakMap(new Map);
                 * // => false
                 */
                function isWeakMap(value) {
                    return isObjectLike(value) && getTag(value) == weakMapTag;
                }

                /**
                 * Checks if `value` is classified as a `WeakSet` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                 * @example
                 *
                 * _.isWeakSet(new WeakSet);
                 * // => true
                 *
                 * _.isWeakSet(new Set);
                 * // => false
                 */
                function isWeakSet(value) {
                    return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                }

                /**
                 * Checks if `value` is less than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 * @see _.gt
                 * @example
                 *
                 * _.lt(1, 3);
                 * // => true
                 *
                 * _.lt(3, 3);
                 * // => false
                 *
                 * _.lt(3, 1);
                 * // => false
                 */
                var lt = createRelationalOperation(baseLt);

                /**
                 * Checks if `value` is less than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than or equal to
                 *  `other`, else `false`.
                 * @see _.gte
                 * @example
                 *
                 * _.lte(1, 3);
                 * // => true
                 *
                 * _.lte(3, 3);
                 * // => true
                 *
                 * _.lte(3, 1);
                 * // => false
                 */
                var lte = createRelationalOperation(function(value, other) {
                    return value <= other;
                });

                /**
                 * Converts `value` to an array.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the converted array.
                 * @example
                 *
                 * _.toArray({ 'a': 1, 'b': 2 });
                 * // => [1, 2]
                 *
                 * _.toArray('abc');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toArray(1);
                 * // => []
                 *
                 * _.toArray(null);
                 * // => []
                 */
                function toArray(value) {
                    if (!value) {
                        return [];
                    }
                    if (isArrayLike(value)) {
                        return isString(value) ? stringToArray(value) : copyArray(value);
                    }
                    if (symIterator && value[symIterator]) {
                        return iteratorToArray(value[symIterator]());
                    }
                    var tag = getTag(value),
                        func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

                    return func(value);
                }

                /**
                 * Converts `value` to a finite number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.12.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted number.
                 * @example
                 *
                 * _.toFinite(3.2);
                 * // => 3.2
                 *
                 * _.toFinite(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toFinite(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toFinite('3.2');
                 * // => 3.2
                 */
                function toFinite(value) {
                    if (!value) {
                        return value === 0 ? value : 0;
                    }
                    value = toNumber(value);
                    if (value === INFINITY || value === -INFINITY) {
                        var sign = (value < 0 ? -1 : 1);
                        return sign * MAX_INTEGER;
                    }
                    return value === value ? value : 0;
                }

                /**
                 * Converts `value` to an integer.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toInteger(3.2);
                 * // => 3
                 *
                 * _.toInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toInteger(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toInteger('3.2');
                 * // => 3
                 */
                function toInteger(value) {
                    var result = toFinite(value),
                        remainder = result % 1;

                    return result === result ? (remainder ? result - remainder : result) : 0;
                }

                /**
                 * Converts `value` to an integer suitable for use as the length of an
                 * array-like object.
                 *
                 * **Note:** This method is based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toLength(3.2);
                 * // => 3
                 *
                 * _.toLength(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toLength(Infinity);
                 * // => 4294967295
                 *
                 * _.toLength('3.2');
                 * // => 3
                 */
                function toLength(value) {
                    return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                }

                /**
                 * Converts `value` to a number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 * @example
                 *
                 * _.toNumber(3.2);
                 * // => 3.2
                 *
                 * _.toNumber(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toNumber(Infinity);
                 * // => Infinity
                 *
                 * _.toNumber('3.2');
                 * // => 3.2
                 */
                function toNumber(value) {
                    if (typeof value == 'number') {
                        return value;
                    }
                    if (isSymbol(value)) {
                        return NAN;
                    }
                    if (isObject(value)) {
                        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                        value = isObject(other) ? (other + '') : other;
                    }
                    if (typeof value != 'string') {
                        return value === 0 ? value : +value;
                    }
                    value = value.replace(reTrim, '');
                    var isBinary = reIsBinary.test(value);
                    return (isBinary || reIsOctal.test(value))
                        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                        : (reIsBadHex.test(value) ? NAN : +value);
                }

                /**
                 * Converts `value` to a plain object flattening inherited enumerable string
                 * keyed properties of `value` to own properties of the plain object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Object} Returns the converted plain object.
                 * @example
                 *
                 * function Foo() {
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.assign({ 'a': 1 }, new Foo);
                 * // => { 'a': 1, 'b': 2 }
                 *
                 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                 * // => { 'a': 1, 'b': 2, 'c': 3 }
                 */
                function toPlainObject(value) {
                    return copyObject(value, keysIn(value));
                }

                /**
                 * Converts `value` to a safe integer. A safe integer can be compared and
                 * represented correctly.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toSafeInteger(3.2);
                 * // => 3
                 *
                 * _.toSafeInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toSafeInteger(Infinity);
                 * // => 9007199254740991
                 *
                 * _.toSafeInteger('3.2');
                 * // => 3
                 */
                function toSafeInteger(value) {
                    return value
                        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                        : (value === 0 ? value : 0);
                }

                /**
                 * Converts `value` to a string. An empty string is returned for `null`
                 * and `undefined` values. The sign of `-0` is preserved.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.toString(null);
                 * // => ''
                 *
                 * _.toString(-0);
                 * // => '-0'
                 *
                 * _.toString([1, 2, 3]);
                 * // => '1,2,3'
                 */
                function toString(value) {
                    return value == null ? '' : baseToString(value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Assigns own enumerable string keyed properties of source objects to the
                 * destination object. Source objects are applied from left to right.
                 * Subsequent sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object` and is loosely based on
                 * [`Object.assign`](https://mdn.io/Object/assign).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assignIn
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     * }
                 *
                 * function Bar() {
     *   this.c = 3;
     * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assign({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var assign = createAssigner(function(object, source) {
                    if (isPrototype(source) || isArrayLike(source)) {
                        copyObject(source, keys(source), object);
                        return;
                    }
                    for (var key in source) {
                        if (hasOwnProperty.call(source, key)) {
                            assignValue(object, key, source[key]);
                        }
                    }
                });

                /**
                 * This method is like `_.assign` except that it iterates over own and
                 * inherited source properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extend
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assign
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     * }
                 *
                 * function Bar() {
     *   this.c = 3;
     * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                 */
                var assignIn = createAssigner(function(object, source) {
                    copyObject(source, keysIn(source), object);
                });

                /**
                 * This method is like `_.assignIn` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extendWith
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
                 *
                 * var defaults = _.partialRight(_.assignInWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
                    copyObject(source, keysIn(source), object, customizer);
                });

                /**
                 * This method is like `_.assign` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignInWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
                 *
                 * var defaults = _.partialRight(_.assignWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
                    copyObject(source, keys(source), object, customizer);
                });

                /**
                 * Creates an array of values corresponding to `paths` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Array} Returns the picked values.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _.at(object, ['a[0].b.c', 'a[1]']);
                 * // => [3, 4]
                 */
                var at = flatRest(baseAt);

                /**
                 * Creates an object that inherits from the `prototype` object. If a
                 * `properties` object is given, its own enumerable string keyed properties
                 * are assigned to the created object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Object
                 * @param {Object} prototype The object to inherit from.
                 * @param {Object} [properties] The properties to assign to the object.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
                 *
                 * function Circle() {
     *   Shape.call(this);
     * }
                 *
                 * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
                 *
                 * var circle = new Circle;
                 * circle instanceof Circle;
                 * // => true
                 *
                 * circle instanceof Shape;
                 * // => true
                 */
                function create(prototype, properties) {
                    var result = baseCreate(prototype);
                    return properties == null ? result : baseAssign(result, properties);
                }

                /**
                 * Assigns own and inherited enumerable string keyed properties of source
                 * objects to the destination object for all destination properties that
                 * resolve to `undefined`. Source objects are applied from left to right.
                 * Once a property is set, additional values of the same property are ignored.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaultsDeep
                 * @example
                 *
                 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var defaults = baseRest(function(args) {
                    args.push(undefined, customDefaultsAssignIn);
                    return apply(assignInWith, undefined, args);
                });

                /**
                 * This method is like `_.defaults` except that it recursively assigns
                 * default properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaults
                 * @example
                 *
                 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                 * // => { 'a': { 'b': 2, 'c': 3 } }
                 */
                var defaultsDeep = baseRest(function(args) {
                    args.push(undefined, customDefaultsMerge);
                    return apply(mergeWith, undefined, args);
                });

                /**
                 * This method is like `_.find` except that it returns the key of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
                 *
                 * _.findKey(users, function(o) { return o.age < 40; });
                 * // => 'barney' (iteration order is not guaranteed)
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findKey(users, { 'age': 1, 'active': true });
                 * // => 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findKey(users, 'active');
                 * // => 'barney'
                 */
                function findKey(object, predicate) {
                    return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                }

                /**
                 * This method is like `_.findKey` except that it iterates over elements of
                 * a collection in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
                 *
                 * _.findLastKey(users, function(o) { return o.age < 40; });
                 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastKey(users, { 'age': 36, 'active': true });
                 * // => 'barney'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastKey(users, 'active');
                 * // => 'pebbles'
                 */
                function findLastKey(object, predicate) {
                    return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                }

                /**
                 * Iterates over own and inherited enumerable string keyed properties of an
                 * object and invokes `iteratee` for each property. The iteratee is invoked
                 * with three arguments: (value, key, object). Iteratee functions may exit
                 * iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forInRight
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
                 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                 */
                function forIn(object, iteratee) {
                    return object == null
                        ? object
                        : baseFor(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * This method is like `_.forIn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forIn
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
                 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                 */
                function forInRight(object, iteratee) {
                    return object == null
                        ? object
                        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * Iterates over own enumerable string keyed properties of an object and
                 * invokes `iteratee` for each property. The iteratee is invoked with three
                 * arguments: (value, key, object). Iteratee functions may exit iteration
                 * early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwnRight
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forOwn(object, iteratee) {
                    return object && baseForOwn(object, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forOwn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwn
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
                 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                 */
                function forOwnRight(object, iteratee) {
                    return object && baseForOwnRight(object, getIteratee(iteratee, 3));
                }

                /**
                 * Creates an array of function property names from own enumerable properties
                 * of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functionsIn
                 * @example
                 *
                 * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functions(new Foo);
                 * // => ['a', 'b']
                 */
                function functions(object) {
                    return object == null ? [] : baseFunctions(object, keys(object));
                }

                /**
                 * Creates an array of function property names from own and inherited
                 * enumerable properties of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functions
                 * @example
                 *
                 * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functionsIn(new Foo);
                 * // => ['a', 'b', 'c']
                 */
                function functionsIn(object) {
                    return object == null ? [] : baseFunctions(object, keysIn(object));
                }

                /**
                 * Gets the value at `path` of `object`. If the resolved value is
                 * `undefined`, the `defaultValue` is returned in its place.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.get(object, 'a[0].b.c');
                 * // => 3
                 *
                 * _.get(object, ['a', '0', 'b', 'c']);
                 * // => 3
                 *
                 * _.get(object, 'a.b.c', 'default');
                 * // => 'default'
                 */
                function get(object, path, defaultValue) {
                    var result = object == null ? undefined : baseGet(object, path);
                    return result === undefined ? defaultValue : result;
                }

                /**
                 * Checks if `path` is a direct property of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = { 'a': { 'b': 2 } };
                 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.has(object, 'a');
                 * // => true
                 *
                 * _.has(object, 'a.b');
                 * // => true
                 *
                 * _.has(object, ['a', 'b']);
                 * // => true
                 *
                 * _.has(other, 'a');
                 * // => false
                 */
                function has(object, path) {
                    return object != null && hasPath(object, path, baseHas);
                }

                /**
                 * Checks if `path` is a direct or inherited property of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.hasIn(object, 'a');
                 * // => true
                 *
                 * _.hasIn(object, 'a.b');
                 * // => true
                 *
                 * _.hasIn(object, ['a', 'b']);
                 * // => true
                 *
                 * _.hasIn(object, 'b');
                 * // => false
                 */
                function hasIn(object, path) {
                    return object != null && hasPath(object, path, baseHasIn);
                }

                /**
                 * Creates an object composed of the inverted keys and values of `object`.
                 * If `object` contains duplicate values, subsequent values overwrite
                 * property assignments of previous values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invert(object);
                 * // => { '1': 'c', '2': 'b' }
                 */
                var invert = createInverter(function(result, value, key) {
                    result[value] = key;
                }, constant(identity));

                /**
                 * This method is like `_.invert` except that the inverted object is generated
                 * from the results of running each element of `object` thru `iteratee`. The
                 * corresponding inverted value of each inverted key is an array of keys
                 * responsible for generating the inverted value. The iteratee is invoked
                 * with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invertBy(object);
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 *
                 * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
                 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                 */
                var invertBy = createInverter(function(result, value, key) {
                    if (hasOwnProperty.call(result, value)) {
                        result[value].push(key);
                    } else {
                        result[value] = [key];
                    }
                }, getIteratee);

                /**
                 * Invokes the method at `path` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                 *
                 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                 * // => [2, 3]
                 */
                var invoke = baseRest(baseInvoke);

                /**
                 * Creates an array of the own enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects. See the
                 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * for more details.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keys(new Foo);
                 * // => ['a', 'b'] (iteration order is not guaranteed)
                 *
                 * _.keys('hi');
                 * // => ['0', '1']
                 */
                function keys(object) {
                    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                }

                /**
                 * Creates an array of the own and inherited enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keysIn(new Foo);
                 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                 */
                function keysIn(object) {
                    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                }

                /**
                 * The opposite of `_.mapValues`; this method creates an object with the
                 * same values as `object` and keys generated by running each own enumerable
                 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                 * with three arguments: (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapValues
                 * @example
                 *
                 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
                 * // => { 'a1': 1, 'b2': 2 }
                 */
                function mapKeys(object, iteratee) {
                    var result = {};
                    iteratee = getIteratee(iteratee, 3);

                    baseForOwn(object, function(value, key, object) {
                        baseAssignValue(result, iteratee(value, key, object), value);
                    });
                    return result;
                }

                /**
                 * Creates an object with the same keys as `object` and values generated
                 * by running each own enumerable string keyed property of `object` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapKeys
                 * @example
                 *
                 * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
                 *
                 * _.mapValues(users, function(o) { return o.age; });
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.mapValues(users, 'age');
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 */
                function mapValues(object, iteratee) {
                    var result = {};
                    iteratee = getIteratee(iteratee, 3);

                    baseForOwn(object, function(value, key, object) {
                        baseAssignValue(result, key, iteratee(value, key, object));
                    });
                    return result;
                }

                /**
                 * This method is like `_.assign` except that it recursively merges own and
                 * inherited enumerable string keyed properties of source objects into the
                 * destination object. Source properties that resolve to `undefined` are
                 * skipped if a destination value exists. Array and plain object properties
                 * are merged recursively. Other objects and value types are overridden by
                 * assignment. Source objects are applied from left to right. Subsequent
                 * sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
                 *
                 * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
                 *
                 * _.merge(object, other);
                 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                 */
                var merge = createAssigner(function(object, source, srcIndex) {
                    baseMerge(object, source, srcIndex);
                });

                /**
                 * This method is like `_.merge` except that it accepts `customizer` which
                 * is invoked to produce the merged values of the destination and source
                 * properties. If `customizer` returns `undefined`, merging is handled by the
                 * method instead. The `customizer` is invoked with six arguments:
                 * (objValue, srcValue, key, object, source, stack).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} customizer The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
                 *
                 * var object = { 'a': [1], 'b': [2] };
                 * var other = { 'a': [3], 'b': [4] };
                 *
                 * _.mergeWith(object, other, customizer);
                 * // => { 'a': [1, 3], 'b': [2, 4] }
                 */
                var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
                    baseMerge(object, source, srcIndex, customizer);
                });

                /**
                 * The opposite of `_.pick`; this method creates an object composed of the
                 * own and inherited enumerable property paths of `object` that are not omitted.
                 *
                 * **Note:** This method is considerably slower than `_.pick`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to omit.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omit(object, ['a', 'c']);
                 * // => { 'b': '2' }
                 */
                var omit = flatRest(function(object, paths) {
                    var result = {};
                    if (object == null) {
                        return result;
                    }
                    var isDeep = false;
                    paths = arrayMap(paths, function(path) {
                        path = castPath(path, object);
                        isDeep || (isDeep = path.length > 1);
                        return path;
                    });
                    copyObject(object, getAllKeysIn(object), result);
                    if (isDeep) {
                        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                    }
                    var length = paths.length;
                    while (length--) {
                        baseUnset(result, paths[length]);
                    }
                    return result;
                });

                /**
                 * The opposite of `_.pickBy`; this method creates an object composed of
                 * the own and inherited enumerable string keyed properties of `object` that
                 * `predicate` doesn't return truthy for. The predicate is invoked with two
                 * arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omitBy(object, _.isNumber);
                 * // => { 'b': '2' }
                 */
                function omitBy(object, predicate) {
                    return pickBy(object, negate(getIteratee(predicate)));
                }

                /**
                 * Creates an object composed of the picked `object` properties.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pick(object, ['a', 'c']);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var pick = flatRest(function(object, paths) {
                    return object == null ? {} : basePick(object, paths);
                });

                /**
                 * Creates an object composed of the `object` properties `predicate` returns
                 * truthy for. The predicate is invoked with two arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pickBy(object, _.isNumber);
                 * // => { 'a': 1, 'c': 3 }
                 */
                function pickBy(object, predicate) {
                    if (object == null) {
                        return {};
                    }
                    var props = arrayMap(getAllKeysIn(object), function(prop) {
                        return [prop];
                    });
                    predicate = getIteratee(predicate);
                    return basePickBy(object, props, function(value, path) {
                        return predicate(value, path[0]);
                    });
                }

                /**
                 * This method is like `_.get` except that if the resolved value is a
                 * function it's invoked with the `this` binding of its parent object and
                 * its result is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to resolve.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                 *
                 * _.result(object, 'a[0].b.c1');
                 * // => 3
                 *
                 * _.result(object, 'a[0].b.c2');
                 * // => 4
                 *
                 * _.result(object, 'a[0].b.c3', 'default');
                 * // => 'default'
                 *
                 * _.result(object, 'a[0].b.c3', _.constant('default'));
                 * // => 'default'
                 */
                function result(object, path, defaultValue) {
                    path = castPath(path, object);

                    var index = -1,
                        length = path.length;

                    // Ensure the loop is entered when path is empty.
                    if (!length) {
                        length = 1;
                        object = undefined;
                    }
                    while (++index < length) {
                        var value = object == null ? undefined : object[toKey(path[index])];
                        if (value === undefined) {
                            index = length;
                            value = defaultValue;
                        }
                        object = isFunction(value) ? value.call(object) : value;
                    }
                    return object;
                }

                /**
                 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                 * it's created. Arrays are created for missing index properties while objects
                 * are created for all other missing properties. Use `_.setWith` to customize
                 * `path` creation.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.set(object, 'a[0].b.c', 4);
                 * console.log(object.a[0].b.c);
                 * // => 4
                 *
                 * _.set(object, ['x', '0', 'y', 'z'], 5);
                 * console.log(object.x[0].y.z);
                 * // => 5
                 */
                function set(object, path, value) {
                    return object == null ? object : baseSet(object, path, value);
                }

                /**
                 * This method is like `_.set` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.setWith(object, '[0][1]', 'a', Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function setWith(object, path, value, customizer) {
                    customizer = typeof customizer == 'function' ? customizer : undefined;
                    return object == null ? object : baseSet(object, path, value, customizer);
                }

                /**
                 * Creates an array of own enumerable string keyed-value pairs for `object`
                 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                 * entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entries
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairs(new Foo);
                 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                 */
                var toPairs = createToPairs(keys);

                /**
                 * Creates an array of own and inherited enumerable string keyed-value pairs
                 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                 * or set, its entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entriesIn
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairsIn(new Foo);
                 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                 */
                var toPairsIn = createToPairs(keysIn);

                /**
                 * An alternative to `_.reduce`; this method transforms `object` to a new
                 * `accumulator` object which is the result of running each of its own
                 * enumerable string keyed properties thru `iteratee`, with each invocation
                 * potentially mutating the `accumulator` object. If `accumulator` is not
                 * provided, a new object with the same `[[Prototype]]` will be used. The
                 * iteratee is invoked with four arguments: (accumulator, value, key, object).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The custom accumulator value.
                 * @returns {*} Returns the accumulated value.
                 * @example
                 *
                 * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
                 * // => [4, 9]
                 *
                 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 */
                function transform(object, iteratee, accumulator) {
                    var isArr = isArray(object),
                        isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                    iteratee = getIteratee(iteratee, 4);
                    if (accumulator == null) {
                        var Ctor = object && object.constructor;
                        if (isArrLike) {
                            accumulator = isArr ? new Ctor : [];
                        }
                        else if (isObject(object)) {
                            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                        }
                        else {
                            accumulator = {};
                        }
                    }
                    (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                        return iteratee(accumulator, value, index, object);
                    });
                    return accumulator;
                }

                /**
                 * Removes the property at `path` of `object`.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                 * _.unset(object, 'a[0].b.c');
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 *
                 * _.unset(object, ['a', '0', 'b', 'c']);
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 */
                function unset(object, path) {
                    return object == null ? true : baseUnset(object, path);
                }

                /**
                 * This method is like `_.set` except that accepts `updater` to produce the
                 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                 * is invoked with one argument: (value).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                 * console.log(object.a[0].b.c);
                 * // => 9
                 *
                 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                 * console.log(object.x[0].y.z);
                 * // => 0
                 */
                function update(object, path, updater) {
                    return object == null ? object : baseUpdate(object, path, castFunction(updater));
                }

                /**
                 * This method is like `_.update` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function updateWith(object, path, updater, customizer) {
                    customizer = typeof customizer == 'function' ? customizer : undefined;
                    return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
                }

                /**
                 * Creates an array of the own enumerable string keyed property values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.values(new Foo);
                 * // => [1, 2] (iteration order is not guaranteed)
                 *
                 * _.values('hi');
                 * // => ['h', 'i']
                 */
                function values(object) {
                    return object == null ? [] : baseValues(object, keys(object));
                }

                /**
                 * Creates an array of the own and inherited enumerable string keyed property
                 * values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.valuesIn(new Foo);
                 * // => [1, 2, 3] (iteration order is not guaranteed)
                 */
                function valuesIn(object) {
                    return object == null ? [] : baseValues(object, keysIn(object));
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Clamps `number` within the inclusive `lower` and `upper` bounds.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Number
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 * @example
                 *
                 * _.clamp(-10, -5, 5);
                 * // => -5
                 *
                 * _.clamp(10, -5, 5);
                 * // => 5
                 */
                function clamp(number, lower, upper) {
                    if (upper === undefined) {
                        upper = lower;
                        lower = undefined;
                    }
                    if (upper !== undefined) {
                        upper = toNumber(upper);
                        upper = upper === upper ? upper : 0;
                    }
                    if (lower !== undefined) {
                        lower = toNumber(lower);
                        lower = lower === lower ? lower : 0;
                    }
                    return baseClamp(toNumber(number), lower, upper);
                }

                /**
                 * Checks if `n` is between `start` and up to, but not including, `end`. If
                 * `end` is not specified, it's set to `start` with `start` then set to `0`.
                 * If `start` is greater than `end` the params are swapped to support
                 * negative ranges.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.3.0
                 * @category Number
                 * @param {number} number The number to check.
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 * @see _.range, _.rangeRight
                 * @example
                 *
                 * _.inRange(3, 2, 4);
                 * // => true
                 *
                 * _.inRange(4, 8);
                 * // => true
                 *
                 * _.inRange(4, 2);
                 * // => false
                 *
                 * _.inRange(2, 2);
                 * // => false
                 *
                 * _.inRange(1.2, 2);
                 * // => true
                 *
                 * _.inRange(5.2, 4);
                 * // => false
                 *
                 * _.inRange(-3, -2, -6);
                 * // => true
                 */
                function inRange(number, start, end) {
                    start = toFinite(start);
                    if (end === undefined) {
                        end = start;
                        start = 0;
                    } else {
                        end = toFinite(end);
                    }
                    number = toNumber(number);
                    return baseInRange(number, start, end);
                }

                /**
                 * Produces a random number between the inclusive `lower` and `upper` bounds.
                 * If only one argument is provided a number between `0` and the given number
                 * is returned. If `floating` is `true`, or either `lower` or `upper` are
                 * floats, a floating-point number is returned instead of an integer.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Number
                 * @param {number} [lower=0] The lower bound.
                 * @param {number} [upper=1] The upper bound.
                 * @param {boolean} [floating] Specify returning a floating-point number.
                 * @returns {number} Returns the random number.
                 * @example
                 *
                 * _.random(0, 5);
                 * // => an integer between 0 and 5
                 *
                 * _.random(5);
                 * // => also an integer between 0 and 5
                 *
                 * _.random(5, true);
                 * // => a floating-point number between 0 and 5
                 *
                 * _.random(1.2, 5.2);
                 * // => a floating-point number between 1.2 and 5.2
                 */
                function random(lower, upper, floating) {
                    if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                        upper = floating = undefined;
                    }
                    if (floating === undefined) {
                        if (typeof upper == 'boolean') {
                            floating = upper;
                            upper = undefined;
                        }
                        else if (typeof lower == 'boolean') {
                            floating = lower;
                            lower = undefined;
                        }
                    }
                    if (lower === undefined && upper === undefined) {
                        lower = 0;
                        upper = 1;
                    }
                    else {
                        lower = toFinite(lower);
                        if (upper === undefined) {
                            upper = lower;
                            lower = 0;
                        } else {
                            upper = toFinite(upper);
                        }
                    }
                    if (lower > upper) {
                        var temp = lower;
                        lower = upper;
                        upper = temp;
                    }
                    if (floating || lower % 1 || upper % 1) {
                        var rand = nativeRandom();
                        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                    }
                    return baseRandom(lower, upper);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the camel cased string.
                 * @example
                 *
                 * _.camelCase('Foo Bar');
                 * // => 'fooBar'
                 *
                 * _.camelCase('--foo-bar--');
                 * // => 'fooBar'
                 *
                 * _.camelCase('__FOO_BAR__');
                 * // => 'fooBar'
                 */
                var camelCase = createCompounder(function(result, word, index) {
                    word = word.toLowerCase();
                    return result + (index ? capitalize(word) : word);
                });

                /**
                 * Converts the first character of `string` to upper case and the remaining
                 * to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to capitalize.
                 * @returns {string} Returns the capitalized string.
                 * @example
                 *
                 * _.capitalize('FRED');
                 * // => 'Fred'
                 */
                function capitalize(string) {
                    return upperFirst(toString(string).toLowerCase());
                }

                /**
                 * Deburrs `string` by converting
                 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                 * letters to basic Latin letters and removing
                 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to deburr.
                 * @returns {string} Returns the deburred string.
                 * @example
                 *
                 * _.deburr('déjà vu');
                 * // => 'deja vu'
                 */
                function deburr(string) {
                    string = toString(string);
                    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                }

                /**
                 * Checks if `string` ends with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=string.length] The position to search up to.
                 * @returns {boolean} Returns `true` if `string` ends with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.endsWith('abc', 'c');
                 * // => true
                 *
                 * _.endsWith('abc', 'b');
                 * // => false
                 *
                 * _.endsWith('abc', 'b', 2);
                 * // => true
                 */
                function endsWith(string, target, position) {
                    string = toString(string);
                    target = baseToString(target);

                    var length = string.length;
                    position = position === undefined
                        ? length
                        : baseClamp(toInteger(position), 0, length);

                    var end = position;
                    position -= target.length;
                    return position >= 0 && string.slice(position, end) == target;
                }

                /**
                 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                 * corresponding HTML entities.
                 *
                 * **Note:** No other characters are escaped. To escape additional
                 * characters use a third-party library like [_he_](https://mths.be/he).
                 *
                 * Though the ">" character is escaped for symmetry, characters like
                 * ">" and "/" don't need escaping in HTML and have no special meaning
                 * unless they're part of a tag or unquoted attribute value. See
                 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                 * (under "semi-related fun fact") for more details.
                 *
                 * When working with HTML you should always
                 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                 * XSS vectors.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escape('fred, barney, & pebbles');
                 * // => 'fred, barney, &amp; pebbles'
                 */
                function escape(string) {
                    string = toString(string);
                    return (string && reHasUnescapedHtml.test(string))
                        ? string.replace(reUnescapedHtml, escapeHtmlChar)
                        : string;
                }

                /**
                 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escapeRegExp('[lodash](https://lodash.com/)');
                 * // => '\[lodash\]\(https://lodash\.com/\)'
                 */
                function escapeRegExp(string) {
                    string = toString(string);
                    return (string && reHasRegExpChar.test(string))
                        ? string.replace(reRegExpChar, '\\$&')
                        : string;
                }

                /**
                 * Converts `string` to
                 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the kebab cased string.
                 * @example
                 *
                 * _.kebabCase('Foo Bar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('fooBar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('__FOO_BAR__');
                 * // => 'foo-bar'
                 */
                var kebabCase = createCompounder(function(result, word, index) {
                    return result + (index ? '-' : '') + word.toLowerCase();
                });

                /**
                 * Converts `string`, as space separated words, to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.lowerCase('--Foo-Bar--');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('fooBar');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('__FOO_BAR__');
                 * // => 'foo bar'
                 */
                var lowerCase = createCompounder(function(result, word, index) {
                    return result + (index ? ' ' : '') + word.toLowerCase();
                });

                /**
                 * Converts the first character of `string` to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.lowerFirst('Fred');
                 * // => 'fred'
                 *
                 * _.lowerFirst('FRED');
                 * // => 'fRED'
                 */
                var lowerFirst = createCaseFirst('toLowerCase');

                /**
                 * Pads `string` on the left and right sides if it's shorter than `length`.
                 * Padding characters are truncated if they can't be evenly divided by `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.pad('abc', 8);
                 * // => '  abc   '
                 *
                 * _.pad('abc', 8, '_-');
                 * // => '_-abc_-_'
                 *
                 * _.pad('abc', 3);
                 * // => 'abc'
                 */
                function pad(string, length, chars) {
                    string = toString(string);
                    length = toInteger(length);

                    var strLength = length ? stringSize(string) : 0;
                    if (!length || strLength >= length) {
                        return string;
                    }
                    var mid = (length - strLength) / 2;
                    return (
                        createPadding(nativeFloor(mid), chars) +
                        string +
                        createPadding(nativeCeil(mid), chars)
                    );
                }

                /**
                 * Pads `string` on the right side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padEnd('abc', 6);
                 * // => 'abc   '
                 *
                 * _.padEnd('abc', 6, '_-');
                 * // => 'abc_-_'
                 *
                 * _.padEnd('abc', 3);
                 * // => 'abc'
                 */
                function padEnd(string, length, chars) {
                    string = toString(string);
                    length = toInteger(length);

                    var strLength = length ? stringSize(string) : 0;
                    return (length && strLength < length)
                        ? (string + createPadding(length - strLength, chars))
                        : string;
                }

                /**
                 * Pads `string` on the left side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padStart('abc', 6);
                 * // => '   abc'
                 *
                 * _.padStart('abc', 6, '_-');
                 * // => '_-_abc'
                 *
                 * _.padStart('abc', 3);
                 * // => 'abc'
                 */
                function padStart(string, length, chars) {
                    string = toString(string);
                    length = toInteger(length);

                    var strLength = length ? stringSize(string) : 0;
                    return (length && strLength < length)
                        ? (createPadding(length - strLength, chars) + string)
                        : string;
                }

                /**
                 * Converts `string` to an integer of the specified radix. If `radix` is
                 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                 * hexadecimal, in which case a `radix` of `16` is used.
                 *
                 * **Note:** This method aligns with the
                 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category String
                 * @param {string} string The string to convert.
                 * @param {number} [radix=10] The radix to interpret `value` by.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.parseInt('08');
                 * // => 8
                 *
                 * _.map(['6', '08', '10'], _.parseInt);
                 * // => [6, 8, 10]
                 */
                function parseInt(string, radix, guard) {
                    if (guard || radix == null) {
                        radix = 0;
                    } else if (radix) {
                        radix = +radix;
                    }
                    return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
                }

                /**
                 * Repeats the given string `n` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to repeat.
                 * @param {number} [n=1] The number of times to repeat the string.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the repeated string.
                 * @example
                 *
                 * _.repeat('*', 3);
                 * // => '***'
                 *
                 * _.repeat('abc', 2);
                 * // => 'abcabc'
                 *
                 * _.repeat('abc', 0);
                 * // => ''
                 */
                function repeat(string, n, guard) {
                    if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
                        n = 1;
                    } else {
                        n = toInteger(n);
                    }
                    return baseRepeat(toString(string), n);
                }

                /**
                 * Replaces matches for `pattern` in `string` with `replacement`.
                 *
                 * **Note:** This method is based on
                 * [`String#replace`](https://mdn.io/String/replace).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to modify.
                 * @param {RegExp|string} pattern The pattern to replace.
                 * @param {Function|string} replacement The match replacement.
                 * @returns {string} Returns the modified string.
                 * @example
                 *
                 * _.replace('Hi Fred', 'Fred', 'Barney');
                 * // => 'Hi Barney'
                 */
                function replace() {
                    var args = arguments,
                        string = toString(args[0]);

                    return args.length < 3 ? string : string.replace(args[1], args[2]);
                }

                /**
                 * Converts `string` to
                 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the snake cased string.
                 * @example
                 *
                 * _.snakeCase('Foo Bar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('fooBar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('--FOO-BAR--');
                 * // => 'foo_bar'
                 */
                var snakeCase = createCompounder(function(result, word, index) {
                    return result + (index ? '_' : '') + word.toLowerCase();
                });

                /**
                 * Splits `string` by `separator`.
                 *
                 * **Note:** This method is based on
                 * [`String#split`](https://mdn.io/String/split).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to split.
                 * @param {RegExp|string} separator The separator pattern to split by.
                 * @param {number} [limit] The length to truncate results to.
                 * @returns {Array} Returns the string segments.
                 * @example
                 *
                 * _.split('a-b-c', '-', 2);
                 * // => ['a', 'b']
                 */
                function split(string, separator, limit) {
                    if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                        separator = limit = undefined;
                    }
                    limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                    if (!limit) {
                        return [];
                    }
                    string = toString(string);
                    if (string && (
                            typeof separator == 'string' ||
                            (separator != null && !isRegExp(separator))
                        )) {
                        separator = baseToString(separator);
                        if (!separator && hasUnicode(string)) {
                            return castSlice(stringToArray(string), 0, limit);
                        }
                    }
                    return string.split(separator, limit);
                }

                /**
                 * Converts `string` to
                 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.1.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the start cased string.
                 * @example
                 *
                 * _.startCase('--foo-bar--');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('fooBar');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('__FOO_BAR__');
                 * // => 'FOO BAR'
                 */
                var startCase = createCompounder(function(result, word, index) {
                    return result + (index ? ' ' : '') + upperFirst(word);
                });

                /**
                 * Checks if `string` starts with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=0] The position to search from.
                 * @returns {boolean} Returns `true` if `string` starts with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.startsWith('abc', 'a');
                 * // => true
                 *
                 * _.startsWith('abc', 'b');
                 * // => false
                 *
                 * _.startsWith('abc', 'b', 1);
                 * // => true
                 */
                function startsWith(string, target, position) {
                    string = toString(string);
                    position = position == null
                        ? 0
                        : baseClamp(toInteger(position), 0, string.length);

                    target = baseToString(target);
                    return string.slice(position, position + target.length) == target;
                }

                /**
                 * Creates a compiled template function that can interpolate data properties
                 * in "interpolate" delimiters, HTML-escape interpolated data properties in
                 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                 * properties may be accessed as free variables in the template. If a setting
                 * object is given, it takes precedence over `_.templateSettings` values.
                 *
                 * **Note:** In the development build `_.template` utilizes
                 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                 * for easier debugging.
                 *
                 * For more information on precompiling templates see
                 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                 *
                 * For more information on Chrome extension sandboxes see
                 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The template string.
                 * @param {Object} [options={}] The options object.
                 * @param {RegExp} [options.escape=_.templateSettings.escape]
                 *  The HTML "escape" delimiter.
                 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                 *  The "evaluate" delimiter.
                 * @param {Object} [options.imports=_.templateSettings.imports]
                 *  An object to import into the template as free variables.
                 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                 *  The "interpolate" delimiter.
                 * @param {string} [options.sourceURL='lodash.templateSources[n]']
                 *  The sourceURL of the compiled template.
                 * @param {string} [options.variable='obj']
                 *  The data object variable name.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the compiled template function.
                 * @example
                 *
                 * // Use the "interpolate" delimiter to create a compiled template.
                 * var compiled = _.template('hello <%= user %>!');
                 * compiled({ 'user': 'fred' });
                 * // => 'hello fred!'
                 *
                 * // Use the HTML "escape" delimiter to escape data property values.
                 * var compiled = _.template('<b><%- value %></b>');
                 * compiled({ 'value': '<script>' });
                 * // => '<b>&lt;script&gt;</b>'
                 *
                 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the internal `print` function in "evaluate" delimiters.
                 * var compiled = _.template('<% print("hello " + user); %>!');
                 * compiled({ 'user': 'barney' });
                 * // => 'hello barney!'
                 *
                 * // Use the ES template literal delimiter as an "interpolate" delimiter.
                 * // Disable support by replacing the "interpolate" delimiter.
                 * var compiled = _.template('hello ${ user }!');
                 * compiled({ 'user': 'pebbles' });
                 * // => 'hello pebbles!'
                 *
                 * // Use backslashes to treat delimiters as plain text.
                 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                 * compiled({ 'value': 'ignored' });
                 * // => '<%- value %>'
                 *
                 * // Use the `imports` option to import `jQuery` as `jq`.
                 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                 * compiled(data);
                 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                 *
                 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                 * compiled.source;
                 * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
                 *
                 * // Use custom template delimiters.
                 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                 * var compiled = _.template('hello {{ user }}!');
                 * compiled({ 'user': 'mustache' });
                 * // => 'hello mustache!'
                 *
                 * // Use the `source` property to inline compiled templates for meaningful
                 * // line numbers in error messages and stack traces.
                 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                 *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
                 * ');
                 */
                function template(string, options, guard) {
                    // Based on John Resig's `tmpl` implementation
                    // (http://ejohn.org/blog/javascript-micro-templating/)
                    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                    var settings = lodash.templateSettings;

                    if (guard && isIterateeCall(string, options, guard)) {
                        options = undefined;
                    }
                    string = toString(string);
                    options = assignInWith({}, options, settings, customDefaultsAssignIn);

                    var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                        importsKeys = keys(imports),
                        importsValues = baseValues(imports, importsKeys);

                    var isEscaping,
                        isEvaluating,
                        index = 0,
                        interpolate = options.interpolate || reNoMatch,
                        source = "__p += '";

                    // Compile the regexp to match each delimiter.
                    var reDelimiters = RegExp(
                        (options.escape || reNoMatch).source + '|' +
                        interpolate.source + '|' +
                        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                        (options.evaluate || reNoMatch).source + '|$'
                        , 'g');

                    // Use a sourceURL for easier debugging.
                    var sourceURL = '//# sourceURL=' +
                        ('sourceURL' in options
                                ? options.sourceURL
                                : ('lodash.templateSources[' + (++templateCounter) + ']')
                        ) + '\n';

                    string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                        interpolateValue || (interpolateValue = esTemplateValue);

                        // Escape characters that can't be included in string literals.
                        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                        // Replace delimiters with snippets.
                        if (escapeValue) {
                            isEscaping = true;
                            source += "' +\n__e(" + escapeValue + ") +\n'";
                        }
                        if (evaluateValue) {
                            isEvaluating = true;
                            source += "';\n" + evaluateValue + ";\n__p += '";
                        }
                        if (interpolateValue) {
                            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                        }
                        index = offset + match.length;

                        // The JS engine embedded in Adobe products needs `match` returned in
                        // order to produce the correct `offset` value.
                        return match;
                    });

                    source += "';\n";

                    // If `variable` is not specified wrap a with-statement around the generated
                    // code to add the data object to the top of the scope chain.
                    var variable = options.variable;
                    if (!variable) {
                        source = 'with (obj) {\n' + source + '\n}\n';
                    }
                    // Cleanup code by stripping empty strings.
                    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                        .replace(reEmptyStringMiddle, '$1')
                        .replace(reEmptyStringTrailing, '$1;');

                    // Frame code as the function body.
                    source = 'function(' + (variable || 'obj') + ') {\n' +
                        (variable
                                ? ''
                                : 'obj || (obj = {});\n'
                        ) +
                        "var __t, __p = ''" +
                        (isEscaping
                                ? ', __e = _.escape'
                                : ''
                        ) +
                        (isEvaluating
                                ? ', __j = Array.prototype.join;\n' +
                                "function print() { __p += __j.call(arguments, '') }\n"
                                : ';\n'
                        ) +
                        source +
                        'return __p\n}';

                    var result = attempt(function() {
                        return Function(importsKeys, sourceURL + 'return ' + source)
                            .apply(undefined, importsValues);
                    });

                    // Provide the compiled function's source by its `toString` method or
                    // the `source` property as a convenience for inlining compiled templates.
                    result.source = source;
                    if (isError(result)) {
                        throw result;
                    }
                    return result;
                }

                /**
                 * Converts `string`, as a whole, to lower case just like
                 * [String#toLowerCase](https://mdn.io/toLowerCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.toLower('--Foo-Bar--');
                 * // => '--foo-bar--'
                 *
                 * _.toLower('fooBar');
                 * // => 'foobar'
                 *
                 * _.toLower('__FOO_BAR__');
                 * // => '__foo_bar__'
                 */
                function toLower(value) {
                    return toString(value).toLowerCase();
                }

                /**
                 * Converts `string`, as a whole, to upper case just like
                 * [String#toUpperCase](https://mdn.io/toUpperCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.toUpper('--foo-bar--');
                 * // => '--FOO-BAR--'
                 *
                 * _.toUpper('fooBar');
                 * // => 'FOOBAR'
                 *
                 * _.toUpper('__foo_bar__');
                 * // => '__FOO_BAR__'
                 */
                function toUpper(value) {
                    return toString(value).toUpperCase();
                }

                /**
                 * Removes leading and trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trim('  abc  ');
                 * // => 'abc'
                 *
                 * _.trim('-_-abc-_-', '_-');
                 * // => 'abc'
                 *
                 * _.map(['  foo  ', '  bar  '], _.trim);
                 * // => ['foo', 'bar']
                 */
                function trim(string, chars, guard) {
                    string = toString(string);
                    if (string && (guard || chars === undefined)) {
                        return string.replace(reTrim, '');
                    }
                    if (!string || !(chars = baseToString(chars))) {
                        return string;
                    }
                    var strSymbols = stringToArray(string),
                        chrSymbols = stringToArray(chars),
                        start = charsStartIndex(strSymbols, chrSymbols),
                        end = charsEndIndex(strSymbols, chrSymbols) + 1;

                    return castSlice(strSymbols, start, end).join('');
                }

                /**
                 * Removes trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimEnd('  abc  ');
                 * // => '  abc'
                 *
                 * _.trimEnd('-_-abc-_-', '_-');
                 * // => '-_-abc'
                 */
                function trimEnd(string, chars, guard) {
                    string = toString(string);
                    if (string && (guard || chars === undefined)) {
                        return string.replace(reTrimEnd, '');
                    }
                    if (!string || !(chars = baseToString(chars))) {
                        return string;
                    }
                    var strSymbols = stringToArray(string),
                        end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                    return castSlice(strSymbols, 0, end).join('');
                }

                /**
                 * Removes leading whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimStart('  abc  ');
                 * // => 'abc  '
                 *
                 * _.trimStart('-_-abc-_-', '_-');
                 * // => 'abc-_-'
                 */
                function trimStart(string, chars, guard) {
                    string = toString(string);
                    if (string && (guard || chars === undefined)) {
                        return string.replace(reTrimStart, '');
                    }
                    if (!string || !(chars = baseToString(chars))) {
                        return string;
                    }
                    var strSymbols = stringToArray(string),
                        start = charsStartIndex(strSymbols, stringToArray(chars));

                    return castSlice(strSymbols, start).join('');
                }

                /**
                 * Truncates `string` if it's longer than the given maximum string length.
                 * The last characters of the truncated string are replaced with the omission
                 * string which defaults to "...".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to truncate.
                 * @param {Object} [options={}] The options object.
                 * @param {number} [options.length=30] The maximum string length.
                 * @param {string} [options.omission='...'] The string to indicate text is omitted.
                 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                 * @returns {string} Returns the truncated string.
                 * @example
                 *
                 * _.truncate('hi-diddly-ho there, neighborino');
                 * // => 'hi-diddly-ho there, neighbo...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
                 * // => 'hi-diddly-ho there,...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
                 * // => 'hi-diddly-ho there...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
                 * // => 'hi-diddly-ho there, neig [...]'
                 */
                function truncate(string, options) {
                    var length = DEFAULT_TRUNC_LENGTH,
                        omission = DEFAULT_TRUNC_OMISSION;

                    if (isObject(options)) {
                        var separator = 'separator' in options ? options.separator : separator;
                        length = 'length' in options ? toInteger(options.length) : length;
                        omission = 'omission' in options ? baseToString(options.omission) : omission;
                    }
                    string = toString(string);

                    var strLength = string.length;
                    if (hasUnicode(string)) {
                        var strSymbols = stringToArray(string);
                        strLength = strSymbols.length;
                    }
                    if (length >= strLength) {
                        return string;
                    }
                    var end = length - stringSize(omission);
                    if (end < 1) {
                        return omission;
                    }
                    var result = strSymbols
                        ? castSlice(strSymbols, 0, end).join('')
                        : string.slice(0, end);

                    if (separator === undefined) {
                        return result + omission;
                    }
                    if (strSymbols) {
                        end += (result.length - end);
                    }
                    if (isRegExp(separator)) {
                        if (string.slice(end).search(separator)) {
                            var match,
                                substring = result;

                            if (!separator.global) {
                                separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                            }
                            separator.lastIndex = 0;
                            while ((match = separator.exec(substring))) {
                                var newEnd = match.index;
                            }
                            result = result.slice(0, newEnd === undefined ? end : newEnd);
                        }
                    } else if (string.indexOf(baseToString(separator), end) != end) {
                        var index = result.lastIndexOf(separator);
                        if (index > -1) {
                            result = result.slice(0, index);
                        }
                    }
                    return result + omission;
                }

                /**
                 * The inverse of `_.escape`; this method converts the HTML entities
                 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                 * their corresponding characters.
                 *
                 * **Note:** No other HTML entities are unescaped. To unescape additional
                 * HTML entities use a third-party library like [_he_](https://mths.be/he).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.6.0
                 * @category String
                 * @param {string} [string=''] The string to unescape.
                 * @returns {string} Returns the unescaped string.
                 * @example
                 *
                 * _.unescape('fred, barney, &amp; pebbles');
                 * // => 'fred, barney, & pebbles'
                 */
                function unescape(string) {
                    string = toString(string);
                    return (string && reHasEscapedHtml.test(string))
                        ? string.replace(reEscapedHtml, unescapeHtmlChar)
                        : string;
                }

                /**
                 * Converts `string`, as space separated words, to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.upperCase('--foo-bar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('fooBar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('__foo_bar__');
                 * // => 'FOO BAR'
                 */
                var upperCase = createCompounder(function(result, word, index) {
                    return result + (index ? ' ' : '') + word.toUpperCase();
                });

                /**
                 * Converts the first character of `string` to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.upperFirst('fred');
                 * // => 'Fred'
                 *
                 * _.upperFirst('FRED');
                 * // => 'FRED'
                 */
                var upperFirst = createCaseFirst('toUpperCase');

                /**
                 * Splits `string` into an array of its words.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {RegExp|string} [pattern] The pattern to match words.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the words of `string`.
                 * @example
                 *
                 * _.words('fred, barney, & pebbles');
                 * // => ['fred', 'barney', 'pebbles']
                 *
                 * _.words('fred, barney, & pebbles', /[^, ]+/g);
                 * // => ['fred', 'barney', '&', 'pebbles']
                 */
                function words(string, pattern, guard) {
                    string = toString(string);
                    pattern = guard ? undefined : pattern;

                    if (pattern === undefined) {
                        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                    }
                    return string.match(pattern) || [];
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Attempts to invoke `func`, returning either the result or the caught error
                 * object. Any additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Function} func The function to attempt.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {*} Returns the `func` result or error object.
                 * @example
                 *
                 * // Avoid throwing errors for invalid selectors.
                 * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
                 *
                 * if (_.isError(elements)) {
     *   elements = [];
     * }
                 */
                var attempt = baseRest(function(func, args) {
                    try {
                        return apply(func, undefined, args);
                    } catch (e) {
                        return isError(e) ? e : new Error(e);
                    }
                });

                /**
                 * Binds methods of an object to the object itself, overwriting the existing
                 * method.
                 *
                 * **Note:** This method doesn't set the "length" property of bound functions.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Object} object The object to bind and assign the bound methods to.
                 * @param {...(string|string[])} methodNames The object method names to bind.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
                 *
                 * _.bindAll(view, ['click']);
                 * jQuery(element).on('click', view.click);
                 * // => Logs 'clicked docs' when clicked.
                 */
                var bindAll = flatRest(function(object, methodNames) {
                    arrayEach(methodNames, function(key) {
                        key = toKey(key);
                        baseAssignValue(object, key, bind(object[key], object));
                    });
                    return object;
                });

                /**
                 * Creates a function that iterates over `pairs` and invokes the corresponding
                 * function of the first predicate to return truthy. The predicate-function
                 * pairs are invoked with the `this` binding and arguments of the created
                 * function.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Array} pairs The predicate-function pairs.
                 * @returns {Function} Returns the new composite function.
                 * @example
                 *
                 * var func = _.cond([
                 *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                 *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                 *   [_.stubTrue,                      _.constant('no match')]
                 * ]);
                 *
                 * func({ 'a': 1, 'b': 2 });
                 * // => 'matches A'
                 *
                 * func({ 'a': 0, 'b': 1 });
                 * // => 'matches B'
                 *
                 * func({ 'a': '1', 'b': '2' });
                 * // => 'no match'
                 */
                function cond(pairs) {
                    var length = pairs == null ? 0 : pairs.length,
                        toIteratee = getIteratee();

                    pairs = !length ? [] : arrayMap(pairs, function(pair) {
                        if (typeof pair[1] != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        return [toIteratee(pair[0]), pair[1]];
                    });

                    return baseRest(function(args) {
                        var index = -1;
                        while (++index < length) {
                            var pair = pairs[index];
                            if (apply(pair[0], this, args)) {
                                return apply(pair[1], this, args);
                            }
                        }
                    });
                }

                /**
                 * Creates a function that invokes the predicate properties of `source` with
                 * the corresponding property values of a given object, returning `true` if
                 * all predicates return truthy, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.conformsTo` with
                 * `source` partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 2, 'b': 1 },
                 *   { 'a': 1, 'b': 2 }
                 * ];
                 *
                 * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                 * // => [{ 'a': 1, 'b': 2 }]
                 */
                function conforms(source) {
                    return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that returns `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {*} value The value to return from the new function.
                 * @returns {Function} Returns the new constant function.
                 * @example
                 *
                 * var objects = _.times(2, _.constant({ 'a': 1 }));
                 *
                 * console.log(objects);
                 * // => [{ 'a': 1 }, { 'a': 1 }]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => true
                 */
                function constant(value) {
                    return function() {
                        return value;
                    };
                }

                /**
                 * Checks `value` to determine whether a default value should be returned in
                 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                 * or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Util
                 * @param {*} value The value to check.
                 * @param {*} defaultValue The default value.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * _.defaultTo(1, 10);
                 * // => 1
                 *
                 * _.defaultTo(undefined, 10);
                 * // => 10
                 */
                function defaultTo(value, defaultValue) {
                    return (value == null || value !== value) ? defaultValue : value;
                }

                /**
                 * Creates a function that returns the result of invoking the given functions
                 * with the `this` binding of the created function, where each successive
                 * invocation is supplied the return value of the previous.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flowRight
                 * @example
                 *
                 * function square(n) {
     *   return n * n;
     * }
                 *
                 * var addSquare = _.flow([_.add, square]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flow = createFlow();

                /**
                 * This method is like `_.flow` except that it creates a function that
                 * invokes the given functions from right to left.
                 *
                 * @static
                 * @since 3.0.0
                 * @memberOf _
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flow
                 * @example
                 *
                 * function square(n) {
     *   return n * n;
     * }
                 *
                 * var addSquare = _.flowRight([square, _.add]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flowRight = createFlow(true);

                /**
                 * This method returns the first argument it receives.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {*} value Any value.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 *
                 * console.log(_.identity(object) === object);
                 * // => true
                 */
                function identity(value) {
                    return value;
                }

                /**
                 * Creates a function that invokes `func` with the arguments of the created
                 * function. If `func` is a property name, the created function returns the
                 * property value for a given element. If `func` is an array or object, the
                 * created function returns `true` for elements that contain the equivalent
                 * source properties, otherwise it returns `false`.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Util
                 * @param {*} [func=_.identity] The value to convert to a callback.
                 * @returns {Function} Returns the callback.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, _.iteratee(['user', 'fred']));
                 * // => [{ 'user': 'fred', 'age': 40 }]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, _.iteratee('user'));
                 * // => ['barney', 'fred']
                 *
                 * // Create custom iteratee shorthands.
                 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
                 *
                 * _.filter(['abc', 'def'], /ef/);
                 * // => ['def']
                 */
                function iteratee(func) {
                    return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that performs a partial deep comparison between a given
                 * object and `source`, returning `true` if the given object has equivalent
                 * property values, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.isMatch` with `source`
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                 */
                function matches(source) {
                    return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that performs a partial deep comparison between the
                 * value at `path` of a given object to `srcValue`, returning `true` if the
                 * object value is equivalent, else `false`.
                 *
                 * **Note:** Partial comparisons will match empty array and empty object
                 * `srcValue` values against any array or object value, respectively. See
                 * `_.isEqual` for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.find(objects, _.matchesProperty('a', 4));
                 * // => { 'a': 4, 'b': 5, 'c': 6 }
                 */
                function matchesProperty(path, srcValue) {
                    return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that invokes the method at `path` of a given object.
                 * Any additional arguments are provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': _.constant(2) } },
                 *   { 'a': { 'b': _.constant(1) } }
                 * ];
                 *
                 * _.map(objects, _.method('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(objects, _.method(['a', 'b']));
                 * // => [2, 1]
                 */
                var method = baseRest(function(path, args) {
                    return function(object) {
                        return baseInvoke(object, path, args);
                    };
                });

                /**
                 * The opposite of `_.method`; this method creates a function that invokes
                 * the method at a given path of `object`. Any additional arguments are
                 * provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var array = _.times(3, _.constant),
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                 * // => [2, 0]
                 */
                var methodOf = baseRest(function(object, args) {
                    return function(path) {
                        return baseInvoke(object, path, args);
                    };
                });

                /**
                 * Adds all own enumerable string keyed function properties of a source
                 * object to the destination object. If `object` is a function, then methods
                 * are added to its prototype as well.
                 *
                 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                 * avoid conflicts caused by modifying the original.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Function|Object} [object=lodash] The destination object.
                 * @param {Object} source The object of functions to add.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                 * @returns {Function|Object} Returns `object`.
                 * @example
                 *
                 * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
                 *
                 * _.mixin({ 'vowels': vowels });
                 * _.vowels('fred');
                 * // => ['e']
                 *
                 * _('fred').vowels().value();
                 * // => ['e']
                 *
                 * _.mixin({ 'vowels': vowels }, { 'chain': false });
                 * _('fred').vowels();
                 * // => ['e']
                 */
                function mixin(object, source, options) {
                    var props = keys(source),
                        methodNames = baseFunctions(source, props);

                    if (options == null &&
                        !(isObject(source) && (methodNames.length || !props.length))) {
                        options = source;
                        source = object;
                        object = this;
                        methodNames = baseFunctions(source, keys(source));
                    }
                    var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                        isFunc = isFunction(object);

                    arrayEach(methodNames, function(methodName) {
                        var func = source[methodName];
                        object[methodName] = func;
                        if (isFunc) {
                            object.prototype[methodName] = function() {
                                var chainAll = this.__chain__;
                                if (chain || chainAll) {
                                    var result = object(this.__wrapped__),
                                        actions = result.__actions__ = copyArray(this.__actions__);

                                    actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                                    result.__chain__ = chainAll;
                                    return result;
                                }
                                return func.apply(object, arrayPush([this.value()], arguments));
                            };
                        }
                    });

                    return object;
                }

                /**
                 * Reverts the `_` variable to its previous value and returns a reference to
                 * the `lodash` function.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @returns {Function} Returns the `lodash` function.
                 * @example
                 *
                 * var lodash = _.noConflict();
                 */
                function noConflict() {
                    if (root._ === this) {
                        root._ = oldDash;
                    }
                    return this;
                }

                /**
                 * This method returns `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Util
                 * @example
                 *
                 * _.times(2, _.noop);
                 * // => [undefined, undefined]
                 */
                function noop() {
                    // No operation performed.
                }

                /**
                 * Creates a function that gets the argument at index `n`. If `n` is negative,
                 * the nth argument from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [n=0] The index of the argument to return.
                 * @returns {Function} Returns the new pass-thru function.
                 * @example
                 *
                 * var func = _.nthArg(1);
                 * func('a', 'b', 'c', 'd');
                 * // => 'b'
                 *
                 * var func = _.nthArg(-2);
                 * func('a', 'b', 'c', 'd');
                 * // => 'c'
                 */
                function nthArg(n) {
                    n = toInteger(n);
                    return baseRest(function(args) {
                        return baseNth(args, n);
                    });
                }

                /**
                 * Creates a function that invokes `iteratees` with the arguments it receives
                 * and returns their results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to invoke.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.over([Math.max, Math.min]);
                 *
                 * func(1, 2, 3, 4);
                 * // => [4, 1]
                 */
                var over = createOver(arrayMap);

                /**
                 * Creates a function that checks if **all** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overEvery([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => false
                 *
                 * func(NaN);
                 * // => false
                 */
                var overEvery = createOver(arrayEvery);

                /**
                 * Creates a function that checks if **any** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overSome([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => true
                 *
                 * func(NaN);
                 * // => false
                 */
                var overSome = createOver(arraySome);

                /**
                 * Creates a function that returns the value at `path` of a given object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': 2 } },
                 *   { 'a': { 'b': 1 } }
                 * ];
                 *
                 * _.map(objects, _.property('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                 * // => [1, 2]
                 */
                function property(path) {
                    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                }

                /**
                 * The opposite of `_.property`; this method creates a function that returns
                 * the value at a given path of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var array = [0, 1, 2],
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                 * // => [2, 0]
                 */
                function propertyOf(object) {
                    return function(path) {
                        return object == null ? undefined : baseGet(object, path);
                    };
                }

                /**
                 * Creates an array of numbers (positive and/or negative) progressing from
                 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                 * `start` is specified without an `end` or `step`. If `end` is not specified,
                 * it's set to `start` with `start` then set to `0`.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.rangeRight
                 * @example
                 *
                 * _.range(4);
                 * // => [0, 1, 2, 3]
                 *
                 * _.range(-4);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 5);
                 * // => [1, 2, 3, 4]
                 *
                 * _.range(0, 20, 5);
                 * // => [0, 5, 10, 15]
                 *
                 * _.range(0, -4, -1);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.range(0);
                 * // => []
                 */
                var range = createRange();

                /**
                 * This method is like `_.range` except that it populates values in
                 * descending order.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.range
                 * @example
                 *
                 * _.rangeRight(4);
                 * // => [3, 2, 1, 0]
                 *
                 * _.rangeRight(-4);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 5);
                 * // => [4, 3, 2, 1]
                 *
                 * _.rangeRight(0, 20, 5);
                 * // => [15, 10, 5, 0]
                 *
                 * _.rangeRight(0, -4, -1);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.rangeRight(0);
                 * // => []
                 */
                var rangeRight = createRange(true);

                /**
                 * This method returns a new empty array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Array} Returns the new empty array.
                 * @example
                 *
                 * var arrays = _.times(2, _.stubArray);
                 *
                 * console.log(arrays);
                 * // => [[], []]
                 *
                 * console.log(arrays[0] === arrays[1]);
                 * // => false
                 */
                function stubArray() {
                    return [];
                }

                /**
                 * This method returns `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `false`.
                 * @example
                 *
                 * _.times(2, _.stubFalse);
                 * // => [false, false]
                 */
                function stubFalse() {
                    return false;
                }

                /**
                 * This method returns a new empty object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Object} Returns the new empty object.
                 * @example
                 *
                 * var objects = _.times(2, _.stubObject);
                 *
                 * console.log(objects);
                 * // => [{}, {}]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => false
                 */
                function stubObject() {
                    return {};
                }

                /**
                 * This method returns an empty string.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {string} Returns the empty string.
                 * @example
                 *
                 * _.times(2, _.stubString);
                 * // => ['', '']
                 */
                function stubString() {
                    return '';
                }

                /**
                 * This method returns `true`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `true`.
                 * @example
                 *
                 * _.times(2, _.stubTrue);
                 * // => [true, true]
                 */
                function stubTrue() {
                    return true;
                }

                /**
                 * Invokes the iteratee `n` times, returning an array of the results of
                 * each invocation. The iteratee is invoked with one argument; (index).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.times(3, String);
                 * // => ['0', '1', '2']
                 *
                 *  _.times(4, _.constant(0));
                 * // => [0, 0, 0, 0]
                 */
                function times(n, iteratee) {
                    n = toInteger(n);
                    if (n < 1 || n > MAX_SAFE_INTEGER) {
                        return [];
                    }
                    var index = MAX_ARRAY_LENGTH,
                        length = nativeMin(n, MAX_ARRAY_LENGTH);

                    iteratee = getIteratee(iteratee);
                    n -= MAX_ARRAY_LENGTH;

                    var result = baseTimes(length, iteratee);
                    while (++index < n) {
                        iteratee(index);
                    }
                    return result;
                }

                /**
                 * Converts `value` to a property path array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the new property path array.
                 * @example
                 *
                 * _.toPath('a.b.c');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toPath('a[0].b.c');
                 * // => ['a', '0', 'b', 'c']
                 */
                function toPath(value) {
                    if (isArray(value)) {
                        return arrayMap(value, toKey);
                    }
                    return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
                }

                /**
                 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {string} [prefix=''] The value to prefix the ID with.
                 * @returns {string} Returns the unique ID.
                 * @example
                 *
                 * _.uniqueId('contact_');
                 * // => 'contact_104'
                 *
                 * _.uniqueId();
                 * // => '105'
                 */
                function uniqueId(prefix) {
                    var id = ++idCounter;
                    return toString(prefix) + id;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Adds two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {number} augend The first number in an addition.
                 * @param {number} addend The second number in an addition.
                 * @returns {number} Returns the total.
                 * @example
                 *
                 * _.add(6, 4);
                 * // => 10
                 */
                var add = createMathOperation(function(augend, addend) {
                    return augend + addend;
                }, 0);

                /**
                 * Computes `number` rounded up to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round up.
                 * @param {number} [precision=0] The precision to round up to.
                 * @returns {number} Returns the rounded up number.
                 * @example
                 *
                 * _.ceil(4.006);
                 * // => 5
                 *
                 * _.ceil(6.004, 2);
                 * // => 6.01
                 *
                 * _.ceil(6040, -2);
                 * // => 6100
                 */
                var ceil = createRound('ceil');

                /**
                 * Divide two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} dividend The first number in a division.
                 * @param {number} divisor The second number in a division.
                 * @returns {number} Returns the quotient.
                 * @example
                 *
                 * _.divide(6, 4);
                 * // => 1.5
                 */
                var divide = createMathOperation(function(dividend, divisor) {
                    return dividend / divisor;
                }, 1);

                /**
                 * Computes `number` rounded down to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round down.
                 * @param {number} [precision=0] The precision to round down to.
                 * @returns {number} Returns the rounded down number.
                 * @example
                 *
                 * _.floor(4.006);
                 * // => 4
                 *
                 * _.floor(0.046, 2);
                 * // => 0.04
                 *
                 * _.floor(4060, -2);
                 * // => 4000
                 */
                var floor = createRound('floor');

                /**
                 * Computes the maximum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * _.max([4, 2, 8, 6]);
                 * // => 8
                 *
                 * _.max([]);
                 * // => undefined
                 */
                function max(array) {
                    return (array && array.length)
                        ? baseExtremum(array, identity, baseGt)
                        : undefined;
                }

                /**
                 * This method is like `_.max` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.maxBy(objects, function(o) { return o.n; });
                 * // => { 'n': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.maxBy(objects, 'n');
                 * // => { 'n': 2 }
                 */
                function maxBy(array, iteratee) {
                    return (array && array.length)
                        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                        : undefined;
                }

                /**
                 * Computes the mean of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * _.mean([4, 2, 8, 6]);
                 * // => 5
                 */
                function mean(array) {
                    return baseMean(array, identity);
                }

                /**
                 * This method is like `_.mean` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be averaged.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.meanBy(objects, function(o) { return o.n; });
                 * // => 5
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.meanBy(objects, 'n');
                 * // => 5
                 */
                function meanBy(array, iteratee) {
                    return baseMean(array, getIteratee(iteratee, 2));
                }

                /**
                 * Computes the minimum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * _.min([4, 2, 8, 6]);
                 * // => 2
                 *
                 * _.min([]);
                 * // => undefined
                 */
                function min(array) {
                    return (array && array.length)
                        ? baseExtremum(array, identity, baseLt)
                        : undefined;
                }

                /**
                 * This method is like `_.min` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.minBy(objects, function(o) { return o.n; });
                 * // => { 'n': 1 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.minBy(objects, 'n');
                 * // => { 'n': 1 }
                 */
                function minBy(array, iteratee) {
                    return (array && array.length)
                        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                        : undefined;
                }

                /**
                 * Multiply two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} multiplier The first number in a multiplication.
                 * @param {number} multiplicand The second number in a multiplication.
                 * @returns {number} Returns the product.
                 * @example
                 *
                 * _.multiply(6, 4);
                 * // => 24
                 */
                var multiply = createMathOperation(function(multiplier, multiplicand) {
                    return multiplier * multiplicand;
                }, 1);

                /**
                 * Computes `number` rounded to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round.
                 * @param {number} [precision=0] The precision to round to.
                 * @returns {number} Returns the rounded number.
                 * @example
                 *
                 * _.round(4.006);
                 * // => 4
                 *
                 * _.round(4.006, 2);
                 * // => 4.01
                 *
                 * _.round(4060, -2);
                 * // => 4100
                 */
                var round = createRound('round');

                /**
                 * Subtract two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {number} minuend The first number in a subtraction.
                 * @param {number} subtrahend The second number in a subtraction.
                 * @returns {number} Returns the difference.
                 * @example
                 *
                 * _.subtract(6, 4);
                 * // => 2
                 */
                var subtract = createMathOperation(function(minuend, subtrahend) {
                    return minuend - subtrahend;
                }, 0);

                /**
                 * Computes the sum of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * _.sum([4, 2, 8, 6]);
                 * // => 20
                 */
                function sum(array) {
                    return (array && array.length)
                        ? baseSum(array, identity)
                        : 0;
                }

                /**
                 * This method is like `_.sum` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be summed.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.sumBy(objects, function(o) { return o.n; });
                 * // => 20
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sumBy(objects, 'n');
                 * // => 20
                 */
                function sumBy(array, iteratee) {
                    return (array && array.length)
                        ? baseSum(array, getIteratee(iteratee, 2))
                        : 0;
                }

                /*------------------------------------------------------------------------*/

                // Add methods that return wrapped values in chain sequences.
                lodash.after = after;
                lodash.ary = ary;
                lodash.assign = assign;
                lodash.assignIn = assignIn;
                lodash.assignInWith = assignInWith;
                lodash.assignWith = assignWith;
                lodash.at = at;
                lodash.before = before;
                lodash.bind = bind;
                lodash.bindAll = bindAll;
                lodash.bindKey = bindKey;
                lodash.castArray = castArray;
                lodash.chain = chain;
                lodash.chunk = chunk;
                lodash.compact = compact;
                lodash.concat = concat;
                lodash.cond = cond;
                lodash.conforms = conforms;
                lodash.constant = constant;
                lodash.countBy = countBy;
                lodash.create = create;
                lodash.curry = curry;
                lodash.curryRight = curryRight;
                lodash.debounce = debounce;
                lodash.defaults = defaults;
                lodash.defaultsDeep = defaultsDeep;
                lodash.defer = defer;
                lodash.delay = delay;
                lodash.difference = difference;
                lodash.differenceBy = differenceBy;
                lodash.differenceWith = differenceWith;
                lodash.drop = drop;
                lodash.dropRight = dropRight;
                lodash.dropRightWhile = dropRightWhile;
                lodash.dropWhile = dropWhile;
                lodash.fill = fill;
                lodash.filter = filter;
                lodash.flatMap = flatMap;
                lodash.flatMapDeep = flatMapDeep;
                lodash.flatMapDepth = flatMapDepth;
                lodash.flatten = flatten;
                lodash.flattenDeep = flattenDeep;
                lodash.flattenDepth = flattenDepth;
                lodash.flip = flip;
                lodash.flow = flow;
                lodash.flowRight = flowRight;
                lodash.fromPairs = fromPairs;
                lodash.functions = functions;
                lodash.functionsIn = functionsIn;
                lodash.groupBy = groupBy;
                lodash.initial = initial;
                lodash.intersection = intersection;
                lodash.intersectionBy = intersectionBy;
                lodash.intersectionWith = intersectionWith;
                lodash.invert = invert;
                lodash.invertBy = invertBy;
                lodash.invokeMap = invokeMap;
                lodash.iteratee = iteratee;
                lodash.keyBy = keyBy;
                lodash.keys = keys;
                lodash.keysIn = keysIn;
                lodash.map = map;
                lodash.mapKeys = mapKeys;
                lodash.mapValues = mapValues;
                lodash.matches = matches;
                lodash.matchesProperty = matchesProperty;
                lodash.memoize = memoize;
                lodash.merge = merge;
                lodash.mergeWith = mergeWith;
                lodash.method = method;
                lodash.methodOf = methodOf;
                lodash.mixin = mixin;
                lodash.negate = negate;
                lodash.nthArg = nthArg;
                lodash.omit = omit;
                lodash.omitBy = omitBy;
                lodash.once = once;
                lodash.orderBy = orderBy;
                lodash.over = over;
                lodash.overArgs = overArgs;
                lodash.overEvery = overEvery;
                lodash.overSome = overSome;
                lodash.partial = partial;
                lodash.partialRight = partialRight;
                lodash.partition = partition;
                lodash.pick = pick;
                lodash.pickBy = pickBy;
                lodash.property = property;
                lodash.propertyOf = propertyOf;
                lodash.pull = pull;
                lodash.pullAll = pullAll;
                lodash.pullAllBy = pullAllBy;
                lodash.pullAllWith = pullAllWith;
                lodash.pullAt = pullAt;
                lodash.range = range;
                lodash.rangeRight = rangeRight;
                lodash.rearg = rearg;
                lodash.reject = reject;
                lodash.remove = remove;
                lodash.rest = rest;
                lodash.reverse = reverse;
                lodash.sampleSize = sampleSize;
                lodash.set = set;
                lodash.setWith = setWith;
                lodash.shuffle = shuffle;
                lodash.slice = slice;
                lodash.sortBy = sortBy;
                lodash.sortedUniq = sortedUniq;
                lodash.sortedUniqBy = sortedUniqBy;
                lodash.split = split;
                lodash.spread = spread;
                lodash.tail = tail;
                lodash.take = take;
                lodash.takeRight = takeRight;
                lodash.takeRightWhile = takeRightWhile;
                lodash.takeWhile = takeWhile;
                lodash.tap = tap;
                lodash.throttle = throttle;
                lodash.thru = thru;
                lodash.toArray = toArray;
                lodash.toPairs = toPairs;
                lodash.toPairsIn = toPairsIn;
                lodash.toPath = toPath;
                lodash.toPlainObject = toPlainObject;
                lodash.transform = transform;
                lodash.unary = unary;
                lodash.union = union;
                lodash.unionBy = unionBy;
                lodash.unionWith = unionWith;
                lodash.uniq = uniq;
                lodash.uniqBy = uniqBy;
                lodash.uniqWith = uniqWith;
                lodash.unset = unset;
                lodash.unzip = unzip;
                lodash.unzipWith = unzipWith;
                lodash.update = update;
                lodash.updateWith = updateWith;
                lodash.values = values;
                lodash.valuesIn = valuesIn;
                lodash.without = without;
                lodash.words = words;
                lodash.wrap = wrap;
                lodash.xor = xor;
                lodash.xorBy = xorBy;
                lodash.xorWith = xorWith;
                lodash.zip = zip;
                lodash.zipObject = zipObject;
                lodash.zipObjectDeep = zipObjectDeep;
                lodash.zipWith = zipWith;

                // Add aliases.
                lodash.entries = toPairs;
                lodash.entriesIn = toPairsIn;
                lodash.extend = assignIn;
                lodash.extendWith = assignInWith;

                // Add methods to `lodash.prototype`.
                mixin(lodash, lodash);

                /*------------------------------------------------------------------------*/

                // Add methods that return unwrapped values in chain sequences.
                lodash.add = add;
                lodash.attempt = attempt;
                lodash.camelCase = camelCase;
                lodash.capitalize = capitalize;
                lodash.ceil = ceil;
                lodash.clamp = clamp;
                lodash.clone = clone;
                lodash.cloneDeep = cloneDeep;
                lodash.cloneDeepWith = cloneDeepWith;
                lodash.cloneWith = cloneWith;
                lodash.conformsTo = conformsTo;
                lodash.deburr = deburr;
                lodash.defaultTo = defaultTo;
                lodash.divide = divide;
                lodash.endsWith = endsWith;
                lodash.eq = eq;
                lodash.escape = escape;
                lodash.escapeRegExp = escapeRegExp;
                lodash.every = every;
                lodash.find = find;
                lodash.findIndex = findIndex;
                lodash.findKey = findKey;
                lodash.findLast = findLast;
                lodash.findLastIndex = findLastIndex;
                lodash.findLastKey = findLastKey;
                lodash.floor = floor;
                lodash.forEach = forEach;
                lodash.forEachRight = forEachRight;
                lodash.forIn = forIn;
                lodash.forInRight = forInRight;
                lodash.forOwn = forOwn;
                lodash.forOwnRight = forOwnRight;
                lodash.get = get;
                lodash.gt = gt;
                lodash.gte = gte;
                lodash.has = has;
                lodash.hasIn = hasIn;
                lodash.head = head;
                lodash.identity = identity;
                lodash.includes = includes;
                lodash.indexOf = indexOf;
                lodash.inRange = inRange;
                lodash.invoke = invoke;
                lodash.isArguments = isArguments;
                lodash.isArray = isArray;
                lodash.isArrayBuffer = isArrayBuffer;
                lodash.isArrayLike = isArrayLike;
                lodash.isArrayLikeObject = isArrayLikeObject;
                lodash.isBoolean = isBoolean;
                lodash.isBuffer = isBuffer;
                lodash.isDate = isDate;
                lodash.isElement = isElement;
                lodash.isEmpty = isEmpty;
                lodash.isEqual = isEqual;
                lodash.isEqualWith = isEqualWith;
                lodash.isError = isError;
                lodash.isFinite = isFinite;
                lodash.isFunction = isFunction;
                lodash.isInteger = isInteger;
                lodash.isLength = isLength;
                lodash.isMap = isMap;
                lodash.isMatch = isMatch;
                lodash.isMatchWith = isMatchWith;
                lodash.isNaN = isNaN;
                lodash.isNative = isNative;
                lodash.isNil = isNil;
                lodash.isNull = isNull;
                lodash.isNumber = isNumber;
                lodash.isObject = isObject;
                lodash.isObjectLike = isObjectLike;
                lodash.isPlainObject = isPlainObject;
                lodash.isRegExp = isRegExp;
                lodash.isSafeInteger = isSafeInteger;
                lodash.isSet = isSet;
                lodash.isString = isString;
                lodash.isSymbol = isSymbol;
                lodash.isTypedArray = isTypedArray;
                lodash.isUndefined = isUndefined;
                lodash.isWeakMap = isWeakMap;
                lodash.isWeakSet = isWeakSet;
                lodash.join = join;
                lodash.kebabCase = kebabCase;
                lodash.last = last;
                lodash.lastIndexOf = lastIndexOf;
                lodash.lowerCase = lowerCase;
                lodash.lowerFirst = lowerFirst;
                lodash.lt = lt;
                lodash.lte = lte;
                lodash.max = max;
                lodash.maxBy = maxBy;
                lodash.mean = mean;
                lodash.meanBy = meanBy;
                lodash.min = min;
                lodash.minBy = minBy;
                lodash.stubArray = stubArray;
                lodash.stubFalse = stubFalse;
                lodash.stubObject = stubObject;
                lodash.stubString = stubString;
                lodash.stubTrue = stubTrue;
                lodash.multiply = multiply;
                lodash.nth = nth;
                lodash.noConflict = noConflict;
                lodash.noop = noop;
                lodash.now = now;
                lodash.pad = pad;
                lodash.padEnd = padEnd;
                lodash.padStart = padStart;
                lodash.parseInt = parseInt;
                lodash.random = random;
                lodash.reduce = reduce;
                lodash.reduceRight = reduceRight;
                lodash.repeat = repeat;
                lodash.replace = replace;
                lodash.result = result;
                lodash.round = round;
                lodash.runInContext = runInContext;
                lodash.sample = sample;
                lodash.size = size;
                lodash.snakeCase = snakeCase;
                lodash.some = some;
                lodash.sortedIndex = sortedIndex;
                lodash.sortedIndexBy = sortedIndexBy;
                lodash.sortedIndexOf = sortedIndexOf;
                lodash.sortedLastIndex = sortedLastIndex;
                lodash.sortedLastIndexBy = sortedLastIndexBy;
                lodash.sortedLastIndexOf = sortedLastIndexOf;
                lodash.startCase = startCase;
                lodash.startsWith = startsWith;
                lodash.subtract = subtract;
                lodash.sum = sum;
                lodash.sumBy = sumBy;
                lodash.template = template;
                lodash.times = times;
                lodash.toFinite = toFinite;
                lodash.toInteger = toInteger;
                lodash.toLength = toLength;
                lodash.toLower = toLower;
                lodash.toNumber = toNumber;
                lodash.toSafeInteger = toSafeInteger;
                lodash.toString = toString;
                lodash.toUpper = toUpper;
                lodash.trim = trim;
                lodash.trimEnd = trimEnd;
                lodash.trimStart = trimStart;
                lodash.truncate = truncate;
                lodash.unescape = unescape;
                lodash.uniqueId = uniqueId;
                lodash.upperCase = upperCase;
                lodash.upperFirst = upperFirst;

                // Add aliases.
                lodash.each = forEach;
                lodash.eachRight = forEachRight;
                lodash.first = head;

                mixin(lodash, (function() {
                    var source = {};
                    baseForOwn(lodash, function(func, methodName) {
                        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                            source[methodName] = func;
                        }
                    });
                    return source;
                }()), { 'chain': false });

                /*------------------------------------------------------------------------*/

                /**
                 * The semantic version number.
                 *
                 * @static
                 * @memberOf _
                 * @type {string}
                 */
                lodash.VERSION = VERSION;

                // Assign default placeholders.
                arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
                    lodash[methodName].placeholder = lodash;
                });

                // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                arrayEach(['drop', 'take'], function(methodName, index) {
                    LazyWrapper.prototype[methodName] = function(n) {
                        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                        var result = (this.__filtered__ && !index)
                            ? new LazyWrapper(this)
                            : this.clone();

                        if (result.__filtered__) {
                            result.__takeCount__ = nativeMin(n, result.__takeCount__);
                        } else {
                            result.__views__.push({
                                'size': nativeMin(n, MAX_ARRAY_LENGTH),
                                'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                            });
                        }
                        return result;
                    };

                    LazyWrapper.prototype[methodName + 'Right'] = function(n) {
                        return this.reverse()[methodName](n).reverse();
                    };
                });

                // Add `LazyWrapper` methods that accept an `iteratee` value.
                arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
                    var type = index + 1,
                        isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                    LazyWrapper.prototype[methodName] = function(iteratee) {
                        var result = this.clone();
                        result.__iteratees__.push({
                            'iteratee': getIteratee(iteratee, 3),
                            'type': type
                        });
                        result.__filtered__ = result.__filtered__ || isFilter;
                        return result;
                    };
                });

                // Add `LazyWrapper` methods for `_.head` and `_.last`.
                arrayEach(['head', 'last'], function(methodName, index) {
                    var takeName = 'take' + (index ? 'Right' : '');

                    LazyWrapper.prototype[methodName] = function() {
                        return this[takeName](1).value()[0];
                    };
                });

                // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                arrayEach(['initial', 'tail'], function(methodName, index) {
                    var dropName = 'drop' + (index ? '' : 'Right');

                    LazyWrapper.prototype[methodName] = function() {
                        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                    };
                });

                LazyWrapper.prototype.compact = function() {
                    return this.filter(identity);
                };

                LazyWrapper.prototype.find = function(predicate) {
                    return this.filter(predicate).head();
                };

                LazyWrapper.prototype.findLast = function(predicate) {
                    return this.reverse().find(predicate);
                };

                LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
                    if (typeof path == 'function') {
                        return new LazyWrapper(this);
                    }
                    return this.map(function(value) {
                        return baseInvoke(value, path, args);
                    });
                });

                LazyWrapper.prototype.reject = function(predicate) {
                    return this.filter(negate(getIteratee(predicate)));
                };

                LazyWrapper.prototype.slice = function(start, end) {
                    start = toInteger(start);

                    var result = this;
                    if (result.__filtered__ && (start > 0 || end < 0)) {
                        return new LazyWrapper(result);
                    }
                    if (start < 0) {
                        result = result.takeRight(-start);
                    } else if (start) {
                        result = result.drop(start);
                    }
                    if (end !== undefined) {
                        end = toInteger(end);
                        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                    }
                    return result;
                };

                LazyWrapper.prototype.takeRightWhile = function(predicate) {
                    return this.reverse().takeWhile(predicate).reverse();
                };

                LazyWrapper.prototype.toArray = function() {
                    return this.take(MAX_ARRAY_LENGTH);
                };

                // Add `LazyWrapper` methods to `lodash.prototype`.
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                    var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                        isTaker = /^(?:head|last)$/.test(methodName),
                        lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
                        retUnwrapped = isTaker || /^find/.test(methodName);

                    if (!lodashFunc) {
                        return;
                    }
                    lodash.prototype[methodName] = function() {
                        var value = this.__wrapped__,
                            args = isTaker ? [1] : arguments,
                            isLazy = value instanceof LazyWrapper,
                            iteratee = args[0],
                            useLazy = isLazy || isArray(value);

                        var interceptor = function(value) {
                            var result = lodashFunc.apply(lodash, arrayPush([value], args));
                            return (isTaker && chainAll) ? result[0] : result;
                        };

                        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                            // Avoid lazy use if the iteratee has a "length" value other than `1`.
                            isLazy = useLazy = false;
                        }
                        var chainAll = this.__chain__,
                            isHybrid = !!this.__actions__.length,
                            isUnwrapped = retUnwrapped && !chainAll,
                            onlyLazy = isLazy && !isHybrid;

                        if (!retUnwrapped && useLazy) {
                            value = onlyLazy ? value : new LazyWrapper(this);
                            var result = func.apply(value, args);
                            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
                            return new LodashWrapper(result, chainAll);
                        }
                        if (isUnwrapped && onlyLazy) {
                            return func.apply(this, args);
                        }
                        result = this.thru(interceptor);
                        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                    };
                });

                // Add `Array` methods to `lodash.prototype`.
                arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
                    var func = arrayProto[methodName],
                        chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                        retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                    lodash.prototype[methodName] = function() {
                        var args = arguments;
                        if (retUnwrapped && !this.__chain__) {
                            var value = this.value();
                            return func.apply(isArray(value) ? value : [], args);
                        }
                        return this[chainName](function(value) {
                            return func.apply(isArray(value) ? value : [], args);
                        });
                    };
                });

                // Map minified method names to their real names.
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                    var lodashFunc = lodash[methodName];
                    if (lodashFunc) {
                        var key = (lodashFunc.name + ''),
                            names = realNames[key] || (realNames[key] = []);

                        names.push({ 'name': methodName, 'func': lodashFunc });
                    }
                });

                realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                    'name': 'wrapper',
                    'func': undefined
                }];

                // Add methods to `LazyWrapper`.
                LazyWrapper.prototype.clone = lazyClone;
                LazyWrapper.prototype.reverse = lazyReverse;
                LazyWrapper.prototype.value = lazyValue;

                // Add chain sequence methods to the `lodash` wrapper.
                lodash.prototype.at = wrapperAt;
                lodash.prototype.chain = wrapperChain;
                lodash.prototype.commit = wrapperCommit;
                lodash.prototype.next = wrapperNext;
                lodash.prototype.plant = wrapperPlant;
                lodash.prototype.reverse = wrapperReverse;
                lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

                // Add lazy aliases.
                lodash.prototype.first = lodash.prototype.head;

                if (symIterator) {
                    lodash.prototype[symIterator] = wrapperToIterator;
                }
                return lodash;
            });

            /*--------------------------------------------------------------------------*/

            // Export lodash.
            var _ = runInContext();

            // Some AMD build optimizers, like r.js, check for condition patterns like:
            if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
                // Expose Lodash on the global object to prevent errors when Lodash is
                // loaded by a script tag in the presence of an AMD loader.
                // See http://requirejs.org/docs/errors.html#mismatch for more details.
                // Use `_.noConflict` to remove Lodash from the global object.
                root._ = _;

                // Define as an anonymous module so, through path mapping, it can be
                // referenced as the "underscore" module.
                define(function() {
                    return _;
                });
            }
            // Check for `exports` after `define` in case a build optimizer adds it.
            else if (freeModule) {
                // Export for Node.js.
                (freeModule.exports = _)._ = _;
                // Export for CommonJS support.
                freeExports._ = _;
            }
            else {
                // Export to the global object.
                root._ = _;
            }
        }.call(this));

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],124:[function(require,module,exports){
    (function (process){
        'use strict';

        if (!process.version ||
            process.version.indexOf('v0.') === 0 ||
            process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
            module.exports = nextTick;
        } else {
            module.exports = process.nextTick;
        }

        function nextTick(fn, arg1, arg2, arg3) {
            if (typeof fn !== 'function') {
                throw new TypeError('"callback" argument must be a function');
            }
            var len = arguments.length;
            var args, i;
            switch (len) {
                case 0:
                case 1:
                    return process.nextTick(fn);
                case 2:
                    return process.nextTick(function afterTickOne() {
                        fn.call(null, arg1);
                    });
                case 3:
                    return process.nextTick(function afterTickTwo() {
                        fn.call(null, arg1, arg2);
                    });
                case 4:
                    return process.nextTick(function afterTickThree() {
                        fn.call(null, arg1, arg2, arg3);
                    });
                default:
                    args = new Array(len - 1);
                    i = 0;
                    while (i < args.length) {
                        args[i++] = arguments[i];
                    }
                    return process.nextTick(function afterTick() {
                        fn.apply(null, args);
                    });
            }
        }

    }).call(this,require('_process'))
},{"_process":125}],125:[function(require,module,exports){
// shim for using process in browser
    var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    } ())
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };

// v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) { return [] }

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };

},{}],126:[function(require,module,exports){
    (function (global){
        /*! https://mths.be/punycode v1.4.1 by @mathias */
        ;(function(root) {

            /** Detect free variables */
            var freeExports = typeof exports == 'object' && exports &&
                !exports.nodeType && exports;
            var freeModule = typeof module == 'object' && module &&
                !module.nodeType && module;
            var freeGlobal = typeof global == 'object' && global;
            if (
                freeGlobal.global === freeGlobal ||
                freeGlobal.window === freeGlobal ||
                freeGlobal.self === freeGlobal
            ) {
                root = freeGlobal;
            }

            /**
             * The `punycode` object.
             * @name punycode
             * @type Object
             */
            var punycode,

                /** Highest positive signed 32-bit float value */
                maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

                /** Bootstring parameters */
                base = 36,
                tMin = 1,
                tMax = 26,
                skew = 38,
                damp = 700,
                initialBias = 72,
                initialN = 128, // 0x80
                delimiter = '-', // '\x2D'

                /** Regular expressions */
                regexPunycode = /^xn--/,
                regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
                regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

                /** Error messages */
                errors = {
                    'overflow': 'Overflow: input needs wider integers to process',
                    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
                    'invalid-input': 'Invalid input'
                },

                /** Convenience shortcuts */
                baseMinusTMin = base - tMin,
                floor = Math.floor,
                stringFromCharCode = String.fromCharCode,

                /** Temporary variable */
                key;

            /*--------------------------------------------------------------------------*/

            /**
             * A generic error utility function.
             * @private
             * @param {String} type The error type.
             * @returns {Error} Throws a `RangeError` with the applicable error message.
             */
            function error(type) {
                throw new RangeError(errors[type]);
            }

            /**
             * A generic `Array#map` utility function.
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} callback The function that gets called for every array
             * item.
             * @returns {Array} A new array of values returned by the callback function.
             */
            function map(array, fn) {
                var length = array.length;
                var result = [];
                while (length--) {
                    result[length] = fn(array[length]);
                }
                return result;
            }

            /**
             * A simple `Array#map`-like wrapper to work with domain name strings or email
             * addresses.
             * @private
             * @param {String} domain The domain name or email address.
             * @param {Function} callback The function that gets called for every
             * character.
             * @returns {Array} A new string of characters returned by the callback
             * function.
             */
            function mapDomain(string, fn) {
                var parts = string.split('@');
                var result = '';
                if (parts.length > 1) {
                    // In email addresses, only the domain name should be punycoded. Leave
                    // the local part (i.e. everything up to `@`) intact.
                    result = parts[0] + '@';
                    string = parts[1];
                }
                // Avoid `split(regex)` for IE8 compatibility. See #17.
                string = string.replace(regexSeparators, '\x2E');
                var labels = string.split('.');
                var encoded = map(labels, fn).join('.');
                return result + encoded;
            }

            /**
             * Creates an array containing the numeric code points of each Unicode
             * character in the string. While JavaScript uses UCS-2 internally,
             * this function will convert a pair of surrogate halves (each of which
             * UCS-2 exposes as separate characters) into a single code point,
             * matching UTF-16.
             * @see `punycode.ucs2.encode`
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode.ucs2
             * @name decode
             * @param {String} string The Unicode input string (UCS-2).
             * @returns {Array} The new array of code points.
             */
            function ucs2decode(string) {
                var output = [],
                    counter = 0,
                    length = string.length,
                    value,
                    extra;
                while (counter < length) {
                    value = string.charCodeAt(counter++);
                    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                        // high surrogate, and there is a next character
                        extra = string.charCodeAt(counter++);
                        if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                        } else {
                            // unmatched surrogate; only append this code unit, in case the next
                            // code unit is the high surrogate of a surrogate pair
                            output.push(value);
                            counter--;
                        }
                    } else {
                        output.push(value);
                    }
                }
                return output;
            }

            /**
             * Creates a string based on an array of numeric code points.
             * @see `punycode.ucs2.decode`
             * @memberOf punycode.ucs2
             * @name encode
             * @param {Array} codePoints The array of numeric code points.
             * @returns {String} The new Unicode string (UCS-2).
             */
            function ucs2encode(array) {
                return map(array, function(value) {
                    var output = '';
                    if (value > 0xFFFF) {
                        value -= 0x10000;
                        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                        value = 0xDC00 | value & 0x3FF;
                    }
                    output += stringFromCharCode(value);
                    return output;
                }).join('');
            }

            /**
             * Converts a basic code point into a digit/integer.
             * @see `digitToBasic()`
             * @private
             * @param {Number} codePoint The basic numeric code point value.
             * @returns {Number} The numeric value of a basic code point (for use in
             * representing integers) in the range `0` to `base - 1`, or `base` if
             * the code point does not represent a value.
             */
            function basicToDigit(codePoint) {
                if (codePoint - 48 < 10) {
                    return codePoint - 22;
                }
                if (codePoint - 65 < 26) {
                    return codePoint - 65;
                }
                if (codePoint - 97 < 26) {
                    return codePoint - 97;
                }
                return base;
            }

            /**
             * Converts a digit/integer into a basic code point.
             * @see `basicToDigit()`
             * @private
             * @param {Number} digit The numeric value of a basic code point.
             * @returns {Number} The basic code point whose value (when used for
             * representing integers) is `digit`, which needs to be in the range
             * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
             * used; else, the lowercase form is used. The behavior is undefined
             * if `flag` is non-zero and `digit` has no uppercase form.
             */
            function digitToBasic(digit, flag) {
                //  0..25 map to ASCII a..z or A..Z
                // 26..35 map to ASCII 0..9
                return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
            }

            /**
             * Bias adaptation function as per section 3.4 of RFC 3492.
             * https://tools.ietf.org/html/rfc3492#section-3.4
             * @private
             */
            function adapt(delta, numPoints, firstTime) {
                var k = 0;
                delta = firstTime ? floor(delta / damp) : delta >> 1;
                delta += floor(delta / numPoints);
                for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
                    delta = floor(delta / baseMinusTMin);
                }
                return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
            }

            /**
             * Converts a Punycode string of ASCII-only symbols to a string of Unicode
             * symbols.
             * @memberOf punycode
             * @param {String} input The Punycode string of ASCII-only symbols.
             * @returns {String} The resulting string of Unicode symbols.
             */
            function decode(input) {
                // Don't use UCS-2
                var output = [],
                    inputLength = input.length,
                    out,
                    i = 0,
                    n = initialN,
                    bias = initialBias,
                    basic,
                    j,
                    index,
                    oldi,
                    w,
                    k,
                    digit,
                    t,
                    /** Cached calculation results */
                    baseMinusT;

                // Handle the basic code points: let `basic` be the number of input code
                // points before the last delimiter, or `0` if there is none, then copy
                // the first basic code points to the output.

                basic = input.lastIndexOf(delimiter);
                if (basic < 0) {
                    basic = 0;
                }

                for (j = 0; j < basic; ++j) {
                    // if it's not a basic code point
                    if (input.charCodeAt(j) >= 0x80) {
                        error('not-basic');
                    }
                    output.push(input.charCodeAt(j));
                }

                // Main decoding loop: start just after the last delimiter if any basic code
                // points were copied; start at the beginning otherwise.

                for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

                    // `index` is the index of the next character to be consumed.
                    // Decode a generalized variable-length integer into `delta`,
                    // which gets added to `i`. The overflow checking is easier
                    // if we increase `i` as we go, then subtract off its starting
                    // value at the end to obtain `delta`.
                    for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

                        if (index >= inputLength) {
                            error('invalid-input');
                        }

                        digit = basicToDigit(input.charCodeAt(index++));

                        if (digit >= base || digit > floor((maxInt - i) / w)) {
                            error('overflow');
                        }

                        i += digit * w;
                        t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

                        if (digit < t) {
                            break;
                        }

                        baseMinusT = base - t;
                        if (w > floor(maxInt / baseMinusT)) {
                            error('overflow');
                        }

                        w *= baseMinusT;

                    }

                    out = output.length + 1;
                    bias = adapt(i - oldi, out, oldi == 0);

                    // `i` was supposed to wrap around from `out` to `0`,
                    // incrementing `n` each time, so we'll fix that now:
                    if (floor(i / out) > maxInt - n) {
                        error('overflow');
                    }

                    n += floor(i / out);
                    i %= out;

                    // Insert `n` at position `i` of the output
                    output.splice(i++, 0, n);

                }

                return ucs2encode(output);
            }

            /**
             * Converts a string of Unicode symbols (e.g. a domain name label) to a
             * Punycode string of ASCII-only symbols.
             * @memberOf punycode
             * @param {String} input The string of Unicode symbols.
             * @returns {String} The resulting Punycode string of ASCII-only symbols.
             */
            function encode(input) {
                var n,
                    delta,
                    handledCPCount,
                    basicLength,
                    bias,
                    j,
                    m,
                    q,
                    k,
                    t,
                    currentValue,
                    output = [],
                    /** `inputLength` will hold the number of code points in `input`. */
                    inputLength,
                    /** Cached calculation results */
                    handledCPCountPlusOne,
                    baseMinusT,
                    qMinusT;

                // Convert the input in UCS-2 to Unicode
                input = ucs2decode(input);

                // Cache the length
                inputLength = input.length;

                // Initialize the state
                n = initialN;
                delta = 0;
                bias = initialBias;

                // Handle the basic code points
                for (j = 0; j < inputLength; ++j) {
                    currentValue = input[j];
                    if (currentValue < 0x80) {
                        output.push(stringFromCharCode(currentValue));
                    }
                }

                handledCPCount = basicLength = output.length;

                // `handledCPCount` is the number of code points that have been handled;
                // `basicLength` is the number of basic code points.

                // Finish the basic string - if it is not empty - with a delimiter
                if (basicLength) {
                    output.push(delimiter);
                }

                // Main encoding loop:
                while (handledCPCount < inputLength) {

                    // All non-basic code points < n have been handled already. Find the next
                    // larger one:
                    for (m = maxInt, j = 0; j < inputLength; ++j) {
                        currentValue = input[j];
                        if (currentValue >= n && currentValue < m) {
                            m = currentValue;
                        }
                    }

                    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                    // but guard against overflow
                    handledCPCountPlusOne = handledCPCount + 1;
                    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                        error('overflow');
                    }

                    delta += (m - n) * handledCPCountPlusOne;
                    n = m;

                    for (j = 0; j < inputLength; ++j) {
                        currentValue = input[j];

                        if (currentValue < n && ++delta > maxInt) {
                            error('overflow');
                        }

                        if (currentValue == n) {
                            // Represent delta as a generalized variable-length integer
                            for (q = delta, k = base; /* no condition */; k += base) {
                                t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                                if (q < t) {
                                    break;
                                }
                                qMinusT = q - t;
                                baseMinusT = base - t;
                                output.push(
                                    stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                                );
                                q = floor(qMinusT / baseMinusT);
                            }

                            output.push(stringFromCharCode(digitToBasic(q, 0)));
                            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                            delta = 0;
                            ++handledCPCount;
                        }
                    }

                    ++delta;
                    ++n;

                }
                return output.join('');
            }

            /**
             * Converts a Punycode string representing a domain name or an email address
             * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
             * it doesn't matter if you call it on a string that has already been
             * converted to Unicode.
             * @memberOf punycode
             * @param {String} input The Punycoded domain name or email address to
             * convert to Unicode.
             * @returns {String} The Unicode representation of the given Punycode
             * string.
             */
            function toUnicode(input) {
                return mapDomain(input, function(string) {
                    return regexPunycode.test(string)
                        ? decode(string.slice(4).toLowerCase())
                        : string;
                });
            }

            /**
             * Converts a Unicode string representing a domain name or an email address to
             * Punycode. Only the non-ASCII parts of the domain name will be converted,
             * i.e. it doesn't matter if you call it with a domain that's already in
             * ASCII.
             * @memberOf punycode
             * @param {String} input The domain name or email address to convert, as a
             * Unicode string.
             * @returns {String} The Punycode representation of the given domain name or
             * email address.
             */
            function toASCII(input) {
                return mapDomain(input, function(string) {
                    return regexNonASCII.test(string)
                        ? 'xn--' + encode(string)
                        : string;
                });
            }

            /*--------------------------------------------------------------------------*/

            /** Define the public API */
            punycode = {
                /**
                 * A string representing the current Punycode.js version number.
                 * @memberOf punycode
                 * @type String
                 */
                'version': '1.4.1',
                /**
                 * An object of methods to convert from JavaScript's internal character
                 * representation (UCS-2) to Unicode code points, and back.
                 * @see <https://mathiasbynens.be/notes/javascript-encoding>
                 * @memberOf punycode
                 * @type Object
                 */
                'ucs2': {
                    'decode': ucs2decode,
                    'encode': ucs2encode
                },
                'decode': decode,
                'encode': encode,
                'toASCII': toASCII,
                'toUnicode': toUnicode
            };

            /** Expose `punycode` */
            // Some AMD build optimizers, like r.js, check for specific condition patterns
            // like the following:
            if (
                typeof define == 'function' &&
                typeof define.amd == 'object' &&
                define.amd
            ) {
                define('punycode', function() {
                    return punycode;
                });
            } else if (freeExports && freeModule) {
                if (module.exports == freeExports) {
                    // in Node.js, io.js, or RingoJS v0.8.0+
                    freeModule.exports = punycode;
                } else {
                    // in Narwhal or RingoJS v0.7.0-
                    for (key in punycode) {
                        punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
                    }
                }
            } else {
                // in Rhino or a web browser
                root.punycode = punycode;
            }

        }(this));

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],127:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

    'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
    function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    module.exports = function(qs, sep, eq, options) {
        sep = sep || '&';
        eq = eq || '=';
        var obj = {};

        if (typeof qs !== 'string' || qs.length === 0) {
            return obj;
        }

        var regexp = /\+/g;
        qs = qs.split(sep);

        var maxKeys = 1000;
        if (options && typeof options.maxKeys === 'number') {
            maxKeys = options.maxKeys;
        }

        var len = qs.length;
        // maxKeys <= 0 means that we should not limit keys count
        if (maxKeys > 0 && len > maxKeys) {
            len = maxKeys;
        }

        for (var i = 0; i < len; ++i) {
            var x = qs[i].replace(regexp, '%20'),
                idx = x.indexOf(eq),
                kstr, vstr, k, v;

            if (idx >= 0) {
                kstr = x.substr(0, idx);
                vstr = x.substr(idx + 1);
            } else {
                kstr = x;
                vstr = '';
            }

            k = decodeURIComponent(kstr);
            v = decodeURIComponent(vstr);

            if (!hasOwnProperty(obj, k)) {
                obj[k] = v;
            } else if (isArray(obj[k])) {
                obj[k].push(v);
            } else {
                obj[k] = [obj[k], v];
            }
        }

        return obj;
    };

    var isArray = Array.isArray || function (xs) {
            return Object.prototype.toString.call(xs) === '[object Array]';
        };

},{}],128:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

    'use strict';

    var stringifyPrimitive = function(v) {
        switch (typeof v) {
            case 'string':
                return v;

            case 'boolean':
                return v ? 'true' : 'false';

            case 'number':
                return isFinite(v) ? v : '';

            default:
                return '';
        }
    };

    module.exports = function(obj, sep, eq, name) {
        sep = sep || '&';
        eq = eq || '=';
        if (obj === null) {
            obj = undefined;
        }

        if (typeof obj === 'object') {
            return map(objectKeys(obj), function(k) {
                var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
                if (isArray(obj[k])) {
                    return map(obj[k], function(v) {
                        return ks + encodeURIComponent(stringifyPrimitive(v));
                    }).join(sep);
                } else {
                    return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
                }
            }).join(sep);

        }

        if (!name) return '';
        return encodeURIComponent(stringifyPrimitive(name)) + eq +
            encodeURIComponent(stringifyPrimitive(obj));
    };

    var isArray = Array.isArray || function (xs) {
            return Object.prototype.toString.call(xs) === '[object Array]';
        };

    function map (xs, f) {
        if (xs.map) return xs.map(f);
        var res = [];
        for (var i = 0; i < xs.length; i++) {
            res.push(f(xs[i], i));
        }
        return res;
    }

    var objectKeys = Object.keys || function (obj) {
            var res = [];
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
            }
            return res;
        };

},{}],129:[function(require,module,exports){
    'use strict';

    exports.decode = exports.parse = require('./decode');
    exports.encode = exports.stringify = require('./encode');

},{"./decode":127,"./encode":128}],130:[function(require,module,exports){
    /* eslint-disable node/no-deprecated-api */
    var buffer = require('buffer')
    var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
        for (var key in src) {
            dst[key] = src[key]
        }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
        module.exports = buffer
    } else {
        // Copy properties from require('buffer')
        copyProps(buffer, exports)
        exports.Buffer = SafeBuffer
    }

    function SafeBuffer (arg, encodingOrOffset, length) {
        return Buffer(arg, encodingOrOffset, length)
    }

// Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer)

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === 'number') {
            throw new TypeError('Argument must not be a number')
        }
        return Buffer(arg, encodingOrOffset, length)
    }

    SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
        }
        var buf = Buffer(size)
        if (fill !== undefined) {
            if (typeof encoding === 'string') {
                buf.fill(fill, encoding)
            } else {
                buf.fill(fill)
            }
        } else {
            buf.fill(0)
        }
        return buf
    }

    SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
        }
        return Buffer(size)
    }

    SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
        }
        return buffer.SlowBuffer(size)
    }

},{"buffer":32}],131:[function(require,module,exports){
    (function (global){
        var ClientRequest = require('./lib/request')
        var extend = require('xtend')
        var statusCodes = require('builtin-status-codes')
        var url = require('url')

        var http = exports

        http.request = function (opts, cb) {
            if (typeof opts === 'string')
                opts = url.parse(opts)
            else
                opts = extend(opts)

            // Normally, the page is loaded from http or https, so not specifying a protocol
            // will result in a (valid) protocol-relative url. However, this won't work if
            // the protocol is something else, like 'file:'
            var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

            var protocol = opts.protocol || defaultProtocol
            var host = opts.hostname || opts.host
            var port = opts.port
            var path = opts.path || '/'

            // Necessary for IPv6 addresses
            if (host && host.indexOf(':') !== -1)
                host = '[' + host + ']'

            // This may be a relative url. The browser should always be able to interpret it correctly.
            opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
            opts.method = (opts.method || 'GET').toUpperCase()
            opts.headers = opts.headers || {}

            // Also valid opts.auth, opts.mode

            var req = new ClientRequest(opts)
            if (cb)
                req.on('response', cb)
            return req
        }

        http.get = function get (opts, cb) {
            var req = http.request(opts, cb)
            req.end()
            return req
        }

        http.Agent = function () {}
        http.Agent.defaultMaxSockets = 4

        http.STATUS_CODES = statusCodes

        http.METHODS = [
            'CHECKOUT',
            'CONNECT',
            'COPY',
            'DELETE',
            'GET',
            'HEAD',
            'LOCK',
            'M-SEARCH',
            'MERGE',
            'MKACTIVITY',
            'MKCOL',
            'MOVE',
            'NOTIFY',
            'OPTIONS',
            'PATCH',
            'POST',
            'PROPFIND',
            'PROPPATCH',
            'PURGE',
            'PUT',
            'REPORT',
            'SEARCH',
            'SUBSCRIBE',
            'TRACE',
            'UNLOCK',
            'UNSUBSCRIBE'
        ]
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./lib/request":133,"builtin-status-codes":37,"url":35,"xtend":149}],132:[function(require,module,exports){
    (function (global){
        exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

        exports.blobConstructor = false
        try {
            new Blob([new ArrayBuffer(1)])
            exports.blobConstructor = true
        } catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
        var xhr
        function getXHR () {
            // Cache the xhr value
            if (xhr !== undefined) return xhr

            if (global.XMLHttpRequest) {
                xhr = new global.XMLHttpRequest()
                // If XDomainRequest is available (ie only, where xhr might not work
                // cross domain), use the page location. Otherwise use example.com
                // Note: this doesn't actually make an http request.
                try {
                    xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
                } catch(e) {
                    xhr = null
                }
            } else {
                // Service workers don't have XHR
                xhr = null
            }
            return xhr
        }

        function checkTypeSupport (type) {
            var xhr = getXHR()
            if (!xhr) return false
            try {
                xhr.responseType = type
                return xhr.responseType === type
            } catch (e) {}
            return false
        }

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
        var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
        var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
        exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
        exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
        exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
            checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
        exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

        exports.vbArray = isFunction(global.VBArray)

        function isFunction (value) {
            return typeof value === 'function'
        }

        xhr = null // Help gc

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],133:[function(require,module,exports){
    (function (process,global,Buffer){
        var capability = require('./capability')
        var inherits = require('inherits')
        var response = require('./response')
        var stream = require('readable-stream')
        var toArrayBuffer = require('to-arraybuffer')

        var IncomingMessage = response.IncomingMessage
        var rStates = response.readyStates

        function decideMode (preferBinary, useFetch) {
            if (capability.fetch && useFetch) {
                return 'fetch'
            } else if (capability.mozchunkedarraybuffer) {
                return 'moz-chunked-arraybuffer'
            } else if (capability.msstream) {
                return 'ms-stream'
            } else if (capability.arraybuffer && preferBinary) {
                return 'arraybuffer'
            } else if (capability.vbArray && preferBinary) {
                return 'text:vbarray'
            } else {
                return 'text'
            }
        }

        var ClientRequest = module.exports = function (opts) {
            var self = this
            stream.Writable.call(self)

            self._opts = opts
            self._body = []
            self._headers = {}
            if (opts.auth)
                self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
            Object.keys(opts.headers).forEach(function (name) {
                self.setHeader(name, opts.headers[name])
            })

            var preferBinary
            var useFetch = true
            if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
                // If the use of XHR should be preferred and includes preserving the 'content-type' header.
                // Force XHR to be used since the Fetch API does not yet support timeouts.
                useFetch = false
                preferBinary = true
            } else if (opts.mode === 'prefer-streaming') {
                // If streaming is a high priority but binary compatibility and
                // the accuracy of the 'content-type' header aren't
                preferBinary = false
            } else if (opts.mode === 'allow-wrong-content-type') {
                // If streaming is more important than preserving the 'content-type' header
                preferBinary = !capability.overrideMimeType
            } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
                // Use binary if text streaming may corrupt data or the content-type header, or for speed
                preferBinary = true
            } else {
                throw new Error('Invalid value for opts.mode')
            }
            self._mode = decideMode(preferBinary, useFetch)

            self.on('finish', function () {
                self._onFinish()
            })
        }

        inherits(ClientRequest, stream.Writable)

        ClientRequest.prototype.setHeader = function (name, value) {
            var self = this
            var lowerName = name.toLowerCase()
            // This check is not necessary, but it prevents warnings from browsers about setting unsafe
            // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
            // http-browserify did it, so I will too.
            if (unsafeHeaders.indexOf(lowerName) !== -1)
                return

            self._headers[lowerName] = {
                name: name,
                value: value
            }
        }

        ClientRequest.prototype.getHeader = function (name) {
            var header = this._headers[name.toLowerCase()]
            if (header)
                return header.value
            return null
        }

        ClientRequest.prototype.removeHeader = function (name) {
            var self = this
            delete self._headers[name.toLowerCase()]
        }

        ClientRequest.prototype._onFinish = function () {
            var self = this

            if (self._destroyed)
                return
            var opts = self._opts

            var headersObj = self._headers
            var body = null
            if (opts.method !== 'GET' && opts.method !== 'HEAD') {
                if (capability.blobConstructor) {
                    body = new global.Blob(self._body.map(function (buffer) {
                        return toArrayBuffer(buffer)
                    }), {
                        type: (headersObj['content-type'] || {}).value || ''
                    })
                } else {
                    // get utf8 string
                    body = Buffer.concat(self._body).toString()
                }
            }

            // create flattened list of headers
            var headersList = []
            Object.keys(headersObj).forEach(function (keyName) {
                var name = headersObj[keyName].name
                var value = headersObj[keyName].value
                if (Array.isArray(value)) {
                    value.forEach(function (v) {
                        headersList.push([name, v])
                    })
                } else {
                    headersList.push([name, value])
                }
            })

            if (self._mode === 'fetch') {
                global.fetch(self._opts.url, {
                    method: self._opts.method,
                    headers: headersList,
                    body: body || undefined,
                    mode: 'cors',
                    credentials: opts.withCredentials ? 'include' : 'same-origin'
                }).then(function (response) {
                    self._fetchResponse = response
                    self._connect()
                }, function (reason) {
                    self.emit('error', reason)
                })
            } else {
                var xhr = self._xhr = new global.XMLHttpRequest()
                try {
                    xhr.open(self._opts.method, self._opts.url, true)
                } catch (err) {
                    process.nextTick(function () {
                        self.emit('error', err)
                    })
                    return
                }

                // Can't set responseType on really old browsers
                if ('responseType' in xhr)
                    xhr.responseType = self._mode.split(':')[0]

                if ('withCredentials' in xhr)
                    xhr.withCredentials = !!opts.withCredentials

                if (self._mode === 'text' && 'overrideMimeType' in xhr)
                    xhr.overrideMimeType('text/plain; charset=x-user-defined')

                if ('timeout' in opts) {
                    xhr.timeout = opts.timeout
                    xhr.ontimeout = function () {
                        self.emit('timeout')
                    }
                }

                headersList.forEach(function (header) {
                    xhr.setRequestHeader(header[0], header[1])
                })

                self._response = null
                xhr.onreadystatechange = function () {
                    switch (xhr.readyState) {
                        case rStates.LOADING:
                        case rStates.DONE:
                            self._onXHRProgress()
                            break
                    }
                }
                // Necessary for streaming in Firefox, since xhr.response is ONLY defined
                // in onprogress, not in onreadystatechange with xhr.readyState = 3
                if (self._mode === 'moz-chunked-arraybuffer') {
                    xhr.onprogress = function () {
                        self._onXHRProgress()
                    }
                }

                xhr.onerror = function () {
                    if (self._destroyed)
                        return
                    self.emit('error', new Error('XHR error'))
                }

                try {
                    xhr.send(body)
                } catch (err) {
                    process.nextTick(function () {
                        self.emit('error', err)
                    })
                    return
                }
            }
        }

        /**
         * Checks if xhr.status is readable and non-zero, indicating no error.
         * Even though the spec says it should be available in readyState 3,
         * accessing it throws an exception in IE8
         */
        function statusValid (xhr) {
            try {
                var status = xhr.status
                return (status !== null && status !== 0)
            } catch (e) {
                return false
            }
        }

        ClientRequest.prototype._onXHRProgress = function () {
            var self = this

            if (!statusValid(self._xhr) || self._destroyed)
                return

            if (!self._response)
                self._connect()

            self._response._onXHRProgress()
        }

        ClientRequest.prototype._connect = function () {
            var self = this

            if (self._destroyed)
                return

            self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
            self._response.on('error', function(err) {
                self.emit('error', err)
            })

            self.emit('response', self._response)
        }

        ClientRequest.prototype._write = function (chunk, encoding, cb) {
            var self = this

            self._body.push(chunk)
            cb()
        }

        ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
            var self = this
            self._destroyed = true
            if (self._response)
                self._response._destroyed = true
            if (self._xhr)
                self._xhr.abort()
            // Currently, there isn't a way to truly abort a fetch.
            // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
        }

        ClientRequest.prototype.end = function (data, encoding, cb) {
            var self = this
            if (typeof data === 'function') {
                cb = data
                data = undefined
            }

            stream.Writable.prototype.end.call(self, data, encoding, cb)
        }

        ClientRequest.prototype.flushHeaders = function () {}
        ClientRequest.prototype.setTimeout = function () {}
        ClientRequest.prototype.setNoDelay = function () {}
        ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
        var unsafeHeaders = [
            'accept-charset',
            'accept-encoding',
            'access-control-request-headers',
            'access-control-request-method',
            'connection',
            'content-length',
            'cookie',
            'cookie2',
            'date',
            'dnt',
            'expect',
            'host',
            'keep-alive',
            'origin',
            'referer',
            'te',
            'trailer',
            'transfer-encoding',
            'upgrade',
            'user-agent',
            'via'
        ]

    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":132,"./response":134,"_process":125,"buffer":32,"inherits":121,"readable-stream":144,"to-arraybuffer":146}],134:[function(require,module,exports){
    (function (process,global,Buffer){
        var capability = require('./capability')
        var inherits = require('inherits')
        var stream = require('readable-stream')

        var rStates = exports.readyStates = {
            UNSENT: 0,
            OPENED: 1,
            HEADERS_RECEIVED: 2,
            LOADING: 3,
            DONE: 4
        }

        var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
            var self = this
            stream.Readable.call(self)

            self._mode = mode
            self.headers = {}
            self.rawHeaders = []
            self.trailers = {}
            self.rawTrailers = []

            // Fake the 'close' event, but only once 'end' fires
            self.on('end', function () {
                // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
                process.nextTick(function () {
                    self.emit('close')
                })
            })

            if (mode === 'fetch') {
                self._fetchResponse = response

                self.url = response.url
                self.statusCode = response.status
                self.statusMessage = response.statusText

                response.headers.forEach(function(header, key){
                    self.headers[key.toLowerCase()] = header
                    self.rawHeaders.push(key, header)
                })


                // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
                var reader = response.body.getReader()
                function read () {
                    reader.read().then(function (result) {
                        if (self._destroyed)
                            return
                        if (result.done) {
                            self.push(null)
                            return
                        }
                        self.push(new Buffer(result.value))
                        read()
                    }).catch(function(err) {
                        self.emit('error', err)
                    })
                }
                read()

            } else {
                self._xhr = xhr
                self._pos = 0

                self.url = xhr.responseURL
                self.statusCode = xhr.status
                self.statusMessage = xhr.statusText
                var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
                headers.forEach(function (header) {
                    var matches = header.match(/^([^:]+):\s*(.*)/)
                    if (matches) {
                        var key = matches[1].toLowerCase()
                        if (key === 'set-cookie') {
                            if (self.headers[key] === undefined) {
                                self.headers[key] = []
                            }
                            self.headers[key].push(matches[2])
                        } else if (self.headers[key] !== undefined) {
                            self.headers[key] += ', ' + matches[2]
                        } else {
                            self.headers[key] = matches[2]
                        }
                        self.rawHeaders.push(matches[1], matches[2])
                    }
                })

                self._charset = 'x-user-defined'
                if (!capability.overrideMimeType) {
                    var mimeType = self.rawHeaders['mime-type']
                    if (mimeType) {
                        var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
                        if (charsetMatch) {
                            self._charset = charsetMatch[1].toLowerCase()
                        }
                    }
                    if (!self._charset)
                        self._charset = 'utf-8' // best guess
                }
            }
        }

        inherits(IncomingMessage, stream.Readable)

        IncomingMessage.prototype._read = function () {}

        IncomingMessage.prototype._onXHRProgress = function () {
            var self = this

            var xhr = self._xhr

            var response = null
            switch (self._mode) {
                case 'text:vbarray': // For IE9
                    if (xhr.readyState !== rStates.DONE)
                        break
                    try {
                        // This fails in IE8
                        response = new global.VBArray(xhr.responseBody).toArray()
                    } catch (e) {}
                    if (response !== null) {
                        self.push(new Buffer(response))
                        break
                    }
                // Falls through in IE8
                case 'text':
                    try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
                        response = xhr.responseText
                    } catch (e) {
                        self._mode = 'text:vbarray'
                        break
                    }
                    if (response.length > self._pos) {
                        var newData = response.substr(self._pos)
                        if (self._charset === 'x-user-defined') {
                            var buffer = new Buffer(newData.length)
                            for (var i = 0; i < newData.length; i++)
                                buffer[i] = newData.charCodeAt(i) & 0xff

                            self.push(buffer)
                        } else {
                            self.push(newData, self._charset)
                        }
                        self._pos = response.length
                    }
                    break
                case 'arraybuffer':
                    if (xhr.readyState !== rStates.DONE || !xhr.response)
                        break
                    response = xhr.response
                    self.push(new Buffer(new Uint8Array(response)))
                    break
                case 'moz-chunked-arraybuffer': // take whole
                    response = xhr.response
                    if (xhr.readyState !== rStates.LOADING || !response)
                        break
                    self.push(new Buffer(new Uint8Array(response)))
                    break
                case 'ms-stream':
                    response = xhr.response
                    if (xhr.readyState !== rStates.LOADING)
                        break
                    var reader = new global.MSStreamReader()
                    reader.onprogress = function () {
                        if (reader.result.byteLength > self._pos) {
                            self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
                            self._pos = reader.result.byteLength
                        }
                    }
                    reader.onload = function () {
                        self.push(null)
                    }
                    // reader.onerror = ??? // TODO: this
                    reader.readAsArrayBuffer(response)
                    break
            }

            // The ms-stream case handles end separately in reader.onload()
            if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
                self.push(null)
            }
        }

    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":132,"_process":125,"buffer":32,"inherits":121,"readable-stream":144}],135:[function(require,module,exports){
    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
            return toString.call(arr) == '[object Array]';
        };

},{}],136:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

    'use strict';

    /*<replacement>*/

    var processNextTick = require('process-nextick-args');
    /*</replacement>*/

    /*<replacement>*/
    var objectKeys = Object.keys || function (obj) {
            var keys = [];
            for (var key in obj) {
                keys.push(key);
            }return keys;
        };
    /*</replacement>*/

    module.exports = Duplex;

    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/

    var Readable = require('./_stream_readable');
    var Writable = require('./_stream_writable');

    util.inherits(Duplex, Readable);

    var keys = objectKeys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }

    function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);

        Readable.call(this, options);
        Writable.call(this, options);

        if (options && options.readable === false) this.readable = false;

        if (options && options.writable === false) this.writable = false;

        this.allowHalfOpen = true;
        if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

        this.once('end', onend);
    }

// the no-half-open enforcer
    function onend() {
        // if we allow half-open state, or if the writable side ended,
        // then we're ok.
        if (this.allowHalfOpen || this._writableState.ended) return;

        // no more data can be written.
        // But allow more writes to happen in this tick.
        processNextTick(onEndNT, this);
    }

    function onEndNT(self) {
        self.end();
    }

    Object.defineProperty(Duplex.prototype, 'destroyed', {
        get: function () {
            if (this._readableState === undefined || this._writableState === undefined) {
                return false;
            }
            return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function (value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (this._readableState === undefined || this._writableState === undefined) {
                return;
            }

            // backward compatibility, the user is explicitly
            // managing destroyed
            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
        }
    });

    Duplex.prototype._destroy = function (err, cb) {
        this.push(null);
        this.end();

        processNextTick(cb, err);
    };

    function forEach(xs, f) {
        for (var i = 0, l = xs.length; i < l; i++) {
            f(xs[i], i);
        }
    }
},{"./_stream_readable":138,"./_stream_writable":140,"core-util-is":38,"inherits":121,"process-nextick-args":124}],137:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

    'use strict';

    module.exports = PassThrough;

    var Transform = require('./_stream_transform');

    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(PassThrough, Transform);

    function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);

        Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
    };
},{"./_stream_transform":139,"core-util-is":38,"inherits":121}],138:[function(require,module,exports){
    (function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        /*<replacement>*/

        var processNextTick = require('process-nextick-args');
        /*</replacement>*/

        module.exports = Readable;

        /*<replacement>*/
        var isArray = require('isarray');
        /*</replacement>*/

        /*<replacement>*/
        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;

        /*<replacement>*/
        var EE = require('events').EventEmitter;

        var EElistenerCount = function (emitter, type) {
            return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/
        var Stream = require('./internal/streams/stream');
        /*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
        /*<replacement>*/
        var Buffer = require('safe-buffer').Buffer;
        var OurUint8Array = global.Uint8Array || function () {};
        function _uint8ArrayToBuffer(chunk) {
            return Buffer.from(chunk);
        }
        function _isUint8Array(obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*</replacement>*/

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        /*<replacement>*/
        var debugUtil = require('util');
        var debug = void 0;
        if (debugUtil && debugUtil.debuglog) {
            debug = debugUtil.debuglog('stream');
        } else {
            debug = function () {};
        }
        /*</replacement>*/

        var BufferList = require('./internal/streams/BufferList');
        var destroyImpl = require('./internal/streams/destroy');
        var StringDecoder;

        util.inherits(Readable, Stream);

        var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

        function prependListener(emitter, event, fn) {
            // Sadly this is not cacheable as some libraries bundle their own
            // event emitter implementation with them.
            if (typeof emitter.prependListener === 'function') {
                return emitter.prependListener(event, fn);
            } else {
                // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.
                if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
            }
        }

        function ReadableState(options, stream) {
            Duplex = Duplex || require('./_stream_duplex');

            options = options || {};

            // object stream flag. Used to make read(n) ignore n and to
            // make all the buffer merging and length checks go away
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

            // the point at which it stops calling _read() to fill the buffer
            // Note: 0 is a valid value, means "don't call _read preemptively ever"
            var hwm = options.highWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

            // cast to ints.
            this.highWaterMark = Math.floor(this.highWaterMark);

            // A linked list is used to store data chunks instead of an array because the
            // linked list can remove elements from the beginning faster than
            // array.shift()
            this.buffer = new BufferList();
            this.length = 0;
            this.pipes = null;
            this.pipesCount = 0;
            this.flowing = null;
            this.ended = false;
            this.endEmitted = false;
            this.reading = false;

            // a flag to be able to tell if the event 'readable'/'data' is emitted
            // immediately, or on a later tick.  We set this to true at first, because
            // any actions that shouldn't happen until "later" should generally also
            // not happen before the first read call.
            this.sync = true;

            // whenever we return null, then we set a flag to say
            // that we're awaiting a 'readable' event emission.
            this.needReadable = false;
            this.emittedReadable = false;
            this.readableListening = false;
            this.resumeScheduled = false;

            // has it been destroyed
            this.destroyed = false;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // the number of writers that are awaiting a drain event in .pipe()s
            this.awaitDrain = 0;

            // if true, a maybeReadMore has been scheduled
            this.readingMore = false;

            this.decoder = null;
            this.encoding = null;
            if (options.encoding) {
                if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
            }
        }

        function Readable(options) {
            Duplex = Duplex || require('./_stream_duplex');

            if (!(this instanceof Readable)) return new Readable(options);

            this._readableState = new ReadableState(options, this);

            // legacy
            this.readable = true;

            if (options) {
                if (typeof options.read === 'function') this._read = options.read;

                if (typeof options.destroy === 'function') this._destroy = options.destroy;
            }

            Stream.call(this);
        }

        Object.defineProperty(Readable.prototype, 'destroyed', {
            get: function () {
                if (this._readableState === undefined) {
                    return false;
                }
                return this._readableState.destroyed;
            },
            set: function (value) {
                // we ignore the value if the stream
                // has not been initialized yet
                if (!this._readableState) {
                    return;
                }

                // backward compatibility, the user is explicitly
                // managing destroyed
                this._readableState.destroyed = value;
            }
        });

        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;
        Readable.prototype._destroy = function (err, cb) {
            this.push(null);
            cb(err);
        };

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
        Readable.prototype.push = function (chunk, encoding) {
            var state = this._readableState;
            var skipChunkCheck;

            if (!state.objectMode) {
                if (typeof chunk === 'string') {
                    encoding = encoding || state.defaultEncoding;
                    if (encoding !== state.encoding) {
                        chunk = Buffer.from(chunk, encoding);
                        encoding = '';
                    }
                    skipChunkCheck = true;
                }
            } else {
                skipChunkCheck = true;
            }

            return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        };

// Unshift should *always* be something directly out of read()
        Readable.prototype.unshift = function (chunk) {
            return readableAddChunk(this, chunk, null, true, false);
        };

        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
            var state = stream._readableState;
            if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
            } else {
                var er;
                if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                if (er) {
                    stream.emit('error', er);
                } else if (state.objectMode || chunk && chunk.length > 0) {
                    if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                        chunk = _uint8ArrayToBuffer(chunk);
                    }

                    if (addToFront) {
                        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
                    } else if (state.ended) {
                        stream.emit('error', new Error('stream.push() after EOF'));
                    } else {
                        state.reading = false;
                        if (state.decoder && !encoding) {
                            chunk = state.decoder.write(chunk);
                            if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
                        } else {
                            addChunk(stream, state, chunk, false);
                        }
                    }
                } else if (!addToFront) {
                    state.reading = false;
                }
            }

            return needMoreData(state);
        }

        function addChunk(stream, state, chunk, addToFront) {
            if (state.flowing && state.length === 0 && !state.sync) {
                stream.emit('data', chunk);
                stream.read(0);
            } else {
                // update the buffer info.
                state.length += state.objectMode ? 1 : chunk.length;
                if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

                if (state.needReadable) emitReadable(stream);
            }
            maybeReadMore(stream, state);
        }

        function chunkInvalid(state, chunk) {
            var er;
            if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
            }
            return er;
        }

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
        function needMoreData(state) {
            return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
        }

        Readable.prototype.isPaused = function () {
            return this._readableState.flowing === false;
        };

// backwards compatibility.
        Readable.prototype.setEncoding = function (enc) {
            if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
            this._readableState.decoder = new StringDecoder(enc);
            this._readableState.encoding = enc;
            return this;
        };

// Don't raise the hwm > 8MB
        var MAX_HWM = 0x800000;
        function computeNewHighWaterMark(n) {
            if (n >= MAX_HWM) {
                n = MAX_HWM;
            } else {
                // Get the next highest power of 2 to prevent increasing hwm excessively in
                // tiny amounts
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
            }
            return n;
        }

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
        function howMuchToRead(n, state) {
            if (n <= 0 || state.length === 0 && state.ended) return 0;
            if (state.objectMode) return 1;
            if (n !== n) {
                // Only flow one buffer at a time
                if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
            }
            // If we're asking for more than the current hwm, then raise the hwm.
            if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
            if (n <= state.length) return n;
            // Don't have enough
            if (!state.ended) {
                state.needReadable = true;
                return 0;
            }
            return state.length;
        }

// you can override either this method, or the async _read(n) below.
        Readable.prototype.read = function (n) {
            debug('read', n);
            n = parseInt(n, 10);
            var state = this._readableState;
            var nOrig = n;

            if (n !== 0) state.emittedReadable = false;

            // if we're doing read(0) to trigger a readable event, but we
            // already have a bunch of data in the buffer, then just trigger
            // the 'readable' event and move on.
            if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                debug('read: emitReadable', state.length, state.ended);
                if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                return null;
            }

            n = howMuchToRead(n, state);

            // if we've ended, and we're now clear, then finish it up.
            if (n === 0 && state.ended) {
                if (state.length === 0) endReadable(this);
                return null;
            }

            // All the actual chunk generation logic needs to be
            // *below* the call to _read.  The reason is that in certain
            // synthetic stream cases, such as passthrough streams, _read
            // may be a completely synchronous operation which may change
            // the state of the read buffer, providing enough data when
            // before there was *not* enough.
            //
            // So, the steps are:
            // 1. Figure out what the state of things will be after we do
            // a read from the buffer.
            //
            // 2. If that resulting state will trigger a _read, then call _read.
            // Note that this may be asynchronous, or synchronous.  Yes, it is
            // deeply ugly to write APIs this way, but that still doesn't mean
            // that the Readable class should behave improperly, as streams are
            // designed to be sync/async agnostic.
            // Take note if the _read call is sync or async (ie, if the read call
            // has returned yet), so that we know whether or not it's safe to emit
            // 'readable' etc.
            //
            // 3. Actually pull the requested chunks out of the buffer and return.

            // if we need a readable event, then we need to do some reading.
            var doRead = state.needReadable;
            debug('need readable', doRead);

            // if we currently have less than the highWaterMark, then also read some
            if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug('length less than watermark', doRead);
            }

            // however, if we've ended, then there's no point, and if we're already
            // reading, then it's unnecessary.
            if (state.ended || state.reading) {
                doRead = false;
                debug('reading or ended', doRead);
            } else if (doRead) {
                debug('do read');
                state.reading = true;
                state.sync = true;
                // if the length is currently zero, then we *need* a readable event.
                if (state.length === 0) state.needReadable = true;
                // call internal read method
                this._read(state.highWaterMark);
                state.sync = false;
                // If _read pushed data synchronously, then `reading` will be false,
                // and we need to re-evaluate how much data we can return to the user.
                if (!state.reading) n = howMuchToRead(nOrig, state);
            }

            var ret;
            if (n > 0) ret = fromList(n, state);else ret = null;

            if (ret === null) {
                state.needReadable = true;
                n = 0;
            } else {
                state.length -= n;
            }

            if (state.length === 0) {
                // If we have nothing in the buffer, then we want to know
                // as soon as we *do* get something into the buffer.
                if (!state.ended) state.needReadable = true;

                // If we tried to read() past the EOF, then emit end on the next tick.
                if (nOrig !== n && state.ended) endReadable(this);
            }

            if (ret !== null) this.emit('data', ret);

            return ret;
        };

        function onEofChunk(stream, state) {
            if (state.ended) return;
            if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                    state.buffer.push(chunk);
                    state.length += state.objectMode ? 1 : chunk.length;
                }
            }
            state.ended = true;

            // emit 'readable' now to make sure it gets picked up.
            emitReadable(stream);
        }

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
        function emitReadable(stream) {
            var state = stream._readableState;
            state.needReadable = false;
            if (!state.emittedReadable) {
                debug('emitReadable', state.flowing);
                state.emittedReadable = true;
                if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
            }
        }

        function emitReadable_(stream) {
            debug('emit readable');
            stream.emit('readable');
            flow(stream);
        }

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
        function maybeReadMore(stream, state) {
            if (!state.readingMore) {
                state.readingMore = true;
                processNextTick(maybeReadMore_, stream, state);
            }
        }

        function maybeReadMore_(stream, state) {
            var len = state.length;
            while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                debug('maybeReadMore read 0');
                stream.read(0);
                if (len === state.length)
                // didn't get any data, stop spinning.
                    break;else len = state.length;
            }
            state.readingMore = false;
        }

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
        Readable.prototype._read = function (n) {
            this.emit('error', new Error('_read() is not implemented'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
            var src = this;
            var state = this._readableState;

            switch (state.pipesCount) {
                case 0:
                    state.pipes = dest;
                    break;
                case 1:
                    state.pipes = [state.pipes, dest];
                    break;
                default:
                    state.pipes.push(dest);
                    break;
            }
            state.pipesCount += 1;
            debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

            var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

            var endFn = doEnd ? onend : unpipe;
            if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

            dest.on('unpipe', onunpipe);
            function onunpipe(readable, unpipeInfo) {
                debug('onunpipe');
                if (readable === src) {
                    if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                        unpipeInfo.hasUnpiped = true;
                        cleanup();
                    }
                }
            }

            function onend() {
                debug('onend');
                dest.end();
            }

            // when the dest drains, it reduces the awaitDrain counter
            // on the source.  This would be more elegant with a .once()
            // handler in flow(), but adding and removing repeatedly is
            // too slow.
            var ondrain = pipeOnDrain(src);
            dest.on('drain', ondrain);

            var cleanedUp = false;
            function cleanup() {
                debug('cleanup');
                // cleanup event handlers once the pipe is broken
                dest.removeListener('close', onclose);
                dest.removeListener('finish', onfinish);
                dest.removeListener('drain', ondrain);
                dest.removeListener('error', onerror);
                dest.removeListener('unpipe', onunpipe);
                src.removeListener('end', onend);
                src.removeListener('end', unpipe);
                src.removeListener('data', ondata);

                cleanedUp = true;

                // if the reader is waiting for a drain event from this
                // specific writer, then it would cause it to never start
                // flowing again.
                // So, if this is awaiting a drain, then we just call it now.
                // If we don't know, then assume that we are waiting for one.
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
            }

            // If the user pushes more data while we're writing to dest then we'll end up
            // in ondata again. However, we only want to increase awaitDrain once because
            // dest will only emit one 'drain' event for the multiple writes.
            // => Introduce a guard on increasing awaitDrain.
            var increasedAwaitDrain = false;
            src.on('data', ondata);
            function ondata(chunk) {
                debug('ondata');
                increasedAwaitDrain = false;
                var ret = dest.write(chunk);
                if (false === ret && !increasedAwaitDrain) {
                    // If the user unpiped during `dest.write()`, it is possible
                    // to get stuck in a permanently paused state if that write
                    // also returned false.
                    // => Check whether `dest` is still a piping destination.
                    if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                        debug('false write response, pause', src._readableState.awaitDrain);
                        src._readableState.awaitDrain++;
                        increasedAwaitDrain = true;
                    }
                    src.pause();
                }
            }

            // if the dest has an error, then stop piping into it.
            // however, don't suppress the throwing behavior for this.
            function onerror(er) {
                debug('onerror', er);
                unpipe();
                dest.removeListener('error', onerror);
                if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
            }

            // Make sure our error handler is attached before userland ones.
            prependListener(dest, 'error', onerror);

            // Both close and finish should trigger unpipe, but only once.
            function onclose() {
                dest.removeListener('finish', onfinish);
                unpipe();
            }
            dest.once('close', onclose);
            function onfinish() {
                debug('onfinish');
                dest.removeListener('close', onclose);
                unpipe();
            }
            dest.once('finish', onfinish);

            function unpipe() {
                debug('unpipe');
                src.unpipe(dest);
            }

            // tell the dest that it's being piped to
            dest.emit('pipe', src);

            // start the flow if it hasn't been started already.
            if (!state.flowing) {
                debug('pipe resume');
                src.resume();
            }

            return dest;
        };

        function pipeOnDrain(src) {
            return function () {
                var state = src._readableState;
                debug('pipeOnDrain', state.awaitDrain);
                if (state.awaitDrain) state.awaitDrain--;
                if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                    state.flowing = true;
                    flow(src);
                }
            };
        }

        Readable.prototype.unpipe = function (dest) {
            var state = this._readableState;
            var unpipeInfo = { hasUnpiped: false };

            // if we're not piping anywhere, then do nothing.
            if (state.pipesCount === 0) return this;

            // just one destination.  most common case.
            if (state.pipesCount === 1) {
                // passed in one, but it's not the right one.
                if (dest && dest !== state.pipes) return this;

                if (!dest) dest = state.pipes;

                // got a match.
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest) dest.emit('unpipe', this, unpipeInfo);
                return this;
            }

            // slow case. multiple pipe destinations.

            if (!dest) {
                // remove all.
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;

                for (var i = 0; i < len; i++) {
                    dests[i].emit('unpipe', this, unpipeInfo);
                }return this;
            }

            // try to find the right one.
            var index = indexOf(state.pipes, dest);
            if (index === -1) return this;

            state.pipes.splice(index, 1);
            state.pipesCount -= 1;
            if (state.pipesCount === 1) state.pipes = state.pipes[0];

            dest.emit('unpipe', this, unpipeInfo);

            return this;
        };

// set up data events if they are asked for
// Ensure readable listeners eventually get something
        Readable.prototype.on = function (ev, fn) {
            var res = Stream.prototype.on.call(this, ev, fn);

            if (ev === 'data') {
                // Start flowing on next tick if stream isn't explicitly paused
                if (this._readableState.flowing !== false) this.resume();
            } else if (ev === 'readable') {
                var state = this._readableState;
                if (!state.endEmitted && !state.readableListening) {
                    state.readableListening = state.needReadable = true;
                    state.emittedReadable = false;
                    if (!state.reading) {
                        processNextTick(nReadingNextTick, this);
                    } else if (state.length) {
                        emitReadable(this);
                    }
                }
            }

            return res;
        };
        Readable.prototype.addListener = Readable.prototype.on;

        function nReadingNextTick(self) {
            debug('readable nexttick read 0');
            self.read(0);
        }

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
        Readable.prototype.resume = function () {
            var state = this._readableState;
            if (!state.flowing) {
                debug('resume');
                state.flowing = true;
                resume(this, state);
            }
            return this;
        };

        function resume(stream, state) {
            if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                processNextTick(resume_, stream, state);
            }
        }

        function resume_(stream, state) {
            if (!state.reading) {
                debug('resume read 0');
                stream.read(0);
            }

            state.resumeScheduled = false;
            state.awaitDrain = 0;
            stream.emit('resume');
            flow(stream);
            if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
            debug('call pause flowing=%j', this._readableState.flowing);
            if (false !== this._readableState.flowing) {
                debug('pause');
                this._readableState.flowing = false;
                this.emit('pause');
            }
            return this;
        };

        function flow(stream) {
            var state = stream._readableState;
            debug('flow', state.flowing);
            while (state.flowing && stream.read() !== null) {}
        }

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
        Readable.prototype.wrap = function (stream) {
            var state = this._readableState;
            var paused = false;

            var self = this;
            stream.on('end', function () {
                debug('wrapped end');
                if (state.decoder && !state.ended) {
                    var chunk = state.decoder.end();
                    if (chunk && chunk.length) self.push(chunk);
                }

                self.push(null);
            });

            stream.on('data', function (chunk) {
                debug('wrapped data');
                if (state.decoder) chunk = state.decoder.write(chunk);

                // don't skip over falsy values in objectMode
                if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

                var ret = self.push(chunk);
                if (!ret) {
                    paused = true;
                    stream.pause();
                }
            });

            // proxy all the other methods.
            // important when wrapping filters and duplexes.
            for (var i in stream) {
                if (this[i] === undefined && typeof stream[i] === 'function') {
                    this[i] = function (method) {
                        return function () {
                            return stream[method].apply(stream, arguments);
                        };
                    }(i);
                }
            }

            // proxy certain important events.
            for (var n = 0; n < kProxyEvents.length; n++) {
                stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
            }

            // when we try to consume some more bytes, simply unpause the
            // underlying stream.
            self._read = function (n) {
                debug('wrapped _read', n);
                if (paused) {
                    paused = false;
                    stream.resume();
                }
            };

            return self;
        };

// exposed for testing purposes only.
        Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
        function fromList(n, state) {
            // nothing buffered
            if (state.length === 0) return null;

            var ret;
            if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                // read it all, truncate the list
                if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
                state.buffer.clear();
            } else {
                // read part of list
                ret = fromListPartial(n, state.buffer, state.decoder);
            }

            return ret;
        }

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
        function fromListPartial(n, list, hasStrings) {
            var ret;
            if (n < list.head.data.length) {
                // slice is the same for buffers and strings
                ret = list.head.data.slice(0, n);
                list.head.data = list.head.data.slice(n);
            } else if (n === list.head.data.length) {
                // first chunk is a perfect match
                ret = list.shift();
            } else {
                // result spans more than one buffer
                ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
            }
            return ret;
        }

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
        function copyFromBufferString(n, list) {
            var p = list.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length) ret += str;else ret += str.slice(0, n);
                n -= nb;
                if (n === 0) {
                    if (nb === str.length) {
                        ++c;
                        if (p.next) list.head = p.next;else list.head = list.tail = null;
                    } else {
                        list.head = p;
                        p.data = str.slice(nb);
                    }
                    break;
                }
                ++c;
            }
            list.length -= c;
            return ret;
        }

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
        function copyFromBuffer(n, list) {
            var ret = Buffer.allocUnsafe(n);
            var p = list.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                    if (nb === buf.length) {
                        ++c;
                        if (p.next) list.head = p.next;else list.head = list.tail = null;
                    } else {
                        list.head = p;
                        p.data = buf.slice(nb);
                    }
                    break;
                }
                ++c;
            }
            list.length -= c;
            return ret;
        }

        function endReadable(stream) {
            var state = stream._readableState;

            // If we get here before consuming all the bytes, then that is a
            // bug in node.  Should never happen.
            if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

            if (!state.endEmitted) {
                state.ended = true;
                processNextTick(endReadableNT, state, stream);
            }
        }

        function endReadableNT(state, stream) {
            // Check that we didn't get one last unshift.
            if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit('end');
            }
        }

        function forEach(xs, f) {
            for (var i = 0, l = xs.length; i < l; i++) {
                f(xs[i], i);
            }
        }

        function indexOf(xs, x) {
            for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x) return i;
            }
            return -1;
        }
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":136,"./internal/streams/BufferList":141,"./internal/streams/destroy":142,"./internal/streams/stream":143,"_process":125,"core-util-is":38,"events":33,"inherits":121,"isarray":135,"process-nextick-args":124,"safe-buffer":130,"string_decoder/":145,"util":29}],139:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

    'use strict';

    module.exports = Transform;

    var Duplex = require('./_stream_duplex');

    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(Transform, Duplex);

    function TransformState(stream) {
        this.afterTransform = function (er, data) {
            return afterTransform(stream, er, data);
        };

        this.needTransform = false;
        this.transforming = false;
        this.writecb = null;
        this.writechunk = null;
        this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
        var ts = stream._transformState;
        ts.transforming = false;

        var cb = ts.writecb;

        if (!cb) {
            return stream.emit('error', new Error('write callback called multiple times'));
        }

        ts.writechunk = null;
        ts.writecb = null;

        if (data !== null && data !== undefined) stream.push(data);

        cb(er);

        var rs = stream._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
            stream._read(rs.highWaterMark);
        }
    }

    function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);

        Duplex.call(this, options);

        this._transformState = new TransformState(this);

        var stream = this;

        // start out asking for a readable event once data is transformed.
        this._readableState.needReadable = true;

        // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.
        this._readableState.sync = false;

        if (options) {
            if (typeof options.transform === 'function') this._transform = options.transform;

            if (typeof options.flush === 'function') this._flush = options.flush;
        }

        // When the writable side finishes, then flush out anything remaining.
        this.once('prefinish', function () {
            if (typeof this._flush === 'function') this._flush(function (er, data) {
                done(stream, er, data);
            });else done(stream);
        });
    }

    Transform.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
    };

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
        throw new Error('_transform() is not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
    };

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
        var ts = this._transformState;

        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
            // mark that we need a transform, so that any data that comes in
            // will get processed, now that we've asked for it.
            ts.needTransform = true;
        }
    };

    Transform.prototype._destroy = function (err, cb) {
        var _this = this;

        Duplex.prototype._destroy.call(this, err, function (err2) {
            cb(err2);
            _this.emit('close');
        });
    };

    function done(stream, er, data) {
        if (er) return stream.emit('error', er);

        if (data !== null && data !== undefined) stream.push(data);

        // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided
        var ws = stream._writableState;
        var ts = stream._transformState;

        if (ws.length) throw new Error('Calling transform done when ws.length != 0');

        if (ts.transforming) throw new Error('Calling transform done when still transforming');

        return stream.push(null);
    }
},{"./_stream_duplex":136,"core-util-is":38,"inherits":121}],140:[function(require,module,exports){
    (function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

        'use strict';

        /*<replacement>*/

        var processNextTick = require('process-nextick-args');
        /*</replacement>*/

        module.exports = Writable;

        /* <replacement> */
        function WriteReq(chunk, encoding, cb) {
            this.chunk = chunk;
            this.encoding = encoding;
            this.callback = cb;
            this.next = null;
        }

// It seems a linked list but it is not
// there will be only 2 of these for each stream
        function CorkedRequest(state) {
            var _this = this;

            this.next = null;
            this.entry = null;
            this.finish = function () {
                onCorkedFinish(_this, state);
            };
        }
        /* </replacement> */

        /*<replacement>*/
        var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
        /*</replacement>*/

        /*<replacement>*/
        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        /*<replacement>*/
        var internalUtil = {
            deprecate: require('util-deprecate')
        };
        /*</replacement>*/

        /*<replacement>*/
        var Stream = require('./internal/streams/stream');
        /*</replacement>*/

        /*<replacement>*/
        var Buffer = require('safe-buffer').Buffer;
        var OurUint8Array = global.Uint8Array || function () {};
        function _uint8ArrayToBuffer(chunk) {
            return Buffer.from(chunk);
        }
        function _isUint8Array(obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*</replacement>*/

        var destroyImpl = require('./internal/streams/destroy');

        util.inherits(Writable, Stream);

        function nop() {}

        function WritableState(options, stream) {
            Duplex = Duplex || require('./_stream_duplex');

            options = options || {};

            // object stream flag to indicate whether or not this stream
            // contains buffers or objects.
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

            // the point at which write() starts returning false
            // Note: 0 is a valid value, means that we always return false if
            // the entire buffer is not flushed immediately on write()
            var hwm = options.highWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

            // cast to ints.
            this.highWaterMark = Math.floor(this.highWaterMark);

            // if _final has been called
            this.finalCalled = false;

            // drain event flag.
            this.needDrain = false;
            // at the start of calling end()
            this.ending = false;
            // when end() has been called, and returned
            this.ended = false;
            // when 'finish' is emitted
            this.finished = false;

            // has it been destroyed
            this.destroyed = false;

            // should we decode strings into buffers before passing to _write?
            // this is here so that some node-core streams can optimize string
            // handling at a lower level.
            var noDecode = options.decodeStrings === false;
            this.decodeStrings = !noDecode;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // not an actual buffer we keep track of, but a measurement
            // of how much we're waiting to get pushed to some underlying
            // socket or file.
            this.length = 0;

            // a flag to see when we're in the middle of a write.
            this.writing = false;

            // when true all writes will be buffered until .uncork() call
            this.corked = 0;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // a flag to know if we're processing previously buffered items, which
            // may call the _write() callback in the same tick, so that we don't
            // end up in an overlapped onwrite situation.
            this.bufferProcessing = false;

            // the callback that's passed to _write(chunk,cb)
            this.onwrite = function (er) {
                onwrite(stream, er);
            };

            // the callback that the user supplies to write(chunk,encoding,cb)
            this.writecb = null;

            // the amount that is being written when _write is called.
            this.writelen = 0;

            this.bufferedRequest = null;
            this.lastBufferedRequest = null;

            // number of pending user-supplied write callbacks
            // this must be 0 before 'finish' can be emitted
            this.pendingcb = 0;

            // emit prefinish if the only thing we're waiting for is _write cbs
            // This is relevant for synchronous Transform streams
            this.prefinished = false;

            // True if the error was already emitted and should not be thrown again
            this.errorEmitted = false;

            // count buffered requests
            this.bufferedRequestCount = 0;

            // allocate the first CorkedRequest, there is always
            // one allocated and free to use, and we maintain at most two
            this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
            var current = this.bufferedRequest;
            var out = [];
            while (current) {
                out.push(current);
                current = current.next;
            }
            return out;
        };

        (function () {
            try {
                Object.defineProperty(WritableState.prototype, 'buffer', {
                    get: internalUtil.deprecate(function () {
                        return this.getBuffer();
                    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                });
            } catch (_) {}
        })();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
        var realHasInstance;
        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
            realHasInstance = Function.prototype[Symbol.hasInstance];
            Object.defineProperty(Writable, Symbol.hasInstance, {
                value: function (object) {
                    if (realHasInstance.call(this, object)) return true;

                    return object && object._writableState instanceof WritableState;
                }
            });
        } else {
            realHasInstance = function (object) {
                return object instanceof this;
            };
        }

        function Writable(options) {
            Duplex = Duplex || require('./_stream_duplex');

            // Writable ctor is applied to Duplexes, too.
            // `realHasInstance` is necessary because using plain `instanceof`
            // would return false, as no `_writableState` property is attached.

            // Trying to use the custom `instanceof` for Writable here will also break the
            // Node.js LazyTransform implementation, which has a non-trivial getter for
            // `_writableState` that would lead to infinite recursion.
            if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                return new Writable(options);
            }

            this._writableState = new WritableState(options, this);

            // legacy.
            this.writable = true;

            if (options) {
                if (typeof options.write === 'function') this._write = options.write;

                if (typeof options.writev === 'function') this._writev = options.writev;

                if (typeof options.destroy === 'function') this._destroy = options.destroy;

                if (typeof options.final === 'function') this._final = options.final;
            }

            Stream.call(this);
        }

// Otherwise people can pipe Writable streams, which is just wrong.
        Writable.prototype.pipe = function () {
            this.emit('error', new Error('Cannot pipe, not readable'));
        };

        function writeAfterEnd(stream, cb) {
            var er = new Error('write after end');
            // TODO: defer error events consistently everywhere, not just the cb
            stream.emit('error', er);
            processNextTick(cb, er);
        }

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
        function validChunk(stream, state, chunk, cb) {
            var valid = true;
            var er = false;

            if (chunk === null) {
                er = new TypeError('May not write null values to stream');
            } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
            }
            if (er) {
                stream.emit('error', er);
                processNextTick(cb, er);
                valid = false;
            }
            return valid;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
            var state = this._writableState;
            var ret = false;
            var isBuf = _isUint8Array(chunk) && !state.objectMode;

            if (isBuf && !Buffer.isBuffer(chunk)) {
                chunk = _uint8ArrayToBuffer(chunk);
            }

            if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
            }

            if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

            if (typeof cb !== 'function') cb = nop;

            if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
            }

            return ret;
        };

        Writable.prototype.cork = function () {
            var state = this._writableState;

            state.corked++;
        };

        Writable.prototype.uncork = function () {
            var state = this._writableState;

            if (state.corked) {
                state.corked--;

                if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
            }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
            // node::ParseEncoding() requires lower case.
            if (typeof encoding === 'string') encoding = encoding.toLowerCase();
            if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
            this._writableState.defaultEncoding = encoding;
            return this;
        };

        function decodeChunk(state, chunk, encoding) {
            if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                chunk = Buffer.from(chunk, encoding);
            }
            return chunk;
        }

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
            if (!isBuf) {
                var newChunk = decodeChunk(state, chunk, encoding);
                if (chunk !== newChunk) {
                    isBuf = true;
                    encoding = 'buffer';
                    chunk = newChunk;
                }
            }
            var len = state.objectMode ? 1 : chunk.length;

            state.length += len;

            var ret = state.length < state.highWaterMark;
            // we must ensure that previous needDrain will not be reset to false.
            if (!ret) state.needDrain = true;

            if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = {
                    chunk: chunk,
                    encoding: encoding,
                    isBuf: isBuf,
                    callback: cb,
                    next: null
                };
                if (last) {
                    last.next = state.lastBufferedRequest;
                } else {
                    state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
            } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
            }

            return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
            state.writelen = len;
            state.writecb = cb;
            state.writing = true;
            state.sync = true;
            if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
            state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
            --state.pendingcb;

            if (sync) {
                // defer the callback if we are being called synchronously
                // to avoid piling up things on the stack
                processNextTick(cb, er);
                // this can emit finish, and it will always happen
                // after error
                processNextTick(finishMaybe, stream, state);
                stream._writableState.errorEmitted = true;
                stream.emit('error', er);
            } else {
                // the caller expect this to happen before if
                // it is async
                cb(er);
                stream._writableState.errorEmitted = true;
                stream.emit('error', er);
                // this can emit finish, but finish must
                // always follow error
                finishMaybe(stream, state);
            }
        }

        function onwriteStateUpdate(state) {
            state.writing = false;
            state.writecb = null;
            state.length -= state.writelen;
            state.writelen = 0;
        }

        function onwrite(stream, er) {
            var state = stream._writableState;
            var sync = state.sync;
            var cb = state.writecb;

            onwriteStateUpdate(state);

            if (er) onwriteError(stream, state, sync, er, cb);else {
                // Check if we're actually ready to finish, but don't emit yet
                var finished = needFinish(state);

                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                    clearBuffer(stream, state);
                }

                if (sync) {
                    /*<replacement>*/
                    asyncWrite(afterWrite, stream, state, finished, cb);
                    /*</replacement>*/
                } else {
                    afterWrite(stream, state, finished, cb);
                }
            }
        }

        function afterWrite(stream, state, finished, cb) {
            if (!finished) onwriteDrain(stream, state);
            state.pendingcb--;
            cb();
            finishMaybe(stream, state);
        }

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
        function onwriteDrain(stream, state) {
            if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit('drain');
            }
        }

// if there's something in the buffer waiting, then process it
        function clearBuffer(stream, state) {
            state.bufferProcessing = true;
            var entry = state.bufferedRequest;

            if (stream._writev && entry && entry.next) {
                // Fast case, write everything using _writev()
                var l = state.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;

                var count = 0;
                var allBuffers = true;
                while (entry) {
                    buffer[count] = entry;
                    if (!entry.isBuf) allBuffers = false;
                    entry = entry.next;
                    count += 1;
                }
                buffer.allBuffers = allBuffers;

                doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                // doWrite is almost always async, defer these to save a bit of time
                // as the hot path ends with doWrite
                state.pendingcb++;
                state.lastBufferedRequest = null;
                if (holder.next) {
                    state.corkedRequestsFree = holder.next;
                    holder.next = null;
                } else {
                    state.corkedRequestsFree = new CorkedRequest(state);
                }
            } else {
                // Slow case, write chunks one-by-one
                while (entry) {
                    var chunk = entry.chunk;
                    var encoding = entry.encoding;
                    var cb = entry.callback;
                    var len = state.objectMode ? 1 : chunk.length;

                    doWrite(stream, state, false, len, chunk, encoding, cb);
                    entry = entry.next;
                    // if we didn't call the onwrite immediately, then
                    // it means that we need to wait until it does.
                    // also, that means that the chunk and cb are currently
                    // being processed, so move the buffer counter past them.
                    if (state.writing) {
                        break;
                    }
                }

                if (entry === null) state.lastBufferedRequest = null;
            }

            state.bufferedRequestCount = 0;
            state.bufferedRequest = entry;
            state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
            cb(new Error('_write() is not implemented'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
            var state = this._writableState;

            if (typeof chunk === 'function') {
                cb = chunk;
                chunk = null;
                encoding = null;
            } else if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
            }

            if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

            // .end() fully uncorks
            if (state.corked) {
                state.corked = 1;
                this.uncork();
            }

            // ignore unnecessary end() calls.
            if (!state.ending && !state.finished) endWritable(this, state, cb);
        };

        function needFinish(state) {
            return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }
        function callFinal(stream, state) {
            stream._final(function (err) {
                state.pendingcb--;
                if (err) {
                    stream.emit('error', err);
                }
                state.prefinished = true;
                stream.emit('prefinish');
                finishMaybe(stream, state);
            });
        }
        function prefinish(stream, state) {
            if (!state.prefinished && !state.finalCalled) {
                if (typeof stream._final === 'function') {
                    state.pendingcb++;
                    state.finalCalled = true;
                    processNextTick(callFinal, stream, state);
                } else {
                    state.prefinished = true;
                    stream.emit('prefinish');
                }
            }
        }

        function finishMaybe(stream, state) {
            var need = needFinish(state);
            if (need) {
                prefinish(stream, state);
                if (state.pendingcb === 0) {
                    state.finished = true;
                    stream.emit('finish');
                }
            }
            return need;
        }

        function endWritable(stream, state, cb) {
            state.ending = true;
            finishMaybe(stream, state);
            if (cb) {
                if (state.finished) processNextTick(cb);else stream.once('finish', cb);
            }
            state.ended = true;
            stream.writable = false;
        }

        function onCorkedFinish(corkReq, state, err) {
            var entry = corkReq.entry;
            corkReq.entry = null;
            while (entry) {
                var cb = entry.callback;
                state.pendingcb--;
                cb(err);
                entry = entry.next;
            }
            if (state.corkedRequestsFree) {
                state.corkedRequestsFree.next = corkReq;
            } else {
                state.corkedRequestsFree = corkReq;
            }
        }

        Object.defineProperty(Writable.prototype, 'destroyed', {
            get: function () {
                if (this._writableState === undefined) {
                    return false;
                }
                return this._writableState.destroyed;
            },
            set: function (value) {
                // we ignore the value if the stream
                // has not been initialized yet
                if (!this._writableState) {
                    return;
                }

                // backward compatibility, the user is explicitly
                // managing destroyed
                this._writableState.destroyed = value;
            }
        });

        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;
        Writable.prototype._destroy = function (err, cb) {
            this.end();
            cb(err);
        };
    }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":136,"./internal/streams/destroy":142,"./internal/streams/stream":143,"_process":125,"core-util-is":38,"inherits":121,"process-nextick-args":124,"safe-buffer":130,"util-deprecate":147}],141:[function(require,module,exports){
    'use strict';

    /*<replacement>*/

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Buffer = require('safe-buffer').Buffer;
    /*</replacement>*/

    function copyBuffer(src, target, offset) {
        src.copy(target, offset);
    }

    module.exports = function () {
        function BufferList() {
            _classCallCheck(this, BufferList);

            this.head = null;
            this.tail = null;
            this.length = 0;
        }

        BufferList.prototype.push = function push(v) {
            var entry = { data: v, next: null };
            if (this.length > 0) this.tail.next = entry;else this.head = entry;
            this.tail = entry;
            ++this.length;
        };

        BufferList.prototype.unshift = function unshift(v) {
            var entry = { data: v, next: this.head };
            if (this.length === 0) this.tail = entry;
            this.head = entry;
            ++this.length;
        };

        BufferList.prototype.shift = function shift() {
            if (this.length === 0) return;
            var ret = this.head.data;
            if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
            --this.length;
            return ret;
        };

        BufferList.prototype.clear = function clear() {
            this.head = this.tail = null;
            this.length = 0;
        };

        BufferList.prototype.join = function join(s) {
            if (this.length === 0) return '';
            var p = this.head;
            var ret = '' + p.data;
            while (p = p.next) {
                ret += s + p.data;
            }return ret;
        };

        BufferList.prototype.concat = function concat(n) {
            if (this.length === 0) return Buffer.alloc(0);
            if (this.length === 1) return this.head.data;
            var ret = Buffer.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
                copyBuffer(p.data, ret, i);
                i += p.data.length;
                p = p.next;
            }
            return ret;
        };

        return BufferList;
    }();
},{"safe-buffer":130}],142:[function(require,module,exports){
    'use strict';

    /*<replacement>*/

    var processNextTick = require('process-nextick-args');
    /*</replacement>*/

// undocumented cb() API, needed for core, not for public API
    function destroy(err, cb) {
        var _this = this;

        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;

        if (readableDestroyed || writableDestroyed) {
            if (cb) {
                cb(err);
            } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                processNextTick(emitErrorNT, this, err);
            }
            return;
        }

        // we set destroyed to true before firing error callbacks in order
        // to make it re-entrance safe in case destroy() is called within callbacks

        if (this._readableState) {
            this._readableState.destroyed = true;
        }

        // if this is a duplex stream mark the writable part as destroyed as well
        if (this._writableState) {
            this._writableState.destroyed = true;
        }

        this._destroy(err || null, function (err) {
            if (!cb && err) {
                processNextTick(emitErrorNT, _this, err);
                if (_this._writableState) {
                    _this._writableState.errorEmitted = true;
                }
            } else if (cb) {
                cb(err);
            }
        });
    }

    function undestroy() {
        if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
        }

        if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
        }
    }

    function emitErrorNT(self, err) {
        self.emit('error', err);
    }

    module.exports = {
        destroy: destroy,
        undestroy: undestroy
    };
},{"process-nextick-args":124}],143:[function(require,module,exports){
    module.exports = require('events').EventEmitter;

},{"events":33}],144:[function(require,module,exports){
    exports = module.exports = require('./lib/_stream_readable.js');
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require('./lib/_stream_writable.js');
    exports.Duplex = require('./lib/_stream_duplex.js');
    exports.Transform = require('./lib/_stream_transform.js');
    exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":136,"./lib/_stream_passthrough.js":137,"./lib/_stream_readable.js":138,"./lib/_stream_transform.js":139,"./lib/_stream_writable.js":140}],145:[function(require,module,exports){
    'use strict';

    var Buffer = require('safe-buffer').Buffer;

    var isEncoding = Buffer.isEncoding || function (encoding) {
            encoding = '' + encoding;
            switch (encoding && encoding.toLowerCase()) {
                case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
                return true;
                default:
                    return false;
            }
        };

    function _normalizeEncoding(enc) {
        if (!enc) return 'utf8';
        var retried;
        while (true) {
            switch (enc) {
                case 'utf8':
                case 'utf-8':
                    return 'utf8';
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                    return 'utf16le';
                case 'latin1':
                case 'binary':
                    return 'latin1';
                case 'base64':
                case 'ascii':
                case 'hex':
                    return enc;
                default:
                    if (retried) return; // undefined
                    enc = ('' + enc).toLowerCase();
                    retried = true;
            }
        }
    };

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
    function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
        return nenc || enc;
    }

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
            case 'utf16le':
                this.text = utf16Text;
                this.end = utf16End;
                nb = 4;
                break;
            case 'utf8':
                this.fillLast = utf8FillLast;
                nb = 4;
                break;
            case 'base64':
                this.text = base64Text;
                this.end = base64End;
                nb = 3;
                break;
            default:
                this.write = simpleWrite;
                this.end = simpleEnd;
                return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer.allocUnsafe(nb);
    }

    StringDecoder.prototype.write = function (buf) {
        if (buf.length === 0) return '';
        var r;
        var i;
        if (this.lastNeed) {
            r = this.fillLast(buf);
            if (r === undefined) return '';
            i = this.lastNeed;
            this.lastNeed = 0;
        } else {
            i = 0;
        }
        if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || '';
    };

    StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
    StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
    };

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
    function utf8CheckByte(byte) {
        if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
        return -1;
    }

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete(self, buf, i) {
        var j = buf.length - 1;
        if (j < i) return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
            if (nb > 0) self.lastNeed = nb - 1;
            return nb;
        }
        if (--j < i) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
            if (nb > 0) self.lastNeed = nb - 2;
            return nb;
        }
        if (--j < i) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
            if (nb > 0) {
                if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
            }
            return nb;
        }
        return 0;
    }

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
    function utf8CheckExtraBytes(self, buf, p) {
        if ((buf[0] & 0xC0) !== 0x80) {
            self.lastNeed = 0;
            return '\ufffd'.repeat(p);
        }
        if (self.lastNeed > 1 && buf.length > 1) {
            if ((buf[1] & 0xC0) !== 0x80) {
                self.lastNeed = 1;
                return '\ufffd'.repeat(p + 1);
            }
            if (self.lastNeed > 2 && buf.length > 2) {
                if ((buf[2] & 0xC0) !== 0x80) {
                    self.lastNeed = 2;
                    return '\ufffd'.repeat(p + 2);
                }
            }
        }
    }

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== undefined) return r;
        if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, p, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
    }

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
    function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed) return buf.toString('utf8', i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString('utf8', i, end);
    }

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
    function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
        return r;
    }

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
    function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
            var r = buf.toString('utf16le', i);
            if (r) {
                var c = r.charCodeAt(r.length - 1);
                if (c >= 0xD800 && c <= 0xDBFF) {
                    this.lastNeed = 2;
                    this.lastTotal = 4;
                    this.lastChar[0] = buf[buf.length - 2];
                    this.lastChar[1] = buf[buf.length - 1];
                    return r.slice(0, -1);
                }
            }
            return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString('utf16le', i, buf.length - 1);
    }

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
    function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) {
            var end = this.lastTotal - this.lastNeed;
            return r + this.lastChar.toString('utf16le', 0, end);
        }
        return r;
    }

    function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0) return buf.toString('base64', i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
            this.lastChar[0] = buf[buf.length - 1];
        } else {
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString('base64', i, buf.length - n);
    }

    function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
        return r;
    }

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite(buf) {
        return buf.toString(this.encoding);
    }

    function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : '';
    }
},{"safe-buffer":130}],146:[function(require,module,exports){
    var Buffer = require('buffer').Buffer

    module.exports = function (buf) {
        // If the buffer is backed by a Uint8Array, a faster version will work
        if (buf instanceof Uint8Array) {
            // If the buffer isn't a subarray, return the underlying ArrayBuffer
            if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
                return buf.buffer
            } else if (typeof buf.buffer.slice === 'function') {
                // Otherwise we need to get a proper copy
                return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
            }
        }

        if (Buffer.isBuffer(buf)) {
            // This is the slow version that will work with any Buffer
            // implementation (even in old browsers)
            var arrayCopy = new Uint8Array(buf.length)
            var len = buf.length
            for (var i = 0; i < len; i++) {
                arrayCopy[i] = buf[i]
            }
            return arrayCopy.buffer
        } else {
            throw new Error('Argument must be a Buffer')
        }
    }

},{"buffer":32}],147:[function(require,module,exports){
    (function (global){

        /**
         * Module exports.
         */

        module.exports = deprecate;

        /**
         * Mark that a method should not be used.
         * Returns a modified function which warns once by default.
         *
         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
         *
         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
         * will throw an Error when invoked.
         *
         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
         * will invoke `console.trace()` instead of `console.error()`.
         *
         * @param {Function} fn - the function to deprecate
         * @param {String} msg - the string to print to the console when `fn` is invoked
         * @returns {Function} a new "deprecated" version of `fn`
         * @api public
         */

        function deprecate (fn, msg) {
            if (config('noDeprecation')) {
                return fn;
            }

            var warned = false;
            function deprecated() {
                if (!warned) {
                    if (config('throwDeprecation')) {
                        throw new Error(msg);
                    } else if (config('traceDeprecation')) {
                        console.trace(msg);
                    } else {
                        console.warn(msg);
                    }
                    warned = true;
                }
                return fn.apply(this, arguments);
            }

            return deprecated;
        }

        /**
         * Checks `localStorage` for boolean values for the given `name`.
         *
         * @param {String} name
         * @returns {Boolean}
         * @api private
         */

        function config (name) {
            // accessing global.localStorage can trigger a DOMException in sandboxed iframes
            try {
                if (!global.localStorage) return false;
            } catch (_) {
                return false;
            }
            var val = global.localStorage[name];
            if (null == val) return false;
            return String(val).toLowerCase() === 'true';
        }

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],148:[function(require,module,exports){
    (function (process,Buffer){
        /**
         * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
         *
         * This can be used with JS designed for browsers to improve reuse of code and
         * allow the use of existing libraries.
         *
         * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
         *
         * @author Dan DeFelippi <dan@driverdan.com>
         * @contributor David Ellis <d.f.ellis@ieee.org>
         * @license MIT
         */

        var Url = require("url");
        var spawn = require("child_process").spawn;
        var fs = require("fs");

        exports.XMLHttpRequest = function() {
            "use strict";

            /**
             * Private variables
             */
            var self = this;
            var http = require("http");
            var https = require("https");

            // Holds http.js objects
            var request;
            var response;

            // Request settings
            var settings = {};

            // Disable header blacklist.
            // Not part of XHR specs.
            var disableHeaderCheck = false;

            // Set some default headers
            var defaultHeaders = {
                "User-Agent": "node-XMLHttpRequest",
                "Accept": "*/*",
            };

            var headers = {};
            var headersCase = {};

            // These headers are not user setable.
            // The following are allowed but banned in the spec:
            // * user-agent
            var forbiddenRequestHeaders = [
                "accept-charset",
                "accept-encoding",
                "access-control-request-headers",
                "access-control-request-method",
                "connection",
                "content-length",
                "content-transfer-encoding",
                "cookie",
                "cookie2",
                "date",
                "expect",
                "host",
                "keep-alive",
                "origin",
                "referer",
                "te",
                "trailer",
                "transfer-encoding",
                "upgrade",
                "via"
            ];

            // These request methods are not allowed
            var forbiddenRequestMethods = [
                "TRACE",
                "TRACK",
                "CONNECT"
            ];

            // Send flag
            var sendFlag = false;
            // Error flag, used when errors occur or abort is called
            var errorFlag = false;

            // Event listeners
            var listeners = {};

            /**
             * Constants
             */

            this.UNSENT = 0;
            this.OPENED = 1;
            this.HEADERS_RECEIVED = 2;
            this.LOADING = 3;
            this.DONE = 4;

            /**
             * Public vars
             */

            // Current state
            this.readyState = this.UNSENT;

            // default ready state change handler in case one is not set or is set late
            this.onreadystatechange = null;

            // Result & response
            this.responseText = "";
            this.responseXML = "";
            this.status = null;
            this.statusText = null;

            // Whether cross-site Access-Control requests should be made using
            // credentials such as cookies or authorization headers
            this.withCredentials = false;

            /**
             * Private methods
             */

            /**
             * Check if the specified header is allowed.
             *
             * @param string header Header to validate
             * @return boolean False if not allowed, otherwise true
             */
            var isAllowedHttpHeader = function(header) {
                return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);
            };

            /**
             * Check if the specified method is allowed.
             *
             * @param string method Request method to validate
             * @return boolean False if not allowed, otherwise true
             */
            var isAllowedHttpMethod = function(method) {
                return (method && forbiddenRequestMethods.indexOf(method) === -1);
            };

            /**
             * Public methods
             */

            /**
             * Open the connection. Currently supports local server requests.
             *
             * @param string method Connection method (eg GET, POST)
             * @param string url URL for the connection.
             * @param boolean async Asynchronous connection. Default is true.
             * @param string user Username for basic authentication (optional)
             * @param string password Password for basic authentication (optional)
             */
            this.open = function(method, url, async, user, password) {
                this.abort();
                errorFlag = false;

                // Check for valid request method
                if (!isAllowedHttpMethod(method)) {
                    throw new Error("SecurityError: Request method not allowed");
                }

                settings = {
                    "method": method,
                    "url": url.toString(),
                    "async": (typeof async !== "boolean" ? true : async),
                    "user": user || null,
                    "password": password || null
                };

                setState(this.OPENED);
            };

            /**
             * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.
             * This does not conform to the W3C spec.
             *
             * @param boolean state Enable or disable header checking.
             */
            this.setDisableHeaderCheck = function(state) {
                disableHeaderCheck = state;
            };

            /**
             * Sets a header for the request or appends the value if one is already set.
             *
             * @param string header Header name
             * @param string value Header value
             */
            this.setRequestHeader = function(header, value) {
                if (this.readyState !== this.OPENED) {
                    throw new Error("INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN");
                }
                if (!isAllowedHttpHeader(header)) {
                    console.warn("Refused to set unsafe header \"" + header + "\"");
                    return;
                }
                if (sendFlag) {
                    throw new Error("INVALID_STATE_ERR: send flag is true");
                }
                header = headersCase[header.toLowerCase()] || header;
                headersCase[header.toLowerCase()] = header;
                headers[header] = headers[header] ? headers[header] + ', ' + value : value;
            };

            /**
             * Gets a header from the server response.
             *
             * @param string header Name of header to get.
             * @return string Text of the header or null if it doesn't exist.
             */
            this.getResponseHeader = function(header) {
                if (typeof header === "string"
                    && this.readyState > this.OPENED
                    && response
                    && response.headers
                    && response.headers[header.toLowerCase()]
                    && !errorFlag
                ) {
                    return response.headers[header.toLowerCase()];
                }

                return null;
            };

            /**
             * Gets all the response headers.
             *
             * @return string A string with all response headers separated by CR+LF
             */
            this.getAllResponseHeaders = function() {
                if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
                    return "";
                }
                var result = "";

                for (var i in response.headers) {
                    // Cookie headers are excluded
                    if (i !== "set-cookie" && i !== "set-cookie2") {
                        result += i + ": " + response.headers[i] + "\r\n";
                    }
                }
                return result.substr(0, result.length - 2);
            };

            /**
             * Gets a request header
             *
             * @param string name Name of header to get
             * @return string Returns the request header or empty string if not set
             */
            this.getRequestHeader = function(name) {
                if (typeof name === "string" && headersCase[name.toLowerCase()]) {
                    return headers[headersCase[name.toLowerCase()]];
                }

                return "";
            };

            /**
             * Sends the request to the server.
             *
             * @param string data Optional data to send as request body.
             */
            this.send = function(data) {
                if (this.readyState !== this.OPENED) {
                    throw new Error("INVALID_STATE_ERR: connection must be opened before send() is called");
                }

                if (sendFlag) {
                    throw new Error("INVALID_STATE_ERR: send has already been called");
                }

                var ssl = false, local = false;
                var url = Url.parse(settings.url);
                var host;
                // Determine the server
                switch (url.protocol) {
                    case "https:":
                        ssl = true;
                    // SSL & non-SSL both need host, no break here.
                    case "http:":
                        host = url.hostname;
                        break;

                    case "file:":
                        local = true;
                        break;

                    case undefined:
                    case null:
                    case "":
                        host = "localhost";
                        break;

                    default:
                        throw new Error("Protocol not supported.");
                }

                // Load files off the local filesystem (file://)
                if (local) {
                    if (settings.method !== "GET") {
                        throw new Error("XMLHttpRequest: Only GET method is supported");
                    }

                    if (settings.async) {
                        fs.readFile(url.pathname, "utf8", function(error, data) {
                            if (error) {
                                self.handleError(error);
                            } else {
                                self.status = 200;
                                self.responseText = data;
                                setState(self.DONE);
                            }
                        });
                    } else {
                        try {
                            this.responseText = fs.readFileSync(url.pathname, "utf8");
                            this.status = 200;
                            setState(self.DONE);
                        } catch(e) {
                            this.handleError(e);
                        }
                    }

                    return;
                }

                // Default to port 80. If accessing localhost on another port be sure
                // to use http://localhost:port/path
                var port = url.port || (ssl ? 443 : 80);
                // Add query string if one is used
                var uri = url.pathname + (url.search ? url.search : "");

                // Set the defaults if they haven't been set
                for (var name in defaultHeaders) {
                    if (!headersCase[name.toLowerCase()]) {
                        headers[name] = defaultHeaders[name];
                    }
                }

                // Set the Host header or the server may reject the request
                headers.Host = host;
                if (!((ssl && port === 443) || port === 80)) {
                    headers.Host += ":" + url.port;
                }

                // Set Basic Auth if necessary
                if (settings.user) {
                    if (typeof settings.password === "undefined") {
                        settings.password = "";
                    }
                    var authBuf = new Buffer(settings.user + ":" + settings.password);
                    headers.Authorization = "Basic " + authBuf.toString("base64");
                }

                // Set content length header
                if (settings.method === "GET" || settings.method === "HEAD") {
                    data = null;
                } else if (data) {
                    headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);

                    if (!headers["Content-Type"]) {
                        headers["Content-Type"] = "text/plain;charset=UTF-8";
                    }
                } else if (settings.method === "POST") {
                    // For a post with no data set Content-Length: 0.
                    // This is required by buggy servers that don't meet the specs.
                    headers["Content-Length"] = 0;
                }

                var options = {
                    host: host,
                    port: port,
                    path: uri,
                    method: settings.method,
                    headers: headers,
                    agent: false,
                    withCredentials: self.withCredentials
                };

                // Reset error flag
                errorFlag = false;

                // Handle async requests
                if (settings.async) {
                    // Use the proper protocol
                    var doRequest = ssl ? https.request : http.request;

                    // Request is being sent, set send flag
                    sendFlag = true;

                    // As per spec, this is called here for historical reasons.
                    self.dispatchEvent("readystatechange");

                    // Handler for the response
                    var responseHandler = function responseHandler(resp) {
                        // Set response var to the response we got back
                        // This is so it remains accessable outside this scope
                        response = resp;
                        // Check for redirect
                        // @TODO Prevent looped redirects
                        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
                            // Change URL to the redirect location
                            settings.url = response.headers.location;
                            var url = Url.parse(settings.url);
                            // Set host var in case it's used later
                            host = url.hostname;
                            // Options for the new request
                            var newOptions = {
                                hostname: url.hostname,
                                port: url.port,
                                path: url.path,
                                method: response.statusCode === 303 ? "GET" : settings.method,
                                headers: headers,
                                withCredentials: self.withCredentials
                            };

                            // Issue the new request
                            request = doRequest(newOptions, responseHandler).on("error", errorHandler);
                            request.end();
                            // @TODO Check if an XHR event needs to be fired here
                            return;
                        }

                        response.setEncoding("utf8");

                        setState(self.HEADERS_RECEIVED);
                        self.status = response.statusCode;

                        response.on("data", function(chunk) {
                            // Make sure there's some data
                            if (chunk) {
                                self.responseText += chunk;
                            }
                            // Don't emit state changes if the connection has been aborted.
                            if (sendFlag) {
                                setState(self.LOADING);
                            }
                        });

                        response.on("end", function() {
                            if (sendFlag) {
                                // Discard the end event if the connection has been aborted
                                setState(self.DONE);
                                sendFlag = false;
                            }
                        });

                        response.on("error", function(error) {
                            self.handleError(error);
                        });
                    };

                    // Error handler for the request
                    var errorHandler = function errorHandler(error) {
                        self.handleError(error);
                    };

                    // Create the request
                    request = doRequest(options, responseHandler).on("error", errorHandler);

                    // Node 0.4 and later won't accept empty data. Make sure it's needed.
                    if (data) {
                        request.write(data);
                    }

                    request.end();

                    self.dispatchEvent("loadstart");
                } else { // Synchronous
                    // Create a temporary file for communication with the other Node process
                    var contentFile = ".node-xmlhttprequest-content-" + process.pid;
                    var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
                    fs.writeFileSync(syncFile, "", "utf8");
                    // The async request the other Node process executes
                    var execString = "var http = require('http'), https = require('https'), fs = require('fs');"
                        + "var doRequest = http" + (ssl ? "s" : "") + ".request;"
                        + "var options = " + JSON.stringify(options) + ";"
                        + "var responseText = '';"
                        + "var req = doRequest(options, function(response) {"
                        + "response.setEncoding('utf8');"
                        + "response.on('data', function(chunk) {"
                        + "  responseText += chunk;"
                        + "});"
                        + "response.on('end', function() {"
                        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');"
                        + "fs.unlinkSync('" + syncFile + "');"
                        + "});"
                        + "response.on('error', function(error) {"
                        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
                        + "fs.unlinkSync('" + syncFile + "');"
                        + "});"
                        + "}).on('error', function(error) {"
                        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
                        + "fs.unlinkSync('" + syncFile + "');"
                        + "});"
                        + (data ? "req.write('" + JSON.stringify(data).slice(1,-1).replace(/'/g, "\\'") + "');":"")
                        + "req.end();";
                    // Start the other Node Process, executing this string
                    var syncProc = spawn(process.argv[0], ["-e", execString]);
                    while(fs.existsSync(syncFile)) {
                        // Wait while the sync file is empty
                    }
                    var resp = JSON.parse(fs.readFileSync(contentFile, 'utf8'));
                    // Kill the child process once the file has data
                    syncProc.stdin.end();
                    // Remove the temporary file
                    fs.unlinkSync(contentFile);

                    if (resp.err) {
                        self.handleError(resp.err);
                    } else {
                        response = resp.data;
                        self.status = resp.data.statusCode;
                        self.responseText = resp.data.text;
                        setState(self.DONE);
                    }
                }
            };

            /**
             * Called when an error is encountered to deal with it.
             */
            this.handleError = function(error) {
                this.status = 0;
                this.statusText = error;
                this.responseText = error.stack;
                errorFlag = true;
                setState(this.DONE);
                this.dispatchEvent('error');
            };

            /**
             * Aborts a request.
             */
            this.abort = function() {
                if (request) {
                    request.abort();
                    request = null;
                }

                headers = defaultHeaders;
                this.status = 0;
                this.responseText = "";
                this.responseXML = "";

                errorFlag = true;

                if (this.readyState !== this.UNSENT
                    && (this.readyState !== this.OPENED || sendFlag)
                    && this.readyState !== this.DONE) {
                    sendFlag = false;
                    setState(this.DONE);
                }
                this.readyState = this.UNSENT;
                this.dispatchEvent('abort');
            };

            /**
             * Adds an event listener. Preferred method of binding to events.
             */
            this.addEventListener = function(event, callback) {
                if (!(event in listeners)) {
                    listeners[event] = [];
                }
                // Currently allows duplicate callbacks. Should it?
                listeners[event].push(callback);
            };

            /**
             * Remove an event callback that has already been bound.
             * Only works on the matching funciton, cannot be a copy.
             */
            this.removeEventListener = function(event, callback) {
                if (event in listeners) {
                    // Filter will return a new array with the callback removed
                    listeners[event] = listeners[event].filter(function(ev) {
                        return ev !== callback;
                    });
                }
            };

            /**
             * Dispatch any events, including both "on" methods and events attached using addEventListener.
             */
            this.dispatchEvent = function(event) {
                if (typeof self["on" + event] === "function") {
                    self["on" + event]();
                }
                if (event in listeners) {
                    for (var i = 0, len = listeners[event].length; i < len; i++) {
                        listeners[event][i].call(self);
                    }
                }
            };

            /**
             * Changes readyState and calls onreadystatechange.
             *
             * @param int state New state
             */
            var setState = function(state) {
                if (state == self.LOADING || self.readyState !== state) {
                    self.readyState = state;

                    if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
                        self.dispatchEvent("readystatechange");
                    }

                    if (self.readyState === self.DONE && !errorFlag) {
                        self.dispatchEvent("load");
                        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
                        self.dispatchEvent("loadend");
                    }
                }
            };
        };

    }).call(this,require('_process'),require("buffer").Buffer)
},{"_process":125,"buffer":32,"child_process":30,"fs":30,"http":131,"https":34,"url":35}],149:[function(require,module,exports){
    module.exports = extend

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function extend() {
        var target = {}

        for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i]

            for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                    target[key] = source[key]
                }
            }
        }

        return target
    }

},{}]},{},[1])(1)
});
