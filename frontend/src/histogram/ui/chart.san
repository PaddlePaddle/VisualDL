<template>
    <div class="visual-dl-histogram-charts">
        <div class="visual-dl-chart-box">
        </div>
        <div class="visual-dl-chart-actions">
            <san-button on-click="expandArea">
                <san-icon size="20">settings_overscan</san-icon>
            </san-button>
        </div>
    </div>
</template>
<script>

// components
import Button from 'san-mui/Button';
import Icon from 'san-mui/Icon';

// libs
import echarts from 'echarts';
import {maxBy} from 'lodash';
import {originDataToChartData} from '../histogramHelper';
import {format, precisionRound} from 'd3-format';

// service
import {getPluginHistogramsHistograms} from '../../service';

const highlightLineColor = '#2f4554';
const defaultLineColor = '#d14a61';
const lineWidth = 1;
// the time to refresh chart data
const intervalTime = 15;

const p = Math.max(0, precisionRound(0.01, 1.01) - 1);
const yValueFormat = format('.' + p + 'e');

export default {
    components: {
        'san-button': Button,
        'san-icon': Icon
    },
    initData() {
        return {
            data: [
                {
                    name: 'train',
                    value: []
                }
            ]
        };
    },

    inited() {
        this.watch('originData', data => {
            this.initChartOption();
        });

        this.watch('chartType', chartType => {
            this.initChartOption();
        });
    },

    attached() {
        let tagInfo = this.data.get('tagInfo');
        this.initChart(tagInfo);

        this.initChartEvent();
        if (this.data.get('running')) {
            this.startInterval();
        }
        this.watch('running', running => {
            running ? this.startInterval() : this.stopInterval();
        });
    },

    detached() {
        this.stopInterval();
    },

    initChart(tagInfo) {
        this.createChart();
        this.getOriginChartData(tagInfo);
    },

    createChart() {
        let el = this.el.getElementsByClassName('visual-dl-chart-box')[0];
        this.myChart = echarts.init(el);
    },

    initChartOption() {
        this.myChart.clear();

// var ob = this.myChart.getOption();

        let data = this.data.get('originData');
        let visData = originDataToChartData(data);
        let tagInfo = this.data.get('tagInfo');
        let title = tagInfo.tag.displayName + '(' + tagInfo.run + ')';
        let chartType = this.data.get('chartType');
        this.setChartOptions(visData, title, chartType);
    },

    setChartOptions(visData, tag, chartType) {
        let grid = {
            left: '15%',
            top: '15%',
            right: '10%',
            bottom: '8%'
        };

        let title = {
            text: tag,
            textStyle: {
                fontSize: '12'
            }
        };
        if (chartType === 'overlay') {
            this.setOverlayChartOption(visData, title, grid);
        }
        else if (chartType === 'offset') {
            this.setOffsetChartOption(visData, title, grid);
        }
    },

    setOverlayChartOption({chartData, min, max}, title, grid) {
        let seriesOption = chartData.map(({time, step, items}) => ({
                name: 'step' + step,
                type: 'line',
                showSymbol: false,
                hoverAnimation: false,
                z: 0,
                data: items,
                animationDuration: 100,
                lineStyle: {
                    normal: {
                        // opacity: originLinesOpacity,
                        width: lineWidth,
                        color: defaultLineColor
                    }
                },
                encode: {
                    x: [2],
                    y: [3]
                }
            })
        );
        let option = {
            title: title,
            axisPointer: {
                link: {xAxisIndex: 'all'},
                show: true,
                snap: true,
                triggerTooltip: true
            },
            grid: grid,
            xAxis: {
                type: 'value'
            },
            yAxis: {
                type: 'value',
                axisLabel: {
                    formatter(value, index) {
                        return yValueFormat(value);
                    }
                },
                axisPointer: {
                    label: {
                        formatter({value}) {
                            return yValueFormat(value);
                        }
                    }
                }
            },
            series: seriesOption
        };
        this.myChart.setOption(option);
    },

    setOffsetChartOption({chartData, min, max}, title, grid) {
        let rawData = [];
        let minX = min;
        let maxX = max;
        let minZ = Infinity;
        let maxZ = -Infinity;
        let ecChart = this.myChart;
        let maxStep = -Infinity;
        let minStep = Infinity;
        grid.top = '42%';
        grid.left = '4%';
        grid.right = '15%';
        chartData.forEach((dataItem) => {
            let lineData = [];
            maxStep = Math.max(dataItem.step, maxStep);
            minStep = Math.min(dataItem.step, minStep);
            dataItem.items.forEach(([time, step, x, y]) => {
                minZ = Math.min(minZ, y);
                maxZ = Math.max(maxZ, y);
                lineData.push(x, step, y);
            });
            rawData.push(lineData);
        });
       
        // Max point in every polygon.
        // let maxValuePoints = [];
        let option = {
            title,
            color: ['#006069'],
            visualMap: {
                type: 'continuous',
                show: false,
                min: minStep,
                max: maxStep,
                dimension: 1,
                inRange: {
                    colorLightness: [0.2, 0.4]
                }
            },
            xAxis: {
                min: minX,
                max: maxX,
                axisLine: {
                    onZero: false
                },
                splitLine: {
                    show: false
                }
            },
            yAxis: {
                position: 'right',
                axisLine: {
                    onZero: false
                },
                inverse: true,
                splitLine: {
                    show: false
                }
            },
            grid,
            series: [{
                type: 'custom',
                dimensions: ['x', 'y'],
                renderItem: function (params, api) {
                    let points = makePolyPoints(
                        params.dataIndex,
                        api.value,
                        api.coord,
                        params.coordSys.y - 5
                    );
                    return {
                        type: 'polygon',
                        silent: true,
                        shape: {
                            points
                        },
                        style: api.style({
                            stroke: '#bbb',
                            lineWidth: 1
                        })
                    };
                },
                data: rawData
            }
            // {
            //     type: 'custom',
            //     dimension: ['x', 'y'],
            //     renderItem: function (params, api) {


            //     },
            //     data: rawData
            // }
            ]
        };

        function makePolyPoints(dataIndex, getValue, getCoord, yValueMapHeight) {
            let points = [];
            for (let i = 0; i < rawData[dataIndex].length;) {
                let x = getValue(i++);
                let y = getValue(i++);
                let z = getValue(i++);
                points.push(getPoint(x, y, z, getCoord, yValueMapHeight));
            }
            return points;
        }

        function getPoint(x, y, z, getCoord, yValueMapHeight) {
            let pt = getCoord([x, y]);
            // linear map in z axis
            pt[1] -= (z - minZ) / (maxZ - minZ) * yValueMapHeight;
            return pt;
        }

        let hoverLine;
        let maxLine;
        let hoverDots = [];
        let tooltip;
        let tooltipX;
        let tooltipY;

        let zr = ecChart.getZr();

        function removeTooltip(){
            if (hoverLine) {
                zr.remove(hoverLine);
                zr.remove(tooltip);
                hoverDots.forEach(dot => zr.remove(dot));
                hoverDots.length = 0;
                zr.remove(tooltipX);
                zr.remove(tooltipY);
            }
        }

        zr.on('mouseout', e => {
            removeTooltip();
        }); 

        zr.on('mousemove', e => {
            removeTooltip();
            let nearestIndex = findNearestValue(e.offsetX, e.offsetY);
            if (nearestIndex) {
                let getCoord = function(pt) {
                    return ecChart.convertToPixel('grid', pt);
                };
                let linePoints = makePolyPoints(
                    nearestIndex.itemIndex,
                    function (i) {
                        return rawData[nearestIndex.itemIndex][i];
                    },
                    getCoord
                );

                zr.add(hoverLine = new echarts.graphic.Polyline({
                    silent: true,
                    shape: {
                        points: linePoints
                    },
                    style: {
                        stroke: '#5c5c5c',
                        lineWidth: 2
                    },
                    z: 999
                }));

                let itemX;
                rawData.forEach(dataItem => {
                    let binIndex = nearestIndex.binIndex;
                    let x = dataItem[binIndex * 3];
                    let y = dataItem[binIndex * 3 + 1];
                    let z = dataItem[binIndex * 3 + 2];
                    let pt = getPoint(x, y, z, getCoord);
                    itemX = pt[0];
                    let dot = new echarts.graphic.Circle({
                        shape: {
                            cx: pt[0],
                            cy: pt[1],
                            r: 3
                        },
                        style: {
                            fill: '#000',
                            stroke: '#ccc',
                            lineWidth: 1
                        },
                        z: 1000
                    });
                    zr.add(dot);
                    hoverDots.push(dot);
                });

                let hoveredItem = chartData[nearestIndex.itemIndex];
                tooltip = new echarts.graphic.Text({
                    position: [e.offsetX + 30, e.offsetY - 50],
                    style: {
                        text: hoveredItem.items[nearestIndex.binIndex][3],
                        textFill: '#000',
                        fontSize: 14,
                        textBackgroundColor: '#eee',
                        textBorderColor: '#008c99',
                        textBorderWidth: 2,
                        textBorderRadius: 5,
                        textPadding: 10,
                        rich: {}
                    },
                    z: 2000
                });
                zr.add(tooltip);

                let gridRect = ecChart.getModel().getComponent('grid', 0).coordinateSystem.getRect();

                tooltipX = new echarts.graphic.Text({
                    position: [
                        itemX,
                        gridRect.y + gridRect.height
                    ],
                    style: {
                        text: Math.round(hoveredItem.items[nearestIndex.binIndex][2] * 1000) / 1000,
                        textFill: '#fff',
                        textAlign: 'center',
                        fontSize: 12,
                        textBackgroundColor: '#333',
                        textBorderWidth: 2,
                        textPadding: [5, 7],
                        rich: {}
                    },
                    z: 2000
                });
                zr.add(tooltipX);

                tooltipY = new echarts.graphic.Text({
                    position: [
                        gridRect.x + gridRect.width, 
                        linePoints[linePoints.length - 1][1]
                    ],
                    style: {
                        text: hoveredItem.step,
                        textFill: '#fff',
                        textVerticalAlign: 'middle',
                        fontSize: 12,
                        textBackgroundColor: '#333',
                        textBorderWidth: 2,
                        textPadding: [5, 7],
                        rich: {}
                    },
                    z: 2000
                });
                zr.add(tooltipY);
            }
        });

        function findNearestValue(px, py) {
            let value = ecChart.convertFromPixel('grid', [px, py]);
            let itemIndex;
            let nearestY = Infinity;
            let binIndex;
            chartData.forEach((item, index) => {
                let dist = Math.abs(value[1] - item.step);
                if (dist < nearestY) {
                    nearestY = dist;
                    itemIndex = index;
                }
            });
            if (itemIndex != null) {
                let dataItem = chartData[itemIndex];
                let nearestX = Infinity;
                dataItem.items.forEach((item, index) => {
                    let dist = Math.abs(item[2] - value[0]);
                    if (dist < nearestX) {
                        nearestX = dist;
                        binIndex = index;
                    }
                });
                if (binIndex != null) {
                    return {
                        itemIndex: itemIndex,
                        binIndex: binIndex
                    };
                }
            }
        }

        ecChart.setOption(option);

    },

    // get origin data per 60 seconds
    startInterval() {
        this.getOringDataInterval = setInterval(() => {
            let tagInfo = this.data.get('tagInfo');
            this.getOriginChartData(tagInfo);
        }, intervalTime * 1000);
    },

    stopInterval() {
        clearInterval(this.getOringDataInterval);
    },

    getOriginChartData({run, tag}) {
        let params = {
            run,
            tag: tag.displayName
        };
        getPluginHistogramsHistograms(params).then(({status, data}) => {
            if (status === 0) {
                this.data.set('originData', data);
            }
        });
    },

    lightHoveredLine({seriesIndex}) {
        let series = this.myChart.getOption().series;
        let newSeries = series.map((item, index) => {
            if (seriesIndex === index) {
                item.lineStyle.normal.color = highlightLineColor;
                item.zlevel = 1;
            }
            else {
                item.lineStyle.normal.color = defaultLineColor;
                item.zlevel = 0;
            }
            return item;
        });
        this.myChart.setOption({
            series: newSeries
        });
    },

    initChartEvent() {
        this.myChart.on('mousemove', params => {
            let chartType = this.data.get('chartType');
            if (chartType === 'overlay') {
                this.lightHoveredLine(params);
            }
        });
    },

    expandArea() {
        let isExpand = this.data.get('isExpand');
        let pageBoxWidth = document.getElementsByClassName('visual-dl-chart-page-box')[0].offsetWidth;
        if (!isExpand) {
            let el = this.el.getElementsByClassName('visual-dl-chart-box')[0];
            el.style.width = pageBoxWidth + 'px';
            el.style.height = '600px';
            this.data.set('isExpand', true);
            this.myChart.resize({
                width: pageBoxWidth,
                height: 600
            });
        }
        else {
            let el = this.el.getElementsByClassName('visual-dl-chart-box')[0];
            el.style.width = '400px';
            el.style.height = '300px';
            this.data.set('isExpand', false);
            this.myChart.resize({
                width: 400,
                height: 300
            });
        }
    }
};
</script>
<style lang="stylus">
    .visual-dl-histogram-charts
        float left
        margin-bottom 20px
        margin 20px 30px 10px 0
        background #fff
        padding 10px
        .visual-dl-chart-box
            width 400px
            height 300px
        .visual-dl-chart-actions
            height 50px
            margin-left 10%
            .sm-form-item
                float left
                width 100px
                margin-top 0px
                display block
            .sm-button
                float left
                display block
                height 20px
                line-height 20px
                margin-top 10px
                padding 0 10px
</style>

