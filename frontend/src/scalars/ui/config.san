<template>
    <div class="visual-dl-scalar-config-com">
        <san-text-field
            hintText="input a tag group name to search"
            label="Group name RegExp"
            inputValue="{=config.groupNameReg=}"
        />
        <ui-slider
            label="Smoothing"
            value="{=config.smoothing=}"
            min="{{0}}"
            max="{{0.999}}"
            step="{{0.001}}"
        />
        <ui-radio-group
            label="Horizontal"
            value="{=config.horizontal=}"
            items="{{horizontalItems}}"
        />
        <ui-dropdown-menu
            label="Tooltip sorting method"
            items="{{sortingMethodItems}}"
            value="{=config.sortingMethod=}"
        />
        <ui-checkbox-group
            value="{=config.downloadLink=}"
            items="{{lnksItems}}"
        />
        <ui-checkbox-group
            value="{=config.outlier=}"
            items="{{chartItems}}"
        />
        <ui-checkbox-group
            value="{=config.runs=}"
            label="Runs"
            items="{{runsItems}}"
        />
        <san-button
            class="visual-dl-scalar-run-toggle"
            variants="raised {{config.running ? 'secondery' : 'primary'}}"
            on-click="toggleAllRuns"
        >
            {{config.running ? 'Running' : 'Stopped'}}
        </san-button>
    </div>
</template>
<script>
import TextField from 'san-mui/TextField';
import Slider from '../../common/component/Slider';
import RadioGroup from '../../common/component/RadioGroup';
import DropDownMenu from '../../common/component/DropDownMenu';
import CheckBoxGroup from '../../common/component/CheckBoxGroup';
import Button from 'san-mui/Button';
export default {
    components: {
        'san-text-field': TextField,
        'ui-slider': Slider,
        'ui-radio-group': RadioGroup,
        'ui-dropdown-menu': DropDownMenu,
        'ui-checkbox-group': CheckBoxGroup,
        'san-button': Button
    },
    initData() {
        return {
            config: {
                groupNameReg: '.*',
                smoothing: '0.6',
                horizontal: 'step',
                sortingMethod: 'default',
                downloadLink: [],
                outlier: [],
                running: true
            },
            horizontalItems: [
                {
                    name: 'Step',
                    value: 'step'
                },
                {
                    name: 'Relative',
                    value: 'relative'
                },
                {
                    name: 'Wall',
                    value: 'wall'
                }
            ],
            sortingMethodItems: [
                {
                    name: 'default',
                    value: 'default'
                },
                {
                    name: 'descending',
                    value: 'desc'
                },
                {
                    name: 'ascending',
                    value: 'asc'
                },
                {
                    name: 'nearest',
                    value: 'nearest'
                }
            ],
            runsItems: [],
            lnksItems: [
                {
                    value: 'yes',
                    name: 'Show data download links'
                }
            ],
            chartItems: [
                {
                    value: 'yes',
                    name: 'Ignore outliers in chart scaling'
                }
            ]
        };
    },
    toggleAllRuns() {
        let running = this.data.get('config.running');
        this.data.set('config.running', !running);
        this.fire('runningChange', running);
    }
};
</script>
<style lang="stylus">
@import '../../style/variables';
+prefix-classes('visual-dl-scalar-')
    .config-com
        width 90%
        margin 20px auto
        .run-toggle
            width 100%
            margin-top 20px
</style>


